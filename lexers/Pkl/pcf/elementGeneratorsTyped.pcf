res1 {
  2
  6
  10
}
res1b = "Expected value of type `String`, but got type `Int`. Value: 1"
res1c {
  0
  6
  20
}
res1d = "Expected value of type `String`, but got type `Int`. Value: 0"
res2 {
  2
  6
  10
}
res2b = "Expected value of type `Number`, but got type `String`. Value: \"other\""
res2c {
  0
  6
  20
}
res2d = "Expected value of type `Number`, but got type `String`. Value: \"other\""
res6 {
  "ae"
  "af"
  "be"
  "bf"
  "ce"
  "cf"
}
res6b = "Expected value of type `String`, but got type `Int`. Value: 42"
res6c {
  Pair(0, "ae")
  Pair(1, "af")
  Pair(1, "be")
  Pair(2, "bf")
  Pair(2, "ce")
  Pair(3, "cf")
}
res6d = "Expected value of type `String`, but got type `Int`. Value: 42"
res7 {
  "one"
  2
  6
  10
  "two"
  "ae"
  "af"
  "be"
  "bf"
  "ce"
  "cf"
  "three"
}
res7b = "Expected value of type `String`, but got type `Int`. Value: 42"
res8 {
  1
  2
  3
  "a"
  "b"
  "c"
  1
  2
  3
}
res8b = "Expected value of type `String`, but got type `Duration`. Value: 42.min"
res8c {
  Pair(0, 1)
  Pair(1, 2)
  Pair(2, 3)
  Pair(0, "a")
  Pair(1, "b")
  Pair(2, "c")
  Pair(0, 1)
  Pair(1, 2)
  Pair(2, 3)
}
res8d = "Expected value of type `String`, but got type `Duration`. Value: 42.min"
forWithMultipleMembers {
  "a"
  "ax"
  "ay"
  "b"
  "bx"
  "by"
  "c"
  "cx"
  "cy"
}
forWithMultipleMembersNested {
  "ax1"
  "1xa"
  "ay2"
  "2ya"
  "axx11"
  "11xxa"
  "ayy22"
  "22yya"
  "bx1"
  "1xb"
  "by2"
  "2yb"
  "bxx11"
  "11xxb"
  "byy22"
  "22yyb"
}
whenWithMultipleMembers {
  0
  0
  6
  12
  20
  40
}
whenWithMultipleMembersNested {
  20
  40
}
whenWithElse {
  0
  0
  "2"
  "4"
  6
  12
  "12"
  "24"
  20
  40
}
