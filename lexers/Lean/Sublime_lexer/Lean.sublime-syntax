%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: Lean
scope: source.lean

file_extensions:
  - lean

variables:
  name: '[A-Za-zŒë-Œ©Œ±-œâ_][A-Za-zŒë-Œ©Œ±-œâ_0-9]*|`+[^`]*`+|¬´[^¬ª]*¬ª'

contexts:

  main:
    - include: comment
    - include: string
    - include: expression

  expression:
    - match: (\()
      scope: punctuation.section.parens.begin.lean
      push:
        - meta_scope: meta.parens.lean
        - match: (\))
          scope: punctuation.section.parens.end.lean
          pop: true
        - include: comment
        - include: string
        - include: expression

    - match: (\{)
      scope: punctuation.section.braces.begin.lean
      push:
        - meta_scope: meta.braces.lean
        - match: (\})
          scope: punctuation.section.braces.end.lean
          pop: true
        - include: comment
        - include: string
        - include: expression

    - match: (\[)
      scope: punctuation.section.brackets.begin.lean
      push:
        - meta_scope: meta.brackets.lean
        - match: (\])
          scope: punctuation.section.brackets.end.lean
          pop: true
        - include: comment
        - include: string
        - include: expression

    - match: (‚ü®)
      scope: punctuation.section.angles.begin.lean
      push:
        - meta_scope: meta.angles.lean
        - match: (‚ü©)
          scope: punctuation.section.angles.end.lean
          pop: true
        - include: comment
        - include: string
        - include: expression

    - include: keyword
    - include: operator
    - include: attribute
    - include: constant
    - include: type
    - include: tactic
    - include: definition-name

  keyword:
    - match: \b(?<!\.)(Prop|Type|Sort)\s+({{name}}(\.{{name}})*)
      captures:
        1: storage.type.foundational.lean
        2: entity.name.type.lean
    - match: \b(?<!\.)(Prop|Type|Sort)\b
      scope: storage.type.foundational.lean
    - match: \b(?<!\.)(axiom|axioms|lemma|theorem|theory)\s+({{name}}(\.{{name}})*)
      captures:
        1: keyword.declaration.proposition.lean
        2: entity.name.function.proposition.lean
    - match: \b(?<!\.)(example)(?!\.)\b
      captures:
        1: keyword.declaration.proposition.lean
    - match: \b(?<!\.)(constant|constants|let|opaque|parameter|parameters|variable|variables)\s+({{name}}(\.{{name}})*)
      captures:
        1: keyword.declaration.variable.lean
        2: entity.name.constant.lean
    - match: \b(?<!\.)(constant|constants|let|opaque|parameter|parameters|variable|variables)(?!\.)\b
      scope: keyword.declaration.variable.lean
    - match: \b(?<!\.)(Œª|def|definition|macro|macro_rules)\s+({{name}}(\.{{name}})*)
      captures:
        1: keyword.declaration.function.lean
        2: entity.name.function.lean
    - match: \b(?<!\.)(Œª|def|definition|fun|macro|macro_rules)(?!\.)\b
      scope: keyword.declaration.function.lean
    - match: \b(?<!\.)(class|classes|coinductive|inductive|instance|instances|structure|universe|universes)\s+({{name}}(\.{{name}})*)
      captures:
        1: keyword.declaration.type.lean
        2: entity.name.type.lean
    - match: \b(?<!\.)(class|classes|coinductive|inductive|instance|instances|structure|universe|universes)(?!\.)\b
      scope: keyword.declaration.type.lean
    - match: \b(?<!\.)(abbrev|abbreviation|alias|infix|infixl|infixr|notation|postfix|prefix|syntax)\s+({{name}}(\.{{name}})*)
      captures:
        1: keyword.declaration.syntax.lean
        2: entity.name.lean
    - match: \b(?<!\.)(abbrev|abbreviation|alias|infix|infixl|infixr|notation|postfix|prefix|syntax)(?!\.)\b
      scope: keyword.declaration.syntax.lean
    - match: \b(?<!\.)(sorry)\b
      scope: invalid.illegal.lean
    - match: \b(?<!\.)(throw|panic)\b
      scope: keyword.control.exception.lean
    - match: \b(?<!\.)(bind|pure|private|meta|mutual|protected|noncomputable|local|unsafe|deriving|scoped|partial)\b
      scope: storage.modifier.lean
    - match: \b(?<!\.)(import|export|open|prelude)(?!\.)\b
      scope: keyword.control.import.lean
    - match: \b(?<!\.)(if|then|else|match|where|with)\b
      scope: keyword.control.conditional.lean
    - match: \b(?<!\.)(begin|do|end|namespace|return|section)(?!\.)\b
      scope: keyword.control.flow.lean
    - match: \b(?<!\.)(break|continue|for|forall|loop|start)(?!\.)\b
      scope: keyword.control.loop.lean
    - match: \b(?<!\.)(exposing|extends|hiding|include|omit|precedence|raw|renaming|reserve|using)(?!\.)\b
      scope: keyword.control.lean
    - match: \b(?<!\.)(calc|have|this|suffices|show|by|in|at|exists|assume|from|obtain|restate_axiom|run_cmd|set_option|haveI)(?!\.)\b
      scope: keyword.other.lean
    # TODO: actually make this scope below work as intended ?
    - match: '\b(?<!\.)(inductive|coinductive|structure|theorem|axiom|axioms|abbreviation|lemma|definition|def|instance|class|constant)\b\s+(\{[^}]*\})?'
      captures:
        1: keyword.declaration.definitioncommand.lean
      push:
        - meta_scope: meta.definitioncommand.lean
        - match: '(?=\bfor\b|\bwith\b|\bwhere\b|\bextends\b|[:\|\(\[\{‚¶É<>])'
          pop: true
        - include: comment
        - include: definition-name
        - match: ","

  operator:
    - match: '#(print|eval|reduce|check|help|exit|find|where)\b'
      scope: keyword.operator.builtin.lean
    - match: '(:|:=|=>|‚Ü¶|->|‚Üí|¬∑|‚Üê|<-)'
      scope: keyword.operator.assignment.lean
    - match: '(‚àÉ!|‚àÉ|‚àÄ|Œ†|Œ£)'
      scope: keyword.operator.qualifier.lean
    - match: '(\<\$\>)'
      scope: keyword.operator.functor.lean
    - match: '(\|)'
      scope: keyword.operator.comparison.match.lean
    - match: '([-+*/√∑%^‚àö‚àò])'
      scope: keyword.operator.arithmetic.lean
    - match: '(==|!=|<=|>=|[<>‚â§‚â•])'
      scope: keyword.operator.logical.comparison.lean
    - match: '([=‚â†‚âà‚âü‚â°‚¨ù‚ñ∏‚ñπ]|=\?=)'
      scope: keyword.operator.relation.lean
    - match: '(\&\&|\|\||\/\\|\\\/|<->|[‚àß‚à®‚äº‚äΩ‚äª‚Üî‚áî‚áí‚áê])'
      scope: keyword.operator.logical.lean
    - match: '\b(d?ite|cond|and|or|not)\b'
      scope: keyword.operator.word.logical.lean
    - match: '(\&\&\&|\|\|\||\^\^\^|~~~|>>>|<<<)'
      scope: keyword.operator.bitwise.lean
    - match: '(¬¨|~)'
      scope: keyword.operator.negation.lean
    - match: '(‚Åª¬π)'
      scope: keyword.operator.inversion.lean
    - match: '(‚äï|√ó|‚àò|‚óã)'
      scope: keyword.operator.type.lean
    - match: '(>>=|~~>)'
      scope: keyword.operator.bind.lean
    - match: '([‚àà‚àâ‚à©‚à™‚äÇ‚äÉ‚äÜ‚äá\\‚àñ‚äî‚ñµ])'
      scope: keyword.operator.sets.lean
    - match: '(\+\+)'
      scope: keyword.operator.append.lean
    - match: '(::|<\||\|>)'
      scope: keyword.operator.other.lean
    - match: '(?<=\s)(_)(?=\s)'
      scope: variable.language.lean

  attribute:
    - match: '(@&)'
      scope: storage.modifier.borrowed.lean
    - match: '(@)\[([^\]]*)\]'
      captures:
        1: keyword.other.attribute.lean
        2: storage.modifier.attribute.lean
    - match: '\b(attribute)\s*(\[)([^\]]*)(\])'
      captures:
        1: keyword.declaration.attribute.lean
        2: punctuation.section.braces.begin.lean
        3: storage.modifier.attribute.lean
        4: punctuation.section.braces.end.lean

  type:
    - match: \b(Bool|Nat|Int|Float|Array|List|Char|String|Option|Thunk|Task|Thread)\b
      scope: storage.type.builtin.lean
    - match: \b(And|Context|Empty|Eq|Except|Exception|False|Fin|HEq|MacroScopesView|Methods|MProd|Name|Or|ParserDescr|PEmpty|PLift|PProd|Prod|PUnit|Result|SepArray|SourceInfo|State|String\.Pos|Substring|Subtype|Syntax|True|TSepArray|TSyntax|UInt16|UInt32|UInt64|UInt8|ULift|USize)\b
      scope: storage.type.prelude.lean
    - match: \b([ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§])\b
      scope: support.type.mathlib.lean

  tactic:
    - match: \b(abstract|ac_refl|ac_reflexivity|admit|all_goals|any_goals|apply|apply_auto_param|apply_instance|apply_opt_param|apply_with|assume|assumption|by_cases|by_contra|by_contradiction|case|cases|cc|change|clear|constructor|contradiction|dedup|delta|destruct|done|dsimp|dunfold|eapply|econstructor|erewrite|erw|exact|exacts|exfalso|existsi|fail_if_success|fapply|from|generalize|guard_hyp|guard_target|have|induction|injection|injections|intro|intros|introv|left|let|refine|refl|reflexivity|rename|repeat|revert|rewrite|right|rw|rwa|show|simp|simp_intros|skip|solve1|specialize|split|subst|success_if_fail|suffices|symmetry|trace|trace_simp_set|trace_state|transitivity|trivial|try|type_check|unfold|unfold1|unfold_projs)\b
      scope: support.function.tactic.builtin.lean
    - match: \b(abel|abel1|abel_nf|abstract|absurd|ac_change|ac_mono|ac_refl|ac_rfl|admit|aesop|aesop_cases|aesop_cat|aesop_cat_nonterminal|aesop_destruct_products|aesop_split_hyps|aesop_subst|aesop_unfold|all_goals|any_goals|apply|apply_assumption|apply_auto_param|apply_congr|apply_ext_lemma|apply_fun|apply_instance|apply_mod_cast|apply_opt_param|apply_rules|apply_with|array_get_dec|assoc_rewrite|assume|assumption|assumption'|assumption_mod_cast|async|aux_group‚ÇÅ|aux_group‚ÇÇ|bddDefault|beta_reduce|bicategory_coherence|bitwise_assoc_tac|borelize|by_cases|by_contra|by_contra'|by_contradiction|calc|cancel_denoms|case|cases|cases_matching|cases_type|casesm|category_theory.elementwise_of|category_theory.reassoc_of|cc|change|change'|checkpoint|choose|clarify|classical|clear|clear'|clear_|clear_aux_decl|clear_except|clear_value|coherence|comp_val|compareOfLessAndEq_rfl|compute_degree|compute_degree_le|congr|congr'|congrm|constructor|constructorm|continuity|continuity'|contradiction|contrapose|conv|conv_lhs|conv_rhs|convert|convert_to|dbg_trace|dec_trivial|decide|decreasing_tactic|decreasing_trivial|decreasing_with|delta|destruct|discrete_cases|done|dsimp|dunfold|eapply|econstructor|elementwise|elide|eq_refl|equiv_rw|equiv_rw_type|erewrite|erw|eta_expand|eta_reduce|eta_struct|exact|exact_mod_cast|exacts|exfalso|exists|existsi|ext|ext1|extract_goal|extract_lets|fail|fail_if_no_progress|fail_if_success|fapply|fconstructor|field_simp|filter_upwards|fin_cases|find|finish|first|focus|frac_tac|from|fsplit|funext|gcongr|gcongr_discharger|generalize|generalize'|generalize_hyp|generalize_proofs|generalizes|get_elem_tactic|get_elem_tactic_trivial|group|guard_expr|guard_goal_nums|guard_hyp|guard_hyp_nums|guard_target|guard_target'|h_generalize|have|haveI|hint|induction|infer_instance|infer_param|inhabit|injection|injections|injections_and_clear|interval_cases|intro|intros|introv|isBoundedDefault|itauto|iterate|left|let|letI|library_search|lift|lift_lets|liftable_prefixes|linarith|linear_combination|linear_combination2|map_tacs|mapply|match|match_target|measurability|measurability'|mfld_set_tac|mod_cases|mono|monoidal_coherence|move_add|move_mul|native_decide|next|nlinarith|noncomm_ring|nontriviality|norm_cast|norm_cast0|norm_fin|norm_num|norm_num1|nth_rewrite|nth_rewrite_lhs|nth_rewrite_rhs|nth_rw|observe|obtain|omega|on_goal|open|pi_instance|pick_goal|polyrith|positivity|pretty_cases|pure_coherence|push_cast|push_neg|qify|rcases|rcongr|recover|reduce|refine|refine_lift|refine_struct|refl|reflexivity|rel|rename|rename_bvar|rename_i|rename_var|repeat|repeat1|replace|revert|revert_after|revert_deps|revert_target_deps|rewrite|rewrite_search|rfl|right|ring|ring1|ring1_nf|ring2|ring_exp|ring_nf|rintro|rotate|rotate_left|rotate_right|rsuffices|rsufficesI|run_tac|rw|rw_mod_cast|rwa|safe|save|scc|set|set_option|show|show_term|simp|simp_all|simp_all_arith|simp_arith|simp_intro|simp_intros|simp_result|simp_rw|simp_wf|simpa|sizeOf_list_dec|skip|sleep|slice|slice_lhs|slice_rhs|slim_check|smul_tac|solve|solve1|solve_by_elim|sorry|specialize|split|split_ands|split_ifs|squeeze_dsimp|squeeze_scope|squeeze_simp|squeeze_simpa|stop|subst|subst'|subst_eqs|subst_vars|substs|subtype_instance|success_if_fail|success_if_fail_with_msg|suffices|suggest|swap|swap_var|symm|symm_saturate|symmetry|tauto|tautology|tfae|tfae_finish|tfae_have|tidy|trace|trace_simp_set|trace_state|trans|transitivity|transport|triv|trivial|trivial'|trunc_cases|try|type_check|unelide|unfold|unfold1|unfold_cases|unfold_coes|unfold_let|unfold_projs|unhygienic|unify_equations|unit_interval|unreachable|use|use_discharger|use_finite_instance|whisker_simps|whnf|with_cases|with_panel_widgets|with_reducible|with_reducible_and_instances|with_unfolding_all|wlog|zify)\b
      scope: support.function.tactic.mathlib.lean

  definition-name:
    - match: ¬´
      push:
        - meta_content_scope: entity.name.function.lean
        - match: ¬ª
          pop: true
    - match: '`+[^\[(]\S+'
      scope: entity.name.lean
    - match: '\b[^:¬´¬ª\(\)\{\}\[\]‚ü®‚ü©[:space:]=‚ÜíŒª‚àÄ?][^:¬´¬ª\(\)\{\}\[\]‚ü®‚ü©[:space:]]*'
      scope: entity.name.lean

  string:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.lean
      push:
        - meta_scope: string.quoted.double.lean
        - match: '"'
          captures:
            0: punctuation.definition.string.end.lean
          pop: true
        - match: '\\[\\"nt'']'
          scope: constant.character.escape.lean
        - match: '\\x[0-9A-Fa-f][0-9A-Fa-f]'
          scope: constant.character.escape.lean
        - match: '\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]'
          scope: constant.character.escape.lean
    - match: '''[^\\'']'''
      scope: string.quoted.single.lean
    - match: '''(\\(x..|u....|.))'''
      scope: string.quoted.single.lean
      captures:
        1: constant.character.escape.lean

  constant:
    - match: '\b([0-9]+|0([xX][0-9a-fA-F]+))\b'
      scope: constant.numeric.integer.lean
    - match: '\b(false|true)\b'
      scope: constant.language.boolean.lean
    - match: '\b(‚àÖ|{\s*})\b'
      scope: constant.language.emptyset.lean
    - match: '\b(some|none)\b'
      scope: constant.language.option.lean

  comment:
    - include: comment-dash
    - include: comment-doc
    - include: string-block
    - include: comment-mod-doc
    - include: comment-block

  comment-dash:
    - match: --
      scope: punctuation.definition.comment.begin.lean
      push:
        - meta_scope: comment.line.double-dash.lean
        - match: $
          scope: punctuation.definition.comment.end.lean
          pop: true

  comment-block:
    - match: /-
      scope: punctuation.definition.comment.begin.lean
      push:
        - meta_scope: comment.block.lean
        - match: -/
          scope: punctuation.definition.comment.end.lean
          pop: true
        - include: comment-block

  comment-doc:
    - match: /--
      scope: punctuation.definition.comment.begin.lean
      embed: scope:text.html.markdown
      embed_scope:
        comment.embedded.lean
        text.html.markdown
      escape: -/
      escape_captures:
        0: punctuation.definition.comment.end.lean
      push:
        - meta_scope: comment.block.documentation.lean
        - match: -/
          scope: punctuation.definition.comment.end.lean
          pop: true
        - include: comment-block

  comment-mod-doc:
    - match: /-!
      scope: punctuation.definition.comment.begin.lean
      embed: scope:text.html.markdown
      embed_scope:
        comment.embedded.lean
        text.html.markdown
      escape: -/
      escape_captures:
        0: punctuation.definition.comment.end.lean
      push:
        - meta_scope: comment.block.documentation.lean
        - match: -/
          scope: punctuation.definition.comment.end.lean
          pop: true
        - include: comment-block

  string-block:
    - match: /-"
      scope: punctuation.definition.comment.begin.lean
      push:
        - meta_scope: comment.block.string.lean
        - match: '"-/'
          scope: punctuation.definition.comment.end.lean
          pop: true
        - include: comment-block
