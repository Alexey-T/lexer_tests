MODULE Ldl0MakeEst

(* This module was mechanically generated by GenConstEst. 
     Generated on:  2005/07/16 10:23:40 GMT
     Language    Scheutz Language Definition Language Ldl0
     Version     0.0.0.0
     Date        2005/07/16 10:10:01 GMT
     Fingerprint 82387d0ae0f2cb68
*) 

; IMPORT LbeStd 
; IMPORT EstHs 
; IMPORT EstBuild 
; IMPORT ModHs 
; IMPORT SharedStrings 
; IMPORT Ldl0Tok AS LdlTok 
; FROM Assertions IMPORT AssertionFailure 

(* VISIBLE: *) 
; PROCEDURE Root ( Lang : LbeStd . LangTyp := LbeStd . LangNull ) 
  : LbeStd . EstRootTyp 
  RAISES { AssertionFailure } 

  = CONST Dummy = 0 (* For ease of generation. *) 

  ; PROCEDURE BuildNode15_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode15_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode15_Alternation 

  ; PROCEDURE BuildNode12_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode12_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode15_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwVERT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode12_AsClassRule 

  ; PROCEDURE BuildNode19_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode19_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VARTERM\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode19_Alternation 

  ; PROCEDURE BuildNode17_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode17_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode19_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwVARTERM"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode17_AsClassRule 

  ; PROCEDURE BuildNode23_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode23_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"START\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode23_Alternation 

  ; PROCEDURE BuildNode21_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode21_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode23_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwSTART"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode21_AsClassRule 

  ; PROCEDURE BuildNode27_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode27_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"RIGHT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode27_Alternation 

  ; PROCEDURE BuildNode25_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode25_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode27_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwRIGHT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode25_AsClassRule 

  ; PROCEDURE BuildNode31_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode31_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PRESENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode31_Alternation 

  ; PROCEDURE BuildNode29_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode29_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode31_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwPRESENT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode29_AsClassRule 

  ; PROCEDURE BuildNode35_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode35_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PREC\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode35_Alternation 

  ; PROCEDURE BuildNode33_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode33_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode35_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwPREC"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode33_AsClassRule 

  ; PROCEDURE BuildNode39_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode39_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode39_Alternation 

  ; PROCEDURE BuildNode37_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode37_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode39_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwPLURAL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode37_AsClassRule 

  ; PROCEDURE BuildNode43_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode43_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"MEMBER\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode43_Alternation 

  ; PROCEDURE BuildNode41_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode41_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode43_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwMEMBER"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode41_AsClassRule 

  ; PROCEDURE BuildNode47_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode47_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LDL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode47_Alternation 

  ; PROCEDURE BuildNode45_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode45_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode47_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwLDL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode45_AsClassRule 

  ; PROCEDURE BuildNode51_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode51_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LEFT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode51_Alternation 

  ; PROCEDURE BuildNode49_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode49_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode51_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwLEFT"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode49_AsClassRule 

  ; PROCEDURE BuildNode55_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode55_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONEMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode55_Alternation 

  ; PROCEDURE BuildNode53_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode53_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode55_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwNONEMPTY"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode53_AsClassRule 

  ; PROCEDURE BuildNode59_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode59_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode59_Alternation 

  ; PROCEDURE BuildNode57_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode57_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode59_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwNONE"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode57_AsClassRule 

  ; PROCEDURE BuildNode63_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode63_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode63_Alternation 

  ; PROCEDURE BuildNode61_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode61_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode63_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwHORIZ"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode61_AsClassRule 

  ; PROCEDURE BuildNode67_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode67_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode67_Alternation 

  ; PROCEDURE BuildNode65_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode65_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode67_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwFILL"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode65_AsClassRule 

  ; PROCEDURE BuildNode71_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode71_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode71_Alternation 

  ; PROCEDURE BuildNode69_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode69_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode71_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RwEND"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode69_AsClassRule 

  ; PROCEDURE BuildNode75_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode75_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode75_Alternation 

  ; PROCEDURE BuildNode73_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode73_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode75_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseParen"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode73_AsClassRule 

  ; PROCEDURE BuildNode79_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode79_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode79_Alternation 

  ; PROCEDURE BuildNode77_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode77_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode79_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "OpenParen"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode77_AsClassRule 

  ; PROCEDURE BuildNode83_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode83_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode83_Alternation 

  ; PROCEDURE BuildNode81_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode81_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode83_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "At"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode81_AsClassRule 

  ; PROCEDURE BuildNode87_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode87_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"!\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode87_Alternation 

  ; PROCEDURE BuildNode85_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode85_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode87_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Bang"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode85_AsClassRule 

  ; PROCEDURE BuildNode91_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode91_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"_\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode91_Alternation 

  ; PROCEDURE BuildNode89_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode89_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode91_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Underscore"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode89_AsClassRule 

  ; PROCEDURE BuildNode95_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode95_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode95_Alternation 

  ; PROCEDURE BuildNode93_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode93_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode95_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Arrow"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode93_AsClassRule 

  ; PROCEDURE BuildNode99_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode99_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode99_Alternation 

  ; PROCEDURE BuildNode97_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode97_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode99_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DoubleStroke"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode97_AsClassRule 

  ; PROCEDURE BuildNode103_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode103_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode103_Alternation 

  ; PROCEDURE BuildNode101_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode101_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode103_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Stroke"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode101_AsClassRule 

  ; PROCEDURE BuildNode107_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode107_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode107_Alternation 

  ; PROCEDURE BuildNode105_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode105_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode107_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Equals"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode105_AsClassRule 

  ; PROCEDURE BuildNode111_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode111_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode111_Alternation 

  ; PROCEDURE BuildNode109_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode109_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode111_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseBracePlus"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode109_AsClassRule 

  ; PROCEDURE BuildNode115_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode115_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode115_Alternation 

  ; PROCEDURE BuildNode113_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode113_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode115_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseBrace"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode113_AsClassRule 

  ; PROCEDURE BuildNode119_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode119_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode119_Alternation 

  ; PROCEDURE BuildNode117_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode117_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode119_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "OpenBrace"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode117_AsClassRule 

  ; PROCEDURE BuildNode123_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode123_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode123_Alternation 

  ; PROCEDURE BuildNode121_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode121_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode123_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CloseBracket"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode121_AsClassRule 

  ; PROCEDURE BuildNode127_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode127_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode127_Alternation 

  ; PROCEDURE BuildNode125_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode125_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode127_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "OpenBracket"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode125_AsClassRule 

  ; PROCEDURE BuildNode131_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode131_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\";\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode131_Alternation 

  ; PROCEDURE BuildNode129_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode129_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode131_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Semicolon"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode129_AsClassRule 

  ; PROCEDURE BuildNode135_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode135_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode135_Alternation 

  ; PROCEDURE BuildNode133_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode133_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode135_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonColonEquals"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode133_AsClassRule 

  ; PROCEDURE BuildNode139_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode139_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode139_Alternation 

  ; PROCEDURE BuildNode137_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode137_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode139_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ColonEquals"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode137_AsClassRule 

  ; PROCEDURE BuildNode143_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode143_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode143_Alternation 

  ; PROCEDURE BuildNode141_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode141_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode143_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Dot"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode141_AsClassRule 

  ; PROCEDURE BuildNode147_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode147_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode147_Alternation 

  ; PROCEDURE BuildNode145_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode145_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode147_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Colon"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode145_AsClassRule 

  ; PROCEDURE BuildNode149_StartRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode149_StartRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . StartRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Entire language definition. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* The abstract syntax of Ldl0: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode149_StartRule 

  ; PROCEDURE BuildNode157_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode157_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode157_IdentPlusList 

  ; PROCEDURE BuildNode161_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode161_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode161_AsReqdChild 

  ; PROCEDURE BuildNode164_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode164_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rules"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode164_AsReqdChild 

  ; PROCEDURE BuildNode167_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode167_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClosingName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode167_AsReqdChild 

  ; PROCEDURE BuildNode160_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode160_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode167_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode164_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode161_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode160_AsChildList 

  ; PROCEDURE BuildNode156_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode156_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode160_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode157_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode156_AsFixedRule 

  ; PROCEDURE BuildNode170_AsVarTermRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode170_AsVarTermRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsVarTermRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode170_AsVarTermRule 

  ; PROCEDURE BuildNode173_AsVarTermRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode173_AsVarTermRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsVarTermRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode173_AsVarTermRule 

  ; PROCEDURE BuildNode176_AsVarTermRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode176_AsVarTermRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsVarTermRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode176_AsVarTermRule 

  ; PROCEDURE BuildNode180_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode180_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode180_IdentPlusList 

  ; PROCEDURE BuildNode179_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode179_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode180_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode179_AsStarRule 

  ; PROCEDURE BuildNode188_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode188_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode188_Alternation 

  ; PROCEDURE BuildNode185_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode185_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode188_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode185_AsClassRule 

  ; PROCEDURE BuildNode195_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode195_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Start symbol specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode195_IdentPlusList 

  ; PROCEDURE BuildNode201_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode201_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode201_AsReqdChild 

  ; PROCEDURE BuildNode200_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode200_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode201_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode200_AsChildList 

  ; PROCEDURE BuildNode194_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode194_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode200_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode195_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode194_AsFixedRule 

  ; PROCEDURE BuildNode209_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode209_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode209_Alternation 

  ; PROCEDURE BuildNode204_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode204_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode209_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Abstract Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode204_AsClassRule 

  ; PROCEDURE BuildNode215_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode215_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode215_IdentPlusList 

  ; PROCEDURE BuildNode219_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode219_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Name"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode219_AsReqdChild 

  ; PROCEDURE BuildNode218_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode218_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode219_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode218_AsChildList 

  ; PROCEDURE BuildNode214_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode214_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode218_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode215_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode214_AsFixedRule 

  ; PROCEDURE BuildNode223_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode223_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode223_IdentPlusList 

  ; PROCEDURE BuildNode227_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode227_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode227_AsReqdChild 

  ; PROCEDURE BuildNode230_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode230_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode230_AsReqdChild 

  ; PROCEDURE BuildNode226_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode226_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode230_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode227_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode226_AsChildList 

  ; PROCEDURE BuildNode222_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode222_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode226_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode223_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode222_AsFixedRule 

  ; PROCEDURE BuildNode234_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode234_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode234_IdentPlusList 

  ; PROCEDURE BuildNode233_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode233_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode234_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode233_AsStarRule 

  ; PROCEDURE BuildNode242_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode242_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode242_Alternation 

  ; PROCEDURE BuildNode239_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode239_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode242_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode239_AsClassRule 

  ; PROCEDURE BuildNode246_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode246_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode246_IdentPlusList 

  ; PROCEDURE BuildNode251_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode251_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode251_AsOptChild 

  ; PROCEDURE BuildNode254_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode254_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode254_AsReqdChild 

  ; PROCEDURE BuildNode250_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode250_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode254_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode251_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode250_AsChildList 

  ; PROCEDURE BuildNode245_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode245_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode250_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode246_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode245_AsFixedRule 

  ; PROCEDURE BuildNode260_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode260_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode260_Alternation 

  ; PROCEDURE BuildNode257_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode257_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode260_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode257_AsClassRule 

  ; PROCEDURE BuildNode264_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode264_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode264_IdentPlusList 

  ; PROCEDURE BuildNode269_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode269_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode269_AsReqdChild 

  ; PROCEDURE BuildNode272_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode272_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode272_AsOptChild 

  ; PROCEDURE BuildNode275_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode275_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode275_AsReqdChild 

  ; PROCEDURE BuildNode268_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode268_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode275_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode272_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode269_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode268_AsChildList 

  ; PROCEDURE BuildNode263_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode263_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode268_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode264_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode263_AsFixedRule 

  ; PROCEDURE BuildNode279_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode279_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode279_IdentPlusList 

  ; PROCEDURE BuildNode283_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode283_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClassName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode283_AsReqdChild 

  ; PROCEDURE BuildNode286_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode286_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClassMembers"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode286_AsReqdChild 

  ; PROCEDURE BuildNode282_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode282_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode286_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode283_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode282_AsChildList 

  ; PROCEDURE BuildNode278_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode278_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode282_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode279_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode278_AsFixedRule 

  ; PROCEDURE BuildNode290_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode290_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode290_IdentPlusList 

  ; PROCEDURE BuildNode289_AsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode289_AsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode290_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode289_AsPlusRule 

  ; PROCEDURE BuildNode300_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode300_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode300_Alternation 

  ; PROCEDURE BuildNode295_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode295_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode300_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Productions of concrete syntax: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode295_AsClassRule 

  ; PROCEDURE BuildNode305_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode305_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode305_IdentPlusList 

  ; PROCEDURE BuildNode309_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode309_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Lhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode309_AsReqdChild 

  ; PROCEDURE BuildNode312_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode312_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternatives"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode312_AsReqdChild 

  ; PROCEDURE BuildNode308_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode308_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode312_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode309_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode308_AsChildList 

  ; PROCEDURE BuildNode304_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode304_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode308_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode305_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode304_AsFixedRule 

  ; PROCEDURE BuildNode316_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode316_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode316_IdentPlusList 

  ; PROCEDURE BuildNode315_AsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode315_AsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode316_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode315_AsPlusRule 

  ; PROCEDURE BuildNode322_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode322_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode322_IdentPlusList 

  ; PROCEDURE BuildNode326_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode326_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Lhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode326_AsReqdChild 

  ; PROCEDURE BuildNode329_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode329_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode329_AsReqdChild 

  ; PROCEDURE BuildNode325_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode325_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode329_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode326_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode325_AsChildList 

  ; PROCEDURE BuildNode321_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode321_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode325_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode322_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode321_AsFixedRule 

  ; PROCEDURE BuildNode333_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode333_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode333_IdentPlusList 

  ; PROCEDURE BuildNode332_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode332_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode333_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode332_AsStarRule 

  ; PROCEDURE BuildNode341_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode341_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode341_Alternation 

  ; PROCEDURE BuildNode338_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode338_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode341_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode338_AsClassRule 

  ; PROCEDURE BuildNode347_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode347_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode347_Alternation 

  ; PROCEDURE BuildNode344_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode344_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode347_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode344_AsClassRule 

  ; PROCEDURE BuildNode352_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode352_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode352_Alternation 

  ; PROCEDURE BuildNode349_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode349_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode352_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode349_AsClassRule 

  ; PROCEDURE BuildNode357_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode357_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode357_Alternation 

  ; PROCEDURE BuildNode354_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode354_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode357_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode354_AsClassRule 

  ; PROCEDURE BuildNode361_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode361_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode361_IdentPlusList 

  ; PROCEDURE BuildNode366_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode366_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Lhs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode366_AsReqdChild 

  ; PROCEDURE BuildNode369_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode369_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ListChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode369_AsReqdChild 

  ; PROCEDURE BuildNode372_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode372_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Separators"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode372_AsOptChild 

  ; PROCEDURE BuildNode365_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode365_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode372_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode369_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode366_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode365_AsChildList 

  ; PROCEDURE BuildNode360_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode360_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode365_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode361_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode360_AsFixedRule 

  ; PROCEDURE BuildNode376_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode376_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode376_IdentPlusList 

  ; PROCEDURE BuildNode375_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode375_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode376_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode375_AsStarRule 

  ; PROCEDURE BuildNode384_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode384_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntTrailingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 1
                     , ModCmntNlBefore := FALSE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* A delimiter, i.e. terminal with fixed spelling. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL , EstHs . EstChildKindTrailingMod 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode384_Alternation 

  ; PROCEDURE BuildNode381_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode381_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode384_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode381_AsClassRule 

  ; PROCEDURE BuildNode389_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode389_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -9
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Precedence and associativity specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode389_IdentPlusList 

  ; PROCEDURE BuildNode395_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode395_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Levels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode395_AsReqdChild 

  ; PROCEDURE BuildNode394_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode394_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode395_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode394_AsChildList 

  ; PROCEDURE BuildNode388_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode388_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode394_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode389_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode388_AsFixedRule 

  ; PROCEDURE BuildNode399_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode399_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode399_IdentPlusList 

  ; PROCEDURE BuildNode398_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode398_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode399_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode398_AsStarRule 

  ; PROCEDURE BuildNode407_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode407_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode407_Alternation 

  ; PROCEDURE BuildNode404_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode404_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode407_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode404_AsClassRule 

  ; PROCEDURE BuildNode412_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode412_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode412_IdentPlusList 

  ; PROCEDURE BuildNode418_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode418_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Operators"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode418_AsReqdChild 

  ; PROCEDURE BuildNode417_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode417_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode418_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode417_AsChildList 

  ; PROCEDURE BuildNode411_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode411_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode417_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode412_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode411_AsFixedRule 

  ; PROCEDURE BuildNode426_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode426_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode426_Alternation 

  ; PROCEDURE BuildNode421_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode421_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode426_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -4
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Abstract Syntax of Format Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode421_AsClassRule 

  ; PROCEDURE BuildNode432_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode432_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode432_Alternation 

  ; PROCEDURE BuildNode429_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode429_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode432_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode429_AsClassRule 

  ; PROCEDURE BuildNode438_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode438_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode438_IdentPlusList 

  ; PROCEDURE BuildNode445_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode445_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode445_AsReqdChild 

  ; PROCEDURE BuildNode448_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode448_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode448_AsReqdChild 

  ; PROCEDURE BuildNode444_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode444_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode448_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode445_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode444_AsChildList 

  ; PROCEDURE BuildNode437_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode437_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode444_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode438_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode437_AsFixedRule 

  ; PROCEDURE BuildNode452_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode452_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode452_IdentPlusList 

  ; PROCEDURE BuildNode451_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode451_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode452_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode451_AsStarRule 

  ; PROCEDURE BuildNode460_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode460_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode460_Alternation 

  ; PROCEDURE BuildNode457_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode457_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode460_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode457_AsClassRule 

  ; PROCEDURE BuildNode465_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode465_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode465_IdentPlusList 

  ; PROCEDURE BuildNode464_AsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode464_AsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Elements"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode465_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode464_AsStarRule 

  ; PROCEDURE BuildNode473_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode473_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "String"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode473_Alternation 

  ; PROCEDURE BuildNode470_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode470_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode473_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode470_AsClassRule 

  ; PROCEDURE BuildNode478_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode478_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode478_IdentPlusList 

  ; PROCEDURE BuildNode482_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode482_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IndentCode"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode482_AsOptChild 

  ; PROCEDURE BuildNode481_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode481_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode482_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode481_AsChildList 

  ; PROCEDURE BuildNode477_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode477_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode481_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode478_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode477_AsFixedRule 

  ; PROCEDURE BuildNode488_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode488_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode488_Alternation 

  ; PROCEDURE BuildNode485_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode485_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode488_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode485_AsClassRule 

  ; PROCEDURE BuildNode494_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode494_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode494_IdentPlusList 

  ; PROCEDURE BuildNode501_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode501_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode501_AsReqdChild 

  ; PROCEDURE BuildNode500_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode500_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode501_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode500_AsChildList 

  ; PROCEDURE BuildNode493_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode493_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode500_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode494_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode493_AsFixedRule 

  ; PROCEDURE BuildNode507_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode507_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode507_Alternation 

  ; PROCEDURE BuildNode504_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode504_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode507_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode504_AsClassRule 

  ; PROCEDURE BuildNode512_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode512_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode512_IdentPlusList 

  ; PROCEDURE BuildNode516_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode516_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode516_AsOptChild 

  ; PROCEDURE BuildNode519_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode519_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IndentCode"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode519_AsOptChild 

  ; PROCEDURE BuildNode522_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode522_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ChildClass"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode522_AsReqdChild 

  ; PROCEDURE BuildNode515_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode515_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode522_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode519_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode516_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode515_AsChildList 

  ; PROCEDURE BuildNode511_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode511_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode515_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode512_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode511_AsFixedRule 

  ; PROCEDURE BuildNode528_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode528_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode528_Alternation 

  ; PROCEDURE BuildNode525_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode525_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode528_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode525_AsClassRule 

  ; PROCEDURE BuildNode532_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode532_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode532_IdentPlusList 

  ; PROCEDURE BuildNode531_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode531_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode532_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode531_AsFixedRule 

  ; PROCEDURE BuildNode538_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode538_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode538_Alternation 

  ; PROCEDURE BuildNode535_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode535_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode538_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildCondFmt"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode535_AsClassRule 

  ; PROCEDURE BuildNode544_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode544_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode544_IdentPlusList 

  ; PROCEDURE BuildNode550_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode550_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode550_AsReqdChild 

  ; PROCEDURE BuildNode549_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode549_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode550_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode549_AsChildList 

  ; PROCEDURE BuildNode543_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode543_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode549_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode544_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode543_AsFixedRule 

  ; PROCEDURE BuildNode554_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode554_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode554_IdentPlusList 

  ; PROCEDURE BuildNode558_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode558_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Class"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode558_AsReqdChild 

  ; PROCEDURE BuildNode561_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode561_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Children"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode561_AsReqdChild 

  ; PROCEDURE BuildNode557_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode557_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode561_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode558_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode557_AsChildList 

  ; PROCEDURE BuildNode553_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode553_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode557_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode554_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode553_AsFixedRule 

  ; PROCEDURE BuildNode567_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode567_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode567_Alternation 

  ; PROCEDURE BuildNode564_AsClassRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode564_AsClassRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsClassRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode567_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode564_AsClassRule 

  ; PROCEDURE BuildNode573_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode573_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode573_IdentPlusList 

  ; PROCEDURE BuildNode580_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode580_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Parents"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode580_AsReqdChild 

  ; PROCEDURE BuildNode583_AsReqdChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode583_AsReqdChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsReqdChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ListChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode583_AsReqdChild 

  ; PROCEDURE BuildNode586_AsOptChild ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode586_AsOptChild *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsOptChild
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatters"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode586_AsOptChild 

  ; PROCEDURE BuildNode579_AsChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode579_AsChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode586_AsOptChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode583_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode580_AsReqdChild ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode579_AsChildList 

  ; PROCEDURE BuildNode572_AsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode572_AsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . AsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode579_AsChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode573_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode572_AsFixedRule 

  ; PROCEDURE BuildNode596_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode596_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LDL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode596_Concatenation 

  ; PROCEDURE BuildNode589_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode589_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode596_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Entire language definition. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* The Concrete Syntax of Ldl0: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode589_CsFixedRule 

  ; PROCEDURE BuildNode602_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode602_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode602_CsStarRule 

  ; PROCEDURE BuildNode612_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode612_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"START\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode612_Concatenation 

  ; PROCEDURE BuildNode607_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode607_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode612_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Start symbol specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode607_CsFixedRule 

  ; PROCEDURE BuildNode621_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode621_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VARTERM\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode621_Concatenation 

  ; PROCEDURE BuildNode616_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode616_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode621_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Abstract Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode616_CsFixedRule 

  ; PROCEDURE BuildNode628_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode628_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode628_Concatenation 

  ; PROCEDURE BuildNode625_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode625_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode628_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode625_CsFixedRule 

  ; PROCEDURE BuildNode637_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode637_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\";\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode637_CsAtomList 

  ; PROCEDURE BuildNode633_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode633_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode637_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode633_CsStarRule 

  ; PROCEDURE BuildNode643_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode643_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode643_Concatenation 

  ; PROCEDURE BuildNode642_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode642_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode643_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode642_Concatenation 

  ; PROCEDURE BuildNode639_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode639_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode642_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode639_CsFixedRule 

  ; PROCEDURE BuildNode651_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode651_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode651_Concatenation 

  ; PROCEDURE BuildNode650_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode650_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode651_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode650_Concatenation 

  ; PROCEDURE BuildNode647_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode647_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode650_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode647_CsFixedRule 

  ; PROCEDURE BuildNode663_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode663_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode663_Concatenation 

  ; PROCEDURE BuildNode660_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode660_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode663_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode660_Concatenation 

  ; PROCEDURE BuildNode657_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode657_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode660_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode657_CsFixedRule 

  ; PROCEDURE BuildNode675_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode675_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode675_Concatenation 

  ; PROCEDURE BuildNode672_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode672_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode675_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode672_Concatenation 

  ; PROCEDURE BuildNode670_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode670_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode672_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode670_CsFixedRule 

  ; PROCEDURE BuildNode685_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode685_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode685_Concatenation 

  ; PROCEDURE BuildNode682_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode682_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode685_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode682_CsFixedRule 

  ; PROCEDURE BuildNode694_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode694_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode694_CsAtomList 

  ; PROCEDURE BuildNode690_CsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode690_CsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode694_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode690_CsPlusRule 

  ; PROCEDURE BuildNode701_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode701_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode701_Concatenation 

  ; PROCEDURE BuildNode696_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode696_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode701_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Productions of concrete syntax: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode696_CsFixedRule 

  ; PROCEDURE BuildNode710_CsAtomList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode710_CsAtomList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAtomList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode710_CsAtomList 

  ; PROCEDURE BuildNode706_CsPlusRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode706_CsPlusRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsPlusRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode710_CsAtomList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode706_CsPlusRule 

  ; PROCEDURE BuildNode715_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode715_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode715_Concatenation 

  ; PROCEDURE BuildNode712_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode712_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode715_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode712_CsFixedRule 

  ; PROCEDURE BuildNode720_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode720_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode720_CsStarRule 

  ; PROCEDURE BuildNode728_Alternation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode728_Alternation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Alternation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode728_Alternation 

  ; PROCEDURE BuildNode725_CsAltRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode725_CsAltRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsAltRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode728_Alternation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode725_CsAltRule 

  ; PROCEDURE BuildNode741_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode741_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode741_Concatenation 

  ; PROCEDURE BuildNode731_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode731_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode741_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsOptChildCs"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "*)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "    CsChildCs = CsReqdChild | CsOptChildCs ."
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          why should that matter? "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          name that is not reachable in the abstract syntax.  But"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          The only thing this would do, I think, is create a class"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "          into As Class rules, as follows:?  "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* CHECK: Is there any reason not to make this ans all Cs Alt rules"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode731_CsFixedRule 

  ; PROCEDURE BuildNode753_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode753_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode753_Concatenation 

  ; PROCEDURE BuildNode748_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode748_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode753_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode748_Concatenation 

  ; PROCEDURE BuildNode745_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode745_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode748_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode745_CsFixedRule 

  ; PROCEDURE BuildNode765_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode765_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode765_Concatenation 

  ; PROCEDURE BuildNode760_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode760_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode765_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode760_Concatenation 

  ; PROCEDURE BuildNode758_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode758_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode760_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode758_CsFixedRule 

  ; PROCEDURE BuildNode770_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode770_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode770_CsStarRule 

  ; PROCEDURE BuildNode780_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode780_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PREC\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode780_Concatenation 

  ; PROCEDURE BuildNode775_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode775_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode780_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Precedence and associativity specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode775_CsFixedRule 

  ; PROCEDURE BuildNode784_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode784_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode784_CsStarRule 

  ; PROCEDURE BuildNode792_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode792_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode792_Concatenation 

  ; PROCEDURE BuildNode789_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode789_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode792_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode789_CsFixedRule 

  ; PROCEDURE BuildNode797_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode797_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LEFT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode797_Concatenation 

  ; PROCEDURE BuildNode795_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode795_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode797_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode795_CsFixedRule 

  ; PROCEDURE BuildNode802_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode802_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"RIGHT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode802_Concatenation 

  ; PROCEDURE BuildNode800_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode800_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode802_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode800_CsFixedRule 

  ; PROCEDURE BuildNode810_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode810_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode810_Concatenation 

  ; PROCEDURE BuildNode805_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode805_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode810_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Concrete Syntax of Format Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode805_CsFixedRule 

  ; PROCEDURE BuildNode817_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode817_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode817_Concatenation 

  ; PROCEDURE BuildNode815_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode815_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode817_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode815_CsFixedRule 

  ; PROCEDURE BuildNode825_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode825_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode825_Concatenation 

  ; PROCEDURE BuildNode823_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode823_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode825_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode823_CsFixedRule 

  ; PROCEDURE BuildNode833_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode833_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode833_Concatenation 

  ; PROCEDURE BuildNode831_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode831_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode833_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode831_CsFixedRule 

  ; PROCEDURE BuildNode839_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode839_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode839_CsStarRule 

  ; PROCEDURE BuildNode844_CsStarRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode844_CsStarRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsStarRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode844_CsStarRule 

  ; PROCEDURE BuildNode852_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode852_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"_\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode852_Concatenation 

  ; PROCEDURE BuildNode849_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode849_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode852_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode849_CsFixedRule 

  ; PROCEDURE BuildNode859_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode859_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode859_Concatenation 

  ; PROCEDURE BuildNode857_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode857_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode859_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"!\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode857_Concatenation 

  ; PROCEDURE BuildNode854_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode854_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode857_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode854_CsFixedRule 

  ; PROCEDURE BuildNode865_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode865_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode865_Concatenation 

  ; PROCEDURE BuildNode862_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode862_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode865_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode862_CsFixedRule 

  ; PROCEDURE BuildNode871_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode871_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode871_Concatenation 

  ; PROCEDURE BuildNode869_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode869_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode871_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode869_CsFixedRule 

  ; PROCEDURE BuildNode878_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode878_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode878_Concatenation 

  ; PROCEDURE BuildNode876_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode876_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode878_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode876_CsFixedRule 

  ; PROCEDURE BuildNode885_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode885_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode885_Concatenation 

  ; PROCEDURE BuildNode883_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode883_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode885_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode883_CsFixedRule 

  ; PROCEDURE BuildNode894_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode894_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode894_Concatenation 

  ; PROCEDURE BuildNode897_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode897_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode897_Concatenation 

  ; PROCEDURE BuildNode893_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode893_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode897_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode894_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode893_Concatenation 

  ; PROCEDURE BuildNode890_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode890_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode893_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode890_CsFixedRule 

  ; PROCEDURE BuildNode904_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode904_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PRESENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode904_Concatenation 

  ; PROCEDURE BuildNode901_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode901_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode904_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode901_CsFixedRule 

  ; PROCEDURE BuildNode911_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode911_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONEMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode911_Concatenation 

  ; PROCEDURE BuildNode909_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode909_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode911_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode909_CsFixedRule 

  ; PROCEDURE BuildNode918_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode918_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode918_Concatenation 

  ; PROCEDURE BuildNode916_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode916_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode918_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode916_CsFixedRule 

  ; PROCEDURE BuildNode925_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode925_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"MEMBER\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode925_Concatenation 

  ; PROCEDURE BuildNode923_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode923_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode925_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode923_CsFixedRule 

  ; PROCEDURE BuildNode939_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode939_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode939_Concatenation 

  ; PROCEDURE BuildNode934_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode934_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode939_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode934_Concatenation 

  ; PROCEDURE BuildNode931_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode931_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode934_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode931_CsFixedRule 

  ; PROCEDURE BuildNode952_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode952_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode952_Concatenation 

  ; PROCEDURE BuildNode946_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode946_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode952_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode946_Concatenation 

  ; PROCEDURE BuildNode944_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode944_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode946_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode944_CsFixedRule 

  ; PROCEDURE BuildNode965_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode965_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode965_Concatenation 

  ; PROCEDURE BuildNode959_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode959_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode965_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode959_Concatenation 

  ; PROCEDURE BuildNode957_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode957_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode959_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode957_CsFixedRule 

  ; PROCEDURE BuildNode978_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode978_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode978_Concatenation 

  ; PROCEDURE BuildNode972_Concatenation ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode972_Concatenation *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . Concatenation
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode978_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode972_Concatenation 

  ; PROCEDURE BuildNode970_CsFixedRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode970_CsFixedRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . CsFixedRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode972_Concatenation ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode970_CsFixedRule 

  ; PROCEDURE BuildNode984_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode984_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageDefinition"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Entire language definition. *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* The Format syntax of Ldl0: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode984_IdentPlusList 

  ; PROCEDURE BuildNode993_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode993_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LanguageName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode993_FsChildPlain 

  ; PROCEDURE BuildNode997_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode997_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "1"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode997_LineBreak 

  ; PROCEDURE BuildNode999_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode999_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rules"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode999_FsChildPlain 

  ; PROCEDURE BuildNode1003_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1003_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1003_LineBreak 

  ; PROCEDURE BuildNode1006_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1006_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "ClosingName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1006_FsChildPlain 

  ; PROCEDURE BuildNode991_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode991_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1006_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"END\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1003_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode999_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode997_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode993_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LDL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode991_FsFixedChildList 

  ; PROCEDURE BuildNode983_FsFixedVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode983_FsFixedVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode991_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode984_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode983_FsFixedVertRule 

  ; PROCEDURE BuildNode1011_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1011_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "RuleList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1011_IdentPlusList 

  ; PROCEDURE BuildNode1014_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1014_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Rule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1014_FsChildPlain 

  ; PROCEDURE BuildNode1019_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1019_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1019_LineBreak 

  ; PROCEDURE BuildNode1018_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1018_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1019_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1018_FormatterList 

  ; PROCEDURE BuildNode1010_FsListVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1010_FsListVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1018_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1014_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1011_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1010_FsListVertRule 

  ; PROCEDURE BuildNode1022_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1022_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Start symbol specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1022_IdentPlusList 

  ; PROCEDURE BuildNode1029_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1029_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "StartName"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1029_FsChildPlain 

  ; PROCEDURE BuildNode1027_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1027_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1029_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"START\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1027_FsFixedChildList 

  ; PROCEDURE BuildNode1021_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1021_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1027_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1022_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1021_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1035_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1035_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsVarTermRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Abstract Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1035_IdentPlusList 

  ; PROCEDURE BuildNode1041_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1041_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Name"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1041_FsChildPlain 

  ; PROCEDURE BuildNode1045_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1045_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1045_LineBreak 

  ; PROCEDURE BuildNode1040_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1040_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VARTERM\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1045_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1041_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1040_FsFixedChildList 

  ; PROCEDURE BuildNode1034_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1034_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1040_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1035_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1034_FsFixedHorizRule 

  ; PROCEDURE BuildNode1050_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1050_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1050_IdentPlusList 

  ; PROCEDURE BuildNode1054_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1054_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1054_FsChildPlain 

  ; PROCEDURE BuildNode1058_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1058_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1058_LineBreak 

  ; PROCEDURE BuildNode1061_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1061_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1061_FsChildPlain 

  ; PROCEDURE BuildNode1065_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1065_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1065_LineBreak 

  ; PROCEDURE BuildNode1053_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1053_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1065_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1061_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1058_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1054_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1053_FsFixedChildList 

  ; PROCEDURE BuildNode1049_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1049_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1053_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1050_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1049_FsFixedHorizRule 

  ; PROCEDURE BuildNode1069_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1069_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1069_IdentPlusList 

  ; PROCEDURE BuildNode1072_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1072_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1072_FsChildPlain 

  ; PROCEDURE BuildNode1077_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1077_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1077_LineBreak 

  ; PROCEDURE BuildNode1076_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1076_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\";\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1077_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1076_FormatterList 

  ; PROCEDURE BuildNode1068_FsListDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1068_FsListDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1076_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1072_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1069_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1068_FsListDefaultRule 

  ; PROCEDURE BuildNode1081_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1081_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsReqdChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1081_IdentPlusList 

  ; PROCEDURE BuildNode1087_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1087_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1087_FsChildPlain 

  ; PROCEDURE BuildNode1086_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1086_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1087_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1086_FsFixedChildList 

  ; PROCEDURE BuildNode1085_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1085_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1086_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1085_FsCondPresent 

  ; PROCEDURE BuildNode1092_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1092_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1092_LineBreak 

  ; PROCEDURE BuildNode1094_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1094_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1094_FsChildPlain 

  ; PROCEDURE BuildNode1084_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1084_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1094_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1092_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1085_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1084_FsFixedChildList 

  ; PROCEDURE BuildNode1080_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1080_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1084_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1081_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1080_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1099_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1099_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsOptChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1099_IdentPlusList 

  ; PROCEDURE BuildNode1105_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1105_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1105_FsChildPlain 

  ; PROCEDURE BuildNode1104_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1104_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1105_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1104_FsFixedChildList 

  ; PROCEDURE BuildNode1103_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1103_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1104_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1103_FsCondPresent 

  ; PROCEDURE BuildNode1110_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1110_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1110_LineBreak 

  ; PROCEDURE BuildNode1113_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1113_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1113_FsChildPlain 

  ; PROCEDURE BuildNode1102_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1102_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1113_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1110_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1103_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1102_FsFixedChildList 

  ; PROCEDURE BuildNode1098_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1098_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1102_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1099_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1098_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1119_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1119_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1119_IdentPlusList 

  ; PROCEDURE BuildNode1123_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1123_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1123_FsChildPlain 

  ; PROCEDURE BuildNode1127_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1127_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1127_LineBreak 

  ; PROCEDURE BuildNode1134_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1134_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1134_FsChildPlain 

  ; PROCEDURE BuildNode1133_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1133_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1134_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1133_FsFixedChildList 

  ; PROCEDURE BuildNode1132_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1132_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1133_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1132_FsCondPresent 

  ; PROCEDURE BuildNode1139_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1139_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1139_LineBreak 

  ; PROCEDURE BuildNode1142_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1142_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1142_FsChildPlain 

  ; PROCEDURE BuildNode1131_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1131_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1142_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1139_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1132_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1131_FsFixedChildList 

  ; PROCEDURE BuildNode1130_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1130_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1131_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1130_FsDefaultSubtree 

  ; PROCEDURE BuildNode1147_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1147_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1147_LineBreak 

  ; PROCEDURE BuildNode1122_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1122_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1147_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1130_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1127_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1123_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1122_FsFixedChildList 

  ; PROCEDURE BuildNode1118_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1118_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1122_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1119_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1118_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1151_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1151_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1151_IdentPlusList 

  ; PROCEDURE BuildNode1155_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1155_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1155_FsChildPlain 

  ; PROCEDURE BuildNode1159_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1159_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1159_LineBreak 

  ; PROCEDURE BuildNode1166_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1166_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1166_FsChildPlain 

  ; PROCEDURE BuildNode1165_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1165_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1166_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1165_FsFixedChildList 

  ; PROCEDURE BuildNode1164_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1164_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1165_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1164_FsCondPresent 

  ; PROCEDURE BuildNode1171_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1171_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1171_LineBreak 

  ; PROCEDURE BuildNode1174_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1174_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1174_FsChildPlain 

  ; PROCEDURE BuildNode1163_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1163_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1174_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1171_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1164_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1163_FsFixedChildList 

  ; PROCEDURE BuildNode1162_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1162_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1163_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1162_FsDefaultSubtree 

  ; PROCEDURE BuildNode1179_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1179_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1179_LineBreak 

  ; PROCEDURE BuildNode1154_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1154_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1179_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1162_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1159_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1155_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1154_FsFixedChildList 

  ; PROCEDURE BuildNode1150_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1150_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1154_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1151_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1150_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1183_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1183_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsClassRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1183_IdentPlusList 

  ; PROCEDURE BuildNode1187_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1187_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1187_FsChildPlain 

  ; PROCEDURE BuildNode1191_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1191_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1191_LineBreak 

  ; PROCEDURE BuildNode1194_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1194_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1194_FsChildPlain 

  ; PROCEDURE BuildNode1198_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1198_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1198_LineBreak 

  ; PROCEDURE BuildNode1186_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1186_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1198_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1194_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1191_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1187_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1186_FsFixedChildList 

  ; PROCEDURE BuildNode1182_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1182_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1186_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1183_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1182_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1202_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1202_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1202_IdentPlusList 

  ; PROCEDURE BuildNode1205_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1205_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1205_FsChildPlain 

  ; PROCEDURE BuildNode1210_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1210_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1210_LineBreak 

  ; PROCEDURE BuildNode1209_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1209_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1210_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1209_FormatterList 

  ; PROCEDURE BuildNode1201_FsListDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1201_FsListDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1209_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1205_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1202_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1201_FsListDefaultRule 

  ; PROCEDURE BuildNode1214_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1214_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAltRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Productions of concrete syntax: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1214_IdentPlusList 

  ; PROCEDURE BuildNode1220_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1220_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1220_FsChildPlain 

  ; PROCEDURE BuildNode1224_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1224_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1224_LineBreak 

  ; PROCEDURE BuildNode1227_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1227_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1227_FsChildPlain 

  ; PROCEDURE BuildNode1219_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1219_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1227_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1224_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1220_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1219_FsFixedChildList 

  ; PROCEDURE BuildNode1213_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1213_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1219_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1214_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1213_FsFixedHorizRule 

  ; PROCEDURE BuildNode1233_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1233_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Alternation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1233_IdentPlusList 

  ; PROCEDURE BuildNode1236_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1236_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1236_FsChildPlain 

  ; PROCEDURE BuildNode1241_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1241_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1241_LineBreak 

  ; PROCEDURE BuildNode1240_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1240_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"|\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1241_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1240_FormatterList 

  ; PROCEDURE BuildNode1232_FsListFillRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1232_FsListFillRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListFillRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1240_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1236_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1233_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1232_FsListFillRule 

  ; PROCEDURE BuildNode1245_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1245_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsFixedRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1245_IdentPlusList 

  ; PROCEDURE BuildNode1249_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1249_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1249_FsChildPlain 

  ; PROCEDURE BuildNode1253_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1253_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1253_LineBreak 

  ; PROCEDURE BuildNode1256_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1256_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1256_FsChildPlain 

  ; PROCEDURE BuildNode1248_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1248_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1256_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1253_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1249_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1248_FsFixedChildList 

  ; PROCEDURE BuildNode1244_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1244_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1248_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1245_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1244_FsFixedHorizRule 

  ; PROCEDURE BuildNode1262_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1262_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1262_IdentPlusList 

  ; PROCEDURE BuildNode1269_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1269_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1269_FsChildPlain 

  ; PROCEDURE BuildNode1267_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1267_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"]\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1269_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"[\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1267_FsFixedChildList 

  ; PROCEDURE BuildNode1265_FsCondMember ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1265_FsCondMember *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondMember
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1267_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Concatenation"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1265_FsCondMember 

  ; PROCEDURE BuildNode1275_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1275_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1275_LineBreak 

  ; PROCEDURE BuildNode1274_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1274_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1275_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1274_FormatterList 

  ; PROCEDURE BuildNode1261_FsListHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1261_FsListHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1274_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1265_FsCondMember ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1262_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1261_FsListHorizRule 

  ; PROCEDURE BuildNode1278_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1278_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsStarRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1278_IdentPlusList 

  ; PROCEDURE BuildNode1282_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1282_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1282_FsChildPlain 

  ; PROCEDURE BuildNode1286_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1286_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1286_LineBreak 

  ; PROCEDURE BuildNode1292_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1292_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1292_FsChildPlain 

  ; PROCEDURE BuildNode1298_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1298_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "3"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1298_LineBreak 

  ; PROCEDURE BuildNode1301_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1301_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1301_FsChildPlain 

  ; PROCEDURE BuildNode1297_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1297_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1301_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1298_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1297_FsFixedChildList 

  ; PROCEDURE BuildNode1296_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1296_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1297_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1296_FsCondNonempty 

  ; PROCEDURE BuildNode1305_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1305_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1305_LineBreak 

  ; PROCEDURE BuildNode1290_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1290_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1305_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1296_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1292_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1290_FsFixedChildList 

  ; PROCEDURE BuildNode1289_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1289_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1290_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1289_FsDefaultSubtree 

  ; PROCEDURE BuildNode1281_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1281_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1289_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1286_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1282_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1281_FsFixedChildList 

  ; PROCEDURE BuildNode1277_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1277_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1281_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1278_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1277_FsFixedHorizRule 

  ; PROCEDURE BuildNode1310_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1310_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsPlusRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1310_IdentPlusList 

  ; PROCEDURE BuildNode1314_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1314_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1314_FsChildPlain 

  ; PROCEDURE BuildNode1318_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1318_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1318_LineBreak 

  ; PROCEDURE BuildNode1324_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1324_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1324_FsChildPlain 

  ; PROCEDURE BuildNode1330_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1330_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "3"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1330_LineBreak 

  ; PROCEDURE BuildNode1333_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1333_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1333_FsChildPlain 

  ; PROCEDURE BuildNode1329_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1329_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1333_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1330_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1329_FsFixedChildList 

  ; PROCEDURE BuildNode1328_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1328_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1329_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1328_FsCondNonempty 

  ; PROCEDURE BuildNode1337_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1337_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1337_LineBreak 

  ; PROCEDURE BuildNode1322_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1322_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}+\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1337_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1328_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1324_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1322_FsFixedChildList 

  ; PROCEDURE BuildNode1321_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1321_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1322_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1321_FsDefaultSubtree 

  ; PROCEDURE BuildNode1313_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1313_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1321_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"::=\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1318_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1314_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1313_FsFixedChildList 

  ; PROCEDURE BuildNode1309_FsFixedHorizRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1309_FsFixedHorizRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedHorizRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1313_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1310_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1309_FsFixedHorizRule 

  ; PROCEDURE BuildNode1342_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1342_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1342_IdentPlusList 

  ; PROCEDURE BuildNode1345_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1345_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtom"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1345_FsChildPlain 

  ; PROCEDURE BuildNode1341_FsListDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1341_FsListDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1345_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1342_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1341_FsListDefaultRule 

  ; PROCEDURE BuildNode1351_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1351_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Precedence and associativity specification: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1351_IdentPlusList 

  ; PROCEDURE BuildNode1358_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1358_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1358_FsChildPlain 

  ; PROCEDURE BuildNode1362_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1362_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1362_LineBreak 

  ; PROCEDURE BuildNode1356_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1356_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1362_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1358_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PREC\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1356_FsFixedChildList 

  ; PROCEDURE BuildNode1350_FsFixedVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1350_FsFixedVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1356_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1351_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1350_FsFixedVertRule 

  ; PROCEDURE BuildNode1366_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1366_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevels"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1366_IdentPlusList 

  ; PROCEDURE BuildNode1369_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1369_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevel"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1369_FsChildPlain 

  ; PROCEDURE BuildNode1365_FsListVertRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1365_FsListVertRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListVertRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1369_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1366_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1365_FsListVertRule 

  ; PROCEDURE BuildNode1375_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1375_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelNone"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1375_IdentPlusList 

  ; PROCEDURE BuildNode1380_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1380_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1380_FsChildPlain 

  ; PROCEDURE BuildNode1378_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1378_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1380_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONE\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1378_FsFixedChildList 

  ; PROCEDURE BuildNode1374_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1374_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1378_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1375_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1374_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1385_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1385_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelLeft"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1385_IdentPlusList 

  ; PROCEDURE BuildNode1389_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1389_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1389_FsChildPlain 

  ; PROCEDURE BuildNode1387_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1387_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1389_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"LEFT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1387_FsFixedChildList 

  ; PROCEDURE BuildNode1384_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1384_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1387_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1385_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1384_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1394_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1394_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "PrecLevelRight"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1394_IdentPlusList 

  ; PROCEDURE BuildNode1398_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1398_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "CsAtomList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1398_FsChildPlain 

  ; PROCEDURE BuildNode1396_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1396_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1398_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"RIGHT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1396_FsFixedChildList 

  ; PROCEDURE BuildNode1393_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1393_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1396_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1394_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1393_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1403_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1403_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingRelativeTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := -2
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Format Syntax of Format Syntax Rules: *)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1403_IdentPlusList 

  ; PROCEDURE BuildNode1409_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1409_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1409_FsChildPlain 

  ; PROCEDURE BuildNode1413_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1413_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1413_LineBreak 

  ; PROCEDURE BuildNode1418_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1418_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1418_LineBreak 

  ; PROCEDURE BuildNode1420_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1420_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1420_FsChildPlain 

  ; PROCEDURE BuildNode1417_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1417_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1420_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1418_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1417_FsFixedChildList 

  ; PROCEDURE BuildNode1416_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1416_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1417_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1416_FsDefaultSubtree 

  ; PROCEDURE BuildNode1424_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1424_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1424_LineBreak 

  ; PROCEDURE BuildNode1408_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1408_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1424_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1416_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1413_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1409_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1408_FsFixedChildList 

  ; PROCEDURE BuildNode1402_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1402_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1408_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1403_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1402_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1428_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1428_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1428_IdentPlusList 

  ; PROCEDURE BuildNode1432_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1432_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1432_FsChildPlain 

  ; PROCEDURE BuildNode1436_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1436_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1436_LineBreak 

  ; PROCEDURE BuildNode1442_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1442_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1442_LineBreak 

  ; PROCEDURE BuildNode1444_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1444_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1444_FsChildPlain 

  ; PROCEDURE BuildNode1440_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1440_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1444_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1442_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1440_FsFixedChildList 

  ; PROCEDURE BuildNode1439_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1439_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1440_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1439_FsDefaultSubtree 

  ; PROCEDURE BuildNode1448_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1448_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1448_LineBreak 

  ; PROCEDURE BuildNode1431_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1431_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1448_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1439_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1436_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1432_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1431_FsFixedChildList 

  ; PROCEDURE BuildNode1427_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1427_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1431_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1428_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1427_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1452_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1452_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1452_IdentPlusList 

  ; PROCEDURE BuildNode1456_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1456_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1456_FsChildPlain 

  ; PROCEDURE BuildNode1460_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1460_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1460_LineBreak 

  ; PROCEDURE BuildNode1464_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1464_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1464_FsChildPlain 

  ; PROCEDURE BuildNode1468_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1468_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1468_LineBreak 

  ; PROCEDURE BuildNode1455_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1455_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1468_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1464_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1460_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1456_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1455_FsFixedChildList 

  ; PROCEDURE BuildNode1451_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1451_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1455_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1452_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1451_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1472_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1472_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1472_IdentPlusList 

  ; PROCEDURE BuildNode1476_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1476_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1476_FsChildPlain 

  ; PROCEDURE BuildNode1480_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1480_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1480_LineBreak 

  ; PROCEDURE BuildNode1484_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1484_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1484_FsChildPlain 

  ; PROCEDURE BuildNode1488_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1488_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1488_LineBreak 

  ; PROCEDURE BuildNode1475_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1475_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1488_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1484_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1480_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1476_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1475_FsFixedChildList 

  ; PROCEDURE BuildNode1471_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1471_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1475_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1472_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1471_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1492_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1492_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1492_IdentPlusList 

  ; PROCEDURE BuildNode1495_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1495_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1495_FsChildPlain 

  ; PROCEDURE BuildNode1500_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1500_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1500_LineBreak 

  ; PROCEDURE BuildNode1499_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1499_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1500_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1499_FormatterList 

  ; PROCEDURE BuildNode1491_FsListDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1491_FsListDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1499_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1495_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1492_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1491_FsListDefaultRule 

  ; PROCEDURE BuildNode1503_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1503_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1503_IdentPlusList 

  ; PROCEDURE BuildNode1506_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1506_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Formatter"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1506_FsChildPlain 

  ; PROCEDURE BuildNode1511_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1511_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1511_LineBreak 

  ; PROCEDURE BuildNode1510_FormatterList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1510_FormatterList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FormatterList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1511_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1510_FormatterList 

  ; PROCEDURE BuildNode1502_FsListDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1502_FsListDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsListDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1510_FormatterList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1506_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1503_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1502_FsListDefaultRule 

  ; PROCEDURE BuildNode1514_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1514_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "LineBreak"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1514_IdentPlusList 

  ; PROCEDURE BuildNode1522_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1522_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1522_FsChildPlain 

  ; PROCEDURE BuildNode1520_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1520_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1522_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1520_FsFixedChildList 

  ; PROCEDURE BuildNode1519_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1519_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1520_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1519_FsCondPresent 

  ; PROCEDURE BuildNode1517_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1517_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1519_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"!\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1517_FsFixedChildList 

  ; PROCEDURE BuildNode1513_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1513_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1517_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1514_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1513_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1527_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1527_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsDefaultSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1527_IdentPlusList 

  ; PROCEDURE BuildNode1532_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1532_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1532_FsChildPlain 

  ; PROCEDURE BuildNode1536_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1536_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1536_LineBreak 

  ; PROCEDURE BuildNode1530_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1530_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1536_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1532_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1530_FsFixedChildList 

  ; PROCEDURE BuildNode1526_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1526_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1530_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1527_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1526_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1540_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1540_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsHorizSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1540_IdentPlusList 

  ; PROCEDURE BuildNode1545_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1545_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1545_LineBreak 

  ; PROCEDURE BuildNode1548_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1548_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1548_FsChildPlain 

  ; PROCEDURE BuildNode1552_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1552_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1552_LineBreak 

  ; PROCEDURE BuildNode1543_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1543_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1552_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1548_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1545_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1543_FsFixedChildList 

  ; PROCEDURE BuildNode1539_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1539_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1543_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1540_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1539_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1556_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1556_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsVertSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1556_IdentPlusList 

  ; PROCEDURE BuildNode1561_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1561_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1561_LineBreak 

  ; PROCEDURE BuildNode1564_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1564_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1564_FsChildPlain 

  ; PROCEDURE BuildNode1568_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1568_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1568_LineBreak 

  ; PROCEDURE BuildNode1559_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1559_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1568_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1564_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1561_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1559_FsFixedChildList 

  ; PROCEDURE BuildNode1555_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1555_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1559_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1556_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1555_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1572_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1572_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFillSubtree"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1572_IdentPlusList 

  ; PROCEDURE BuildNode1577_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1577_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1577_LineBreak 

  ; PROCEDURE BuildNode1580_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1580_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1580_FsChildPlain 

  ; PROCEDURE BuildNode1584_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1584_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1584_LineBreak 

  ; PROCEDURE BuildNode1575_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1575_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1584_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1580_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1577_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1575_FsFixedChildList 

  ; PROCEDURE BuildNode1571_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1571_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1575_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1572_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1571_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1588_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1588_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChildPlain"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1588_IdentPlusList 

  ; PROCEDURE BuildNode1594_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1594_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1594_FsChildPlain 

  ; PROCEDURE BuildNode1593_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1593_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\":\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1594_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1593_FsFixedChildList 

  ; PROCEDURE BuildNode1592_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1592_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1593_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1592_FsCondPresent 

  ; PROCEDURE BuildNode1599_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1599_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1599_LineBreak 

  ; PROCEDURE BuildNode1604_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1604_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Integer"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1604_FsChildPlain 

  ; PROCEDURE BuildNode1602_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1602_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1604_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"@\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1602_FsFixedChildList 

  ; PROCEDURE BuildNode1601_FsCondPresent ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1601_FsCondPresent *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondPresent
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1602_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1601_FsCondPresent 

  ; PROCEDURE BuildNode1608_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1608_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1608_LineBreak 

  ; PROCEDURE BuildNode1610_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1610_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentOrDontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1610_FsChildPlain 

  ; PROCEDURE BuildNode1591_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1591_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1610_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1608_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1601_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1599_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1592_FsCondPresent ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1591_FsFixedChildList 

  ; PROCEDURE BuildNode1587_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1587_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1591_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1588_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1587_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1615_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1615_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "DontCare"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1615_IdentPlusList 

  ; PROCEDURE BuildNode1618_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1618_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"_\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1618_FsFixedChildList 

  ; PROCEDURE BuildNode1614_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1614_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1618_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1615_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1614_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1621_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1621_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPresent"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1621_IdentPlusList 

  ; PROCEDURE BuildNode1626_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1626_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1626_LineBreak 

  ; PROCEDURE BuildNode1629_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1629_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1629_FsChildPlain 

  ; PROCEDURE BuildNode1633_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1633_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1633_LineBreak 

  ; PROCEDURE BuildNode1624_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1624_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1633_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1629_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1626_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PRESENT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1624_FsFixedChildList 

  ; PROCEDURE BuildNode1620_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1620_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1624_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1621_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1620_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1637_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1637_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondNonempty"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1637_IdentPlusList 

  ; PROCEDURE BuildNode1641_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1641_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1641_LineBreak 

  ; PROCEDURE BuildNode1644_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1644_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1644_FsChildPlain 

  ; PROCEDURE BuildNode1648_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1648_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1648_LineBreak 

  ; PROCEDURE BuildNode1639_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1639_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1648_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1644_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1641_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"NONEMPTY\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1639_FsFixedChildList 

  ; PROCEDURE BuildNode1636_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1636_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1639_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1637_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1636_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1652_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1652_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondPlural"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1652_IdentPlusList 

  ; PROCEDURE BuildNode1656_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1656_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1656_LineBreak 

  ; PROCEDURE BuildNode1659_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1659_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1659_FsChildPlain 

  ; PROCEDURE BuildNode1663_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1663_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1663_LineBreak 

  ; PROCEDURE BuildNode1654_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1654_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1663_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1659_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1656_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"PLURAL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1654_FsFixedChildList 

  ; PROCEDURE BuildNode1651_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1651_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1654_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1652_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1651_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1667_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1667_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsCondMember"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1667_IdentPlusList 

  ; PROCEDURE BuildNode1671_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1671_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ident"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1671_FsChildPlain 

  ; PROCEDURE BuildNode1675_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1675_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1675_LineBreak 

  ; PROCEDURE BuildNode1678_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1678_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsFixedChildList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1678_FsChildPlain 

  ; PROCEDURE BuildNode1682_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1682_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1682_LineBreak 

  ; PROCEDURE BuildNode1669_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1669_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1682_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1678_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1675_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1671_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"MEMBER\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1669_FsFixedChildList 

  ; PROCEDURE BuildNode1666_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1666_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1669_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1667_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1666_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1686_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1686_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListDefaultRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1686_IdentPlusList 

  ; PROCEDURE BuildNode1690_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1690_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1690_FsChildPlain 

  ; PROCEDURE BuildNode1694_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1694_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1694_LineBreak 

  ; PROCEDURE BuildNode1699_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1699_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1699_LineBreak 

  ; PROCEDURE BuildNode1702_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1702_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1702_FsChildPlain 

  ; PROCEDURE BuildNode1709_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1709_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1709_FsChildPlain 

  ; PROCEDURE BuildNode1707_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1707_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1709_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1707_FsFixedChildList 

  ; PROCEDURE BuildNode1706_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1706_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1707_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1706_FsCondNonempty 

  ; PROCEDURE BuildNode1698_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1698_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1706_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1702_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1699_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1698_FsFixedChildList 

  ; PROCEDURE BuildNode1697_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1697_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1698_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1697_FsDefaultSubtree 

  ; PROCEDURE BuildNode1714_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1714_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1714_LineBreak 

  ; PROCEDURE BuildNode1689_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1689_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1714_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1697_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1694_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1690_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1689_FsFixedChildList 

  ; PROCEDURE BuildNode1685_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1685_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1689_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1686_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1685_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1718_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1718_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListHorizRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1718_IdentPlusList 

  ; PROCEDURE BuildNode1722_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1722_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1722_FsChildPlain 

  ; PROCEDURE BuildNode1726_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1726_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1726_LineBreak 

  ; PROCEDURE BuildNode1732_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1732_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1732_LineBreak 

  ; PROCEDURE BuildNode1735_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1735_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1735_FsChildPlain 

  ; PROCEDURE BuildNode1742_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1742_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1742_FsChildPlain 

  ; PROCEDURE BuildNode1740_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1740_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1742_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1740_FsFixedChildList 

  ; PROCEDURE BuildNode1739_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1739_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1740_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1739_FsCondNonempty 

  ; PROCEDURE BuildNode1730_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1730_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1739_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1735_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1732_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"HORIZ\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1730_FsFixedChildList 

  ; PROCEDURE BuildNode1729_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1729_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1730_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1729_FsDefaultSubtree 

  ; PROCEDURE BuildNode1747_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1747_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1747_LineBreak 

  ; PROCEDURE BuildNode1721_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1721_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1747_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1729_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1726_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1722_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1721_FsFixedChildList 

  ; PROCEDURE BuildNode1717_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1717_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1721_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1718_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1717_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1751_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1751_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListVertRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1751_IdentPlusList 

  ; PROCEDURE BuildNode1755_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1755_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1755_FsChildPlain 

  ; PROCEDURE BuildNode1759_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1759_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1759_LineBreak 

  ; PROCEDURE BuildNode1765_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1765_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1765_LineBreak 

  ; PROCEDURE BuildNode1768_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1768_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1768_FsChildPlain 

  ; PROCEDURE BuildNode1775_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1775_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1775_FsChildPlain 

  ; PROCEDURE BuildNode1773_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1773_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1775_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1773_FsFixedChildList 

  ; PROCEDURE BuildNode1772_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1772_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1773_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1772_FsCondNonempty 

  ; PROCEDURE BuildNode1763_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1763_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1772_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1768_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1765_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"VERT\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1763_FsFixedChildList 

  ; PROCEDURE BuildNode1762_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1762_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1763_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1762_FsDefaultSubtree 

  ; PROCEDURE BuildNode1780_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1780_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1780_LineBreak 

  ; PROCEDURE BuildNode1754_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1754_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1780_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1762_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1759_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1755_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1754_FsFixedChildList 

  ; PROCEDURE BuildNode1750_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1750_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1754_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1751_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1750_FsFixedDefaultRule 

  ; PROCEDURE BuildNode1784_IdentPlusList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1784_IdentPlusList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . IdentPlusList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsListFillRule"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1784_IdentPlusList 

  ; PROCEDURE BuildNode1788_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1788_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "IdentPlusList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1788_FsChildPlain 

  ; PROCEDURE BuildNode1792_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1792_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1792_LineBreak 

  ; PROCEDURE BuildNode1798_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1798_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1798_LineBreak 

  ; PROCEDURE BuildNode1801_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1801_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FsChild"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1801_FsChildPlain 

  ; PROCEDURE BuildNode1808_FsChildPlain ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1808_FsChildPlain *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsChildPlain
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "FormatterList"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := NIL 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1808_FsChildPlain 

  ; PROCEDURE BuildNode1806_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1806_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1808_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"||\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1806_FsFixedChildList 

  ; PROCEDURE BuildNode1805_FsCondNonempty ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1805_FsCondNonempty *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsCondNonempty
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1806_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1805_FsCondNonempty 

  ; PROCEDURE BuildNode1796_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1796_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"}\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1805_FsCondNonempty ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1801_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"{\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1798_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"FILL\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1796_FsFixedChildList 

  ; PROCEDURE BuildNode1795_FsDefaultSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1795_FsDefaultSubtree *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsDefaultSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1796_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1795_FsDefaultSubtree 

  ; PROCEDURE BuildNode1813_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1813_LineBreak *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . Integer
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1813_LineBreak 

  ; PROCEDURE BuildNode1787_FsFixedChildList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1787_FsFixedChildList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedChildList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1813_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1795_FsDefaultSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"->\""
                   , Tok := LdlTok . String
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1792_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1788_FsChildPlain ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1787_FsFixedChildList 

  ; PROCEDURE BuildNode1783_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1783_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1787_FsFixedChildList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1784_IdentPlusList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1783_FsFixedDefaultRule 

  ; PROCEDURE BuildNode11_RuleList ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode11_RuleList *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . RuleList
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1783_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1750_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1717_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1685_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1666_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1651_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1636_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1620_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1614_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1587_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1571_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1555_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1539_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1526_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1513_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1502_FsListDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1491_FsListDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1471_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1451_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1427_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1402_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1393_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1384_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1374_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1365_FsListVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1350_FsFixedVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1341_FsListDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1309_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1277_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1261_FsListHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1244_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1232_FsListFillRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1213_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1201_FsListDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1182_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1150_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1118_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1098_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1080_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1068_FsListDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1049_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1034_FsFixedHorizRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1021_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1010_FsListVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode983_FsFixedVertRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode970_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode957_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode944_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode931_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode923_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode916_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode909_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode901_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode890_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode883_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode876_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode869_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode862_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode854_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode849_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode844_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode839_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode831_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode823_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode815_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode805_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode800_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode795_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode789_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode784_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode775_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode770_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode758_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode745_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode731_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode725_CsAltRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode720_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode712_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode706_CsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode696_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode690_CsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode682_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode670_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode657_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode647_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode639_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode633_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode625_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode616_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode607_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode602_CsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode589_CsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode572_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode564_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode553_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode543_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode535_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode531_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode525_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode511_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode504_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode493_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode485_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode477_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode470_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode464_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode457_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode451_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode437_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode429_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode421_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode411_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode404_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode398_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode388_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode381_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode375_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode360_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode354_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode349_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode344_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode338_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode332_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode321_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode315_AsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode304_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode295_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode289_AsPlusRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode278_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode263_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode257_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode245_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode239_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode233_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode222_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode214_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode204_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode194_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode185_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode179_AsStarRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode176_AsVarTermRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode173_AsVarTermRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode170_AsVarTermRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode156_AsFixedRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode149_StartRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode145_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode141_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode137_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode133_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode129_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode125_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode121_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode117_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode113_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode109_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode105_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode101_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode97_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode93_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode89_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode85_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode81_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode77_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode73_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode69_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode65_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode61_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode57_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode53_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode49_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode45_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode41_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode37_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode33_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode29_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode25_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode21_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode17_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode12_AsClassRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode11_RuleList 

  ; PROCEDURE BuildNode1_LanguageDefinition ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1_LanguageDefinition *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LdlTok . LanguageDefinition
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ldl0"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 6
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode11_RuleList ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Ldl0"
                   , Tok := LdlTok . Ident
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsIdle
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "*)"
                            , Tok := LbeStd . TokCmnt
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "   was created. "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "   revised version, after second version (now called Ldl1)"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "   initial bootstrap version, expressed in itself. Slightly"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsInCmnt
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "   Specification of the Language Definition Language (LDL),"
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModCmntLeadingFixedTyp
                     , ModCmntBegScanState := LbeStd . SsIdle
                     , ModCmntEndScanState := LbeStd . SsInCmnt
                     , ModCmntFromPos := 0
                     , ModCmntNlBefore := TRUE
                     , ModCmntNlAfter := TRUE
                     , ModCmntStringRef 
                         :=  SharedStrings . FromText
                            ( "(* Scheutz semantic editor. "
                            , Tok := LbeStd . TokCmntAtEndOfLine
                            ) 
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := FALSE
          , GroupFmtNo := 255
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1_LanguageDefinition 

  ; PROCEDURE BuildNode0_TokAugment ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode0_TokAugment *) 
        LMergeState 
          := EstBuild . InitMerge 
               ( Lang := Lang 
               , EstTok := LbeStd . TokAugment
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1_LanguageDefinition ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstKind := EstHs . EstKindTyp . EstKindEst 
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode0_TokAugment 

  
  ; BEGIN (* Root *) 
      RETURN BuildNode0_TokAugment ( ) 
    END Root 

; BEGIN (* Ldl0MakeEst *) 
  END Ldl0MakeEst 
. 

