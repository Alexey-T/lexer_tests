MODULE test10_2MakeEst

(* This module was mechanically generated by GenConstEst. 
     Generated on:  2013/03/25 15:29:50 GMT
     Language    Scheutz Language Definition Language test10_2
     Version     0.0.0.0
     Date        2013/03/25 15:29:50 GMT
     Fingerprint e2b606389deb275d
*) 

; IMPORT LbeStd 
; IMPORT EstHs 
; IMPORT EstBuild 
; IMPORT ModHs (* Might not be used. *)
; IMPORT SharedStrings 
; IMPORT Ldl0Tok AS LdlTok 
; FROM Assertions IMPORT AssertionFailure 

(* VISIBLE: *) 
; PROCEDURE Root ( Lang : LbeStd . LangTyp := LbeStd . LangNull ) 
  : LbeStd . EstRootTyp 
  RAISES { AssertionFailure } 

  = <* UNUSED *> CONST Dummy = 0 (* For ease of generation. *) 

  ; PROCEDURE BuildNode5_FsFixedDefaultRule ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode5_FsFixedDefaultRule *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFixedDefaultRule
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsDot"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode5_FsFixedDefaultRule 

  ; PROCEDURE BuildNode16_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode16_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . CsStarRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode16_<UnknownLdlToken> 

  ; PROCEDURE BuildNode14_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode14_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsExpr"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode16_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Left"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode14_<UnknownLdlToken> 

  ; PROCEDURE BuildNode19_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode19_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode19_<UnknownLdlToken> 

  ; PROCEDURE BuildNode12_FsFillSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode12_FsFillSubtree *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFillSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . CsFixedRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode19_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode14_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . CsFixedRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode12_FsFillSubtree 

  ; PROCEDURE BuildNode11_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode11_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode12_FsFillSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode11_<UnknownLdlToken> 

  ; PROCEDURE BuildNode10_FsFillSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode10_FsFillSubtree *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFillSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode11_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode10_FsFillSubtree 

  ; PROCEDURE BuildNode8_RwVERT ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode8_RwVERT *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . RwVERT
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode10_FsFillSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsE6OrLess"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode8_RwVERT 

  ; PROCEDURE BuildNode21_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode21_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode21_<UnknownLdlToken> 

  ; PROCEDURE BuildNode31_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode31_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "4"
                   , Tok := LdlTok . CsStarRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode31_<UnknownLdlToken> 

  ; PROCEDURE BuildNode29_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode29_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsExpr"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode31_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 4
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "Right"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode29_<UnknownLdlToken> 

  ; PROCEDURE BuildNode34_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode34_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode34_<UnknownLdlToken> 

  ; PROCEDURE BuildNode35_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode35_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "2"
                   , Tok := LdlTok . CsStarRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode35_<UnknownLdlToken> 

  ; PROCEDURE BuildNode27_FsFillSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode27_FsFillSubtree *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFillSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\")\""
                   , Tok := LdlTok . CsFixedRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode35_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode34_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode29_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\"(\""
                   , Tok := LdlTok . CsFixedRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode27_FsFillSubtree 

  ; PROCEDURE BuildNode26_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode26_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode27_FsFillSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode26_<UnknownLdlToken> 

  ; PROCEDURE BuildNode25_FsFillSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode25_FsFillSubtree *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFillSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode26_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode25_FsFillSubtree 

  ; PROCEDURE BuildNode23_RwVERT ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode23_RwVERT *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . RwVERT
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode25_FsFillSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "AsE6OrLess"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode23_RwVERT 

  ; PROCEDURE BuildNode7_FsFillSubtree ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode7_FsFillSubtree *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . FsFillSubtree
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode23_RwVERT ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "\".\""
                   , Tok := LdlTok . CsFixedRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode21_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode8_RwVERT ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode7_FsFillSubtree 

  ; PROCEDURE BuildNode4_<UnknownLdlToken> ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode4_<UnknownLdlToken> *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . <UnknownLdlToken>
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode7_FsFillSubtree ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 3
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode5_FsFixedDefaultRule ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode4_<UnknownLdlToken> 

  ; PROCEDURE BuildNode3_LineBreak ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode3_LineBreak *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . LineBreak
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode4_<UnknownLdlToken> ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 0
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode3_LineBreak 

  ; PROCEDURE BuildNode1_DontCare ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode1_DontCare *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LdlTok . DontCare
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "test10_2"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 8
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 7
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode3_LineBreak ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 5
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := SharedStrings . FromText
                   ( "test10_2"
                   , Tok := LdlTok . CsAltRule
                   ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode1_DontCare 

  ; PROCEDURE BuildNode0_Tok__Augment ( ) : EstHs . EstRefTyp RAISES { AssertionFailure } 

    = VAR LResult : EstHs . EstRefTyp 
    ; VAR LMergeState : EstBuild . MergeStateTyp 

    ; BEGIN (* BuildNode0_Tok__Augment *) 
        LMergeState 
          := EstBuild . NewMergeState 
               ( Lang := Lang 
               , EstTok := LbeStd . Tok__Augment
               , EstRefToInheritFrom := NIL 
               ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef 
              := NEW ( ModHs . ModBlankLineTyp 
                     , ModBlankLineCt := 1
                     ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindDisplayComputable 
              , EstHs . EstChildKindNonNIL 
              } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 2
          ) 
      ; EstBuild . MergeChild 
          ( MergeState := LMergeState 
          , EstRef := BuildNode1_DontCare ( ) 
          , KindSet := EstHs . EstChildKindSetTyp 
              { EstHs . EstChildKindEstChild , EstHs . EstChildKindNonNIL } 
          , IsFirstOfGroup := TRUE
          , GroupFmtNo := 1
          ) 
      ; EstBuild . FinishMerge 
          ( MergeState := LMergeState 
          , ResultEstNodeKind := EstHs . EstNodeKindTyp . EstNodeKindPlain
          , ResultTreeRef := LResult 
          ) 
      ; RETURN LResult 
      END BuildNode0_Tok__Augment 

  
  ; BEGIN (* Root *) 
      RETURN BuildNode0_Tok__Augment ( ) 
    END Root 

; BEGIN (* test10_2MakeEst *) 
  END test10_2MakeEst 
. 

