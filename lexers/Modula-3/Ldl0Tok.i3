
(* INTERFACE Ldl0Tok, Ldl tokens, mechanically generated by LdlSemantics. 
     Generated on:  2005/07/16 10:24:10 GMT
     Language    Scheutz Language Definition Language Ldl0
     Version     0.0.0.0
     Date        2005/07/16 10:10:01 GMT
     Fingerprint 82387d0ae0f2cb68
*) 

INTERFACE Ldl0Tok 

; IMPORT LbeStd  

(* Names for string tokens: *) 
; CONST RwVERT_Tok = 32 (* = "VERT" *) 
; CONST RwVARTERM_Tok = 33 (* = "VARTERM" *) 
; CONST RwSTART_Tok = 34 (* = "START" *) 
; CONST RwRIGHT_Tok = 35 (* = "RIGHT" *) 
; CONST RwPRESENT_Tok = 36 (* = "PRESENT" *) 
; CONST RwPREC_Tok = 37 (* = "PREC" *) 
; CONST RwPLURAL_Tok = 38 (* = "PLURAL" *) 
; CONST RwMEMBER_Tok = 39 (* = "MEMBER" *) 
; CONST RwLDL_Tok = 40 (* = "LDL" *) 
; CONST RwLEFT_Tok = 41 (* = "LEFT" *) 
; CONST RwNONEMPTY_Tok = 42 (* = "NONEMPTY" *) 
; CONST RwNONE_Tok = 43 (* = "NONE" *) 
; CONST RwHORIZ_Tok = 44 (* = "HORIZ" *) 
; CONST RwFILL_Tok = 45 (* = "FILL" *) 
; CONST RwEND_Tok = 46 (* = "END" *) 
; CONST CloseParen_Tok = 47 (* = ")" *) 
; CONST OpenParen_Tok = 48 (* = "(" *) 
; CONST At_Tok = 49 (* = "@" *) 
; CONST Bang_Tok = 50 (* = "!" *) 
; CONST Underscore_Tok = 51 (* = "_" *) 
; CONST Arrow_Tok = 52 (* = "->" *) 
; CONST DoubleStroke_Tok = 53 (* = "||" *) 
; CONST Stroke_Tok = 54 (* = "|" *) 
; CONST Equals_Tok = 55 (* = "=" *) 
; CONST CloseBracePlus_Tok = 56 (* = "}+" *) 
; CONST CloseBrace_Tok = 57 (* = "}" *) 
; CONST OpenBrace_Tok = 58 (* = "{" *) 
; CONST CloseBracket_Tok = 59 (* = "]" *) 
; CONST OpenBracket_Tok = 60 (* = "[" *) 
; CONST Semicolon_Tok = 61 (* = ";" *) 
; CONST ColonColonEquals_Tok = 62 (* = "::=" *) 
; CONST ColonEquals_Tok = 63 (* = ":=" *) 
; CONST Dot_Tok = 64 (* = "." *) 
; CONST Colon_Tok = 65 (* = ":" *) 

(* Variable terminal tokens: *) 
; CONST Ident = 66
; CONST String = 67
; CONST Integer = 68

(* Tokens for ModTok nodes for variable terminals: *) 
(* «Ident_ModTok» = 69 *)
(* «String_ModTok» = 70 *)
(* «Integer_ModTok» = 71 *)

(* Abstract Plus Nodes: *) 
; CONST IdentPlusList = 72
; CONST Alternation = 73

(* Abstract Star Nodes: *) 
; CONST RuleList = 74
; CONST AsChildList = 75
; CONST Concatenation = 76
; CONST CsAtomList = 77
; CONST PrecLevels = 78
; CONST FsFixedChildList = 79
; CONST FormatterList = 80

(* Abstract Fixed Nodes: *) 
; CONST LanguageDefinition = 81
; CONST StartRule = 82
; CONST AsVarTermRule = 83
; CONST AsFixedRule = 84
; CONST AsReqdChild = 85
; CONST AsOptChild = 86
; CONST AsStarRule = 87
; CONST AsPlusRule = 88
; CONST AsClassRule = 89
; CONST CsAltRule = 90
; CONST CsFixedRule = 91
; CONST CsStarRule = 92
; CONST CsPlusRule = 93
; CONST PrecRule = 94
; CONST PrecLevelNone = 95
; CONST PrecLevelLeft = 96
; CONST PrecLevelRight = 97
; CONST FsFixedDefaultRule = 98
; CONST FsFixedHorizRule = 99
; CONST FsFixedVertRule = 100
; CONST FsFixedFillRule = 101
; CONST LineBreak = 102
; CONST FsDefaultSubtree = 103
; CONST FsHorizSubtree = 104
; CONST FsVertSubtree = 105
; CONST FsFillSubtree = 106
; CONST FsChildPlain = 107
; CONST DontCare = 108
; CONST FsCondPresent = 109
; CONST FsCondNonempty = 110
; CONST FsCondPlural = 111
; CONST FsCondMember = 112
; CONST FsListDefaultRule = 113
; CONST FsListHorizRule = 114
; CONST FsListVertRule = 115
; CONST FsListFillRule = 116

(* Sublist Tokens: *) 
(* «RuleList_Sublist» = 117, Sublist nonterminal for RuleList *) 
(* «AsChildList_Sublist» = 118, Sublist nonterminal for AsChildList *) 
(* «IdentPlusList_Sublist» = 119, Sublist nonterminal for IdentPlusList *) 
(* «Alternation_Sublist» = 120, Sublist nonterminal for Alternation *) 
(* «Concatenation_Sublist» = 121, Sublist nonterminal for Concatenation *) 
(* «CsAtomList_Sublist» = 122, Sublist nonterminal for CsAtomList *) 
(* «PrecLevels_Sublist» = 123, Sublist nonterminal for PrecLevels *) 
(* «FsFixedChildList_Sublist» = 124, Sublist nonterminal for FsFixedChildList *) 
(* «FormatterList_Sublist» = 125, Sublist nonterminal for FormatterList *) 

(* Abstract-only Classes: *) 

(* Classes that are also Concrete alternations: *) 
; CONST RwVERT = 126 (* Name for "VERT" *) 
; CONST RwVARTERM = 127 (* Name for "VARTERM" *) 
; CONST RwSTART = 128 (* Name for "START" *) 
; CONST RwRIGHT = 129 (* Name for "RIGHT" *) 
; CONST RwPRESENT = 130 (* Name for "PRESENT" *) 
; CONST RwPREC = 131 (* Name for "PREC" *) 
; CONST RwPLURAL = 132 (* Name for "PLURAL" *) 
; CONST RwMEMBER = 133 (* Name for "MEMBER" *) 
; CONST RwLDL = 134 (* Name for "LDL" *) 
; CONST RwLEFT = 135 (* Name for "LEFT" *) 
; CONST RwNONEMPTY = 136 (* Name for "NONEMPTY" *) 
; CONST RwNONE = 137 (* Name for "NONE" *) 
; CONST RwHORIZ = 138 (* Name for "HORIZ" *) 
; CONST RwFILL = 139 (* Name for "FILL" *) 
; CONST RwEND = 140 (* Name for "END" *) 
; CONST CloseParen = 141 (* Name for ")" *) 
; CONST OpenParen = 142 (* Name for "(" *) 
; CONST At = 143 (* Name for "@" *) 
; CONST Bang = 144 (* Name for "!" *) 
; CONST Underscore = 145 (* Name for "_" *) 
; CONST Arrow = 146 (* Name for "->" *) 
; CONST DoubleStroke = 147 (* Name for "||" *) 
; CONST Stroke = 148 (* Name for "|" *) 
; CONST Equals = 149 (* Name for "=" *) 
; CONST CloseBracePlus = 150 (* Name for "}+" *) 
; CONST CloseBrace = 151 (* Name for "}" *) 
; CONST OpenBrace = 152 (* Name for "{" *) 
; CONST CloseBracket = 153 (* Name for "]" *) 
; CONST OpenBracket = 154 (* Name for "[" *) 
; CONST Semicolon = 155 (* Name for ";" *) 
; CONST ColonColonEquals = 156 (* Name for "::=" *) 
; CONST ColonEquals = 157 (* Name for ":=" *) 
; CONST Dot = 158 (* Name for "." *) 
; CONST Colon = 159 (* Name for ":" *) 
; CONST Rule = 160
; CONST AsRule = 161
; CONST AsChild = 162
; CONST AsListRule = 163
; CONST CsRule = 164
; CONST CsChild = 165
; CONST CsReqdChild = 166
; CONST CsOptChild = 167
; CONST CsListRule = 168
; CONST CsAtom = 169
; CONST PrecLevel = 170
; CONST FsRule = 171
; CONST FsFixedRule = 172
; CONST FsFixedChild = 173
; CONST Formatter = 174
; CONST FsSubtree = 175
; CONST FsChild = 176
; CONST IdentOrDontCare = 177
; CONST FsChildCondFmt = 178
; CONST FsListRule = 179

(* Concrete Alternation Tokens: *) 
; CONST CsChildCs = 180

(* Concrete Plus Tokens: *) 

(* Concrete Plural Tokens: *) 

(* Concrete Star Tokens: *) 

(* Concrete Fixed Tokens: *) 
; CONST CsOptChildCs = 181

(* Limits: *) 
; CONST MinTok = 32
; CONST MaxTok = 181

; PROCEDURE ToText ( Tok : LbeStd . TokTyp ) : TEXT 

; END Ldl0Tok . 

