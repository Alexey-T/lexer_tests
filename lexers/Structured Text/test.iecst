VAR_GLOBAL
    TEST_ARR: ARRAY[0..2] OF WORD;
END_VAR

FUNCTION_BLOCK FB_TEST
    VAR
        iNum: WORD;

    END_VAR
    TEST_ARR[iNum] := 10;
END_FUNCTION_BLOCK

PROGRAM PLC_PRG
    VAR
        iIndex : WORD;
        fbTest: FB_TEST;
    END_VAR
    fbTest(iNum := 0); // Работает
    fbTest(iNum := iIndex); // Не Работает
    TEST_ARR[1] := 10; // Работает
    TEST_ARR[iIndex] := 10; // Не Работает
    D100 := 1;
    TEST_ARR[D100] := 10; // Не Работает

END_PROGRAM

CONST
    MY_TON_D := 2;
    MY_TO_D := 2;
    LIMIT := 7;
END_CONST

ORGANIZATION_BLOCK CYCLE
    (* **********************************************************
    CYCLE - название OB1, он вызывается циклически системой S7.
    Часть 1 : Вызов функционального блока и передача входных величин
    Часть 2 : Чтение выходных величин и вывод с переключением выходов
    ********************************************************** *)
    VAR_TEMP
        systemdata : ARRAY[0..20] OF BYTE; // Область для OB1
    END_VAR
    BEGIN
    (* Part 1 : ************************************************** *)
    ACQUIRE.ACQUIRE_DATA(
        measval_in  := WORD_TO_INT(input),
        newval      := "Input 0.0", // Входной ключ как идентификатор сигнала
        resort      := %PQW10.23,
        funct_sel   := Function_switch,
        newsel      := Coding_switch,
        selection   := Coding
    );

    (* Part 2 : ************************************************* *)
    IF Output_switch THEN // Изменение выхода
        Output := ACQUIRE_DATA.result_out; // Квадратный корень или квадрат
    ELSE
        Output := ACQUIRE_DATA.measval_out; // Измеряемая величина
    END_IF;
END_ORGANIZATION_BLOCK

TYPE Direction (
    DIR_CW, (* по часовой *)
    DIR_CCW  (* против часовой *)
)
END_TYPE

VAR
    xA : BOOL; (* Фаза а *)
    xB : BOOL; (* Фаза б *)
    enDir : Direction; (* Направление движения *)
    udiCount : DINT; (* Счетчик *)
    fbRTA, fbRTB : R_TRIG;
    fbFTA, fbFTB : F_TRIG;
END_VAR

fbRTA(CLK := xA);
fbFTA(CLK := xA);
fbRTB(CLK := xB);
fbFTB(CLK := xB);

IF  (fbRTA.Q AND NOT xB) OR
    (fbFTA.Q AND xB) OR
    (fbRTB.Q AND xA) OR
    (fbFTB.Q AND NOT xA )
THEN
    enDir := Direction.DIR_CW;
    udiCount := udiCount + 1;
ELSE
    enDir := Direction.DIR_CCW;
    udiCount := udiCount - 1;
END_IF;


PROGRAM PLC_PRG
    VAR
        xStart : BOOL := 'dfsfdfd'; // something
        fbTON1 : TON; (*  \. @WE :=  'dfdf' *)
        rValue : REAL; /* Конечное значение */
    END_VAR

    fbTON1(IN := xStart, PT => tDuration);
    IF xStart <> TRUE THEN
    rValue := easeLinear(fbTON1.ET, rFrom, rTo, tDuration);
    END_IF;
    (a = b)ANDc > 10;
    c := (b / 3) * 12**;
    a := CONCAT(a, ':= **'); // a := b
END_PROGRAM
