--[[
This library is used internally to process Lua style string pattern matching.

Used by string `find`, `match`, `gsub` and `gmatch` functions.
]]

require 'memory'

local strchar: type = require 'detail.strchar'

local MAX_MATCH_CALLS: isize <comptime> = 32
local CAP_UNFINISHED: isize <comptime> = -1
local CAP_POSITION: isize <comptime> = -2

-- Record holding a matched capture.
local StrPattCapture: type = @record{
  init: isize,
  len: isize
}

-- Checks whether the capture is unfinished.
function StrPattCapture:is_unfinished(): boolean
  return self.len == CAP_UNFINISHED
end

-- Checks whether the capture is a position.
function StrPattCapture:is_position(): boolean
  return self.len == CAP_POSITION
end

-- Record holding the matching state.
local StrPatt: type = @record{
  source: string,
  pattern: string,
  depth: isize, -- control for recursive depth (to avoid stack overflow)
  numcaptures: isize, -- total number of captures (finished or unfinished)
  capture: [32]StrPattCapture, -- maximum of 32 match captures
  plain: boolean,
  anchor: boolean,
}

-- Check whether pattern has no special characters.
local function match_has_pattern_specials(pattern: string): boolean
  for i: usize = 0,<pattern.size do
    switch pattern.data[i]
    case '^'_b, '$'_b, '*'_b, '+'_b, '?'_b, '.'_b, '('_b, '['_b, '%'_b, '-'_b then
      return true
    end
  end
  return false -- no special chars found
end

local function match_has_pattern_anchor(pattern: string): boolean
  return pattern.size > 0 and pattern.data[0] == '^'_b
end

-- Creates a new pattern matching state to being on `source` with pattern `pattern`.
function StrPatt.create(source: string, pattern: string, plain: boolean): StrPatt
  if not match_has_pattern_specials(pattern) then
    plain = false
  end
  local anchor: boolean = not plain and match_has_pattern_anchor(pattern)
  return (@StrPatt) {
    source = source,
    pattern = pattern,
    plain = plain,
    anchor = anchor,
    depth = MAX_MATCH_CALLS,
  }
end

function StrPatt:reset_captures(): void
  for i: isize=0,<self.numcaptures do
    self.capture[i] = {}
  end
  self.numcaptures = 0
end

-- Returns the capture at index `i`.
function StrPatt:get_capture(i: isize): (boolean, string, StrPattCapture)
  if unlikely(i < 0 or i >= self.numcaptures) then
    return false, 'invalid capture index', {}
  end
  if unlikely(self.capture[i]:is_unfinished()) then
    return false, 'unfinished capture', {}
  end
  local capture: StrPattCapture = self.capture[i]
  if not self.capture[i]:is_position() then
    local capstr: string = (@string){
      data=&self.source.data[self.capture[i].init],
      size=(@usize)(self.capture[i].len)
    }
    return true, capstr, capture
  else
    return true, '', capture
  end
end

-- Match pattern recursive function.
function StrPatt._match(ms: *StrPatt, s: isize, p: isize): isize
  local function match_class(c: byte, cl: byte): boolean
    local res: boolean
    switch cl
    case 'a'_b then res = strchar.isalpha(c)
    case 'A'_b then res = not strchar.isalpha(c)
    case 'c'_b then res = strchar.iscntrl(c)
    case 'C'_b then res = not strchar.iscntrl(c)
    case 'd'_b then res = strchar.isdigit(c)
    case 'D'_b then res = not strchar.isdigit(c)
    case 'g'_b then res = strchar.isgraph(c)
    case 'G'_b then res = not strchar.isgraph(c)
    case 'l'_b then res = strchar.islower(c)
    case 'L'_b then res = not strchar.islower(c)
    case 'p'_b then res = strchar.ispunct(c)
    case 'P'_b then res = not strchar.ispunct(c)
    case 's'_b then res = strchar.isspace(c)
    case 'S'_b then res = not strchar.isspace(c)
    case 'u'_b then res = strchar.isupper(c)
    case 'U'_b then res = not strchar.isupper(c)
    case 'w'_b then res = strchar.isalnum(c)
    case 'W'_b then res = not strchar.isalnum(c)
    case 'x'_b then res = strchar.isxdigit(c)
    case 'X'_b then res = not strchar.isxdigit(c)
    case 'z'_b then res = c == 0 -- deprecated option
    case 'Z'_b then res = c ~= 0 -- deprecated option
    else return cl == c end
    return res
  end

  local function match_class_end(ms: *StrPatt, p: isize): isize
    local c: byte = ms.pattern.data[p]
    p = p + 1
    switch c
    case '%'_b then
      assert(p ~= #ms.pattern, "malformed pattern (ends with '%')")
      p = p + 1
    case '['_b then
      if ms.pattern.data[p] == '^'_b then
        p = p + 1
      end
      repeat -- look for a ']'
        assert(p ~= #ms.pattern, "malformed pattern (missing ']')")
        c = ms.pattern.data[p]
        p = p + 1
        if c == '%'_b and p < #ms.pattern then
          p = p + 1 -- skip escapes (e.g. '%]')
        end
      until ms.pattern.data[p] == ']'_b
      p = p + 1
    end
    return p
  end

  local function match_bracket_class(ms: *StrPatt, c: byte, p: isize, ep: isize): boolean
    local sig: boolean = true
    if ms.pattern.data[p+1] == '^'_b then
      sig = false
      p = p + 1 -- skip the '^'
    end
    p = p + 1
    while p < ep do
      if ms.pattern.data[p] == '%'_b then
        p = p + 1
        if match_class(c, ms.pattern.data[p]) then
          return sig
        end
      elseif ms.pattern.data[p+1] == '-'_b and p+2 < ep then
        p = p + 2
        if ms.pattern.data[p-2] <= c and c <= ms.pattern.data[p] then
          return sig
        end
      elseif ms.pattern.data[p] == c then
        return sig
      end
      p = p + 1
    end
    return not sig
  end

  local function match_single(ms: *StrPatt, s: isize, p: isize, ep: isize): boolean
    if s >= #ms.source then
      return false
    else
      local c: byte = ms.source.data[s]
      local pc: byte = ms.pattern.data[p]
      switch pc
      case '.'_b then return true -- matches any char
      case '%'_b then return match_class(c, ms.pattern.data[p+1])
      case '['_b then return match_bracket_class(ms, c, p, ep-1)
      else return pc == c
      end
    end
  end

  local function match_balance(ms: *StrPatt, s: isize, p: isize): isize
    assert(p < #ms.pattern - 1, "malformed pattern (missing arguments to '%b')")
    if s >= #ms.source or ms.source.data[s] ~= ms.pattern.data[p] then
      return -1
    else
      local b: byte = ms.pattern.data[p]
      local e: byte = ms.pattern.data[p+1]
      local cont: isize = 1
      s = s + 1
      while s < #ms.source do
        if ms.source.data[s] == e then
          cont = cont - 1
          if cont == 0 then
            return s+1
          end
        elseif ms.source.data[s] == b then
          cont = cont + 1
        end
        s = s + 1
      end
    end
    return -1 -- string ends out of balance
  end

  local function match_max_expand(ms: *StrPatt, s: isize, p: isize, ep: isize): isize
    local i: isize = 0
    while match_single(ms, s + i, p, ep) do -- counts maximum expand for item
      i = i + 1
    end
    while i >= 0 do -- keeps trying to match with the maximum repetitions
      local res: isize = ms:_match((s+i), ep+1)
      if res ~= -1 then
        return res
      else -- didn't match
        i = i - 1 -- reduce 1 repetition to try again
      end
    end
    return -1
  end

  local function match_min_expand(ms: *StrPatt, s: isize, p: isize, ep: isize): isize
    while true do
      local res: isize = ms:_match(s, ep+1)
      if res ~= -1 then
        return res
      elseif match_single(ms, s, p, ep) then
        s = s + 1 -- try with one more repetition
      else
        break
      end
    end
    return -1
  end

  local function match_start_capture(ms: *StrPatt, s: isize, p: isize, what: isize): isize
    local numcaptures: isize = ms.numcaptures
    assert(numcaptures < #ms.capture, "too many captures")
    ms.capture[numcaptures].init = s
    ms.capture[numcaptures].len = what
    ms.numcaptures = numcaptures+1
    local res: isize = ms:_match(s, p)
    if res == -1 then -- match failed?
      ms.capture[numcaptures] = {}
      ms.numcaptures = ms.numcaptures - 1 -- undo capture
    end
    return res
  end

  local function match_end_capture(ms: *StrPatt, s: isize, p: isize): isize
    local l: isize = -1
    for numcaptures: isize = ms.numcaptures-1,0,-1 do
      if ms.capture[numcaptures].len == CAP_UNFINISHED then
        l = numcaptures
        break
      end
    end
    assert(l ~= -1, "invalid pattern capture")
    ms.capture[l].len = s - ms.capture[l].init -- close capture
    local res: isize = ms:_match(s, p)
    if res == -1 then -- match failed?
      ms.capture[l].len = CAP_UNFINISHED -- undo capture
    end
    return res
  end

  local function match_capture(ms: *StrPatt, s: isize, l: isize): isize
    l = l - '1'_b
    assert(l >= 0 and l < ms.numcaptures and ms.capture[l].len ~= CAP_UNFINISHED, "invalid capture index")
    -- the explicit cast here is necessary because len can be negative (CAP_UNFINISHED/CAP_POSITION)
    local len: usize = (@usize)(ms.capture[l].len)
    if (@usize)(#ms.source-s) >= len and memory.compare(&ms.source.data[ms.capture[l].init], &ms.source.data[s], len) == 0 then
      return s+len
    end
    return -1
  end

  ms.depth = ms.depth - 1
  assert(ms.depth > 0, 'pattern too complex')

  while p < #ms.pattern do -- while not end of pattern?
    switch ms.pattern.data[p]
    case '('_b then -- start capture
      if ms.pattern.data[p+1] == ')'_b then -- position capture?
        s = match_start_capture(ms, s, p + 2, CAP_POSITION)
      else
        s = match_start_capture(ms, s, p + 1, CAP_UNFINISHED)
      end
      break
    case ')'_b then -- end capture
      s = match_end_capture(ms, s, p + 1)
      break
    case '$'_b then
      if (p + 1) == #ms.pattern then -- is the '$' the last char in pattern?
        if s ~= #ms.source then -- check end of string
          s = -1
        end
        break
      end
    case '%'_b then -- escaped sequences not in the format class[*+?-]?
      switch ms.pattern.data[p+1]
      case 'b'_b then -- balanced string?
        s = match_balance(ms, s, p + 2)
        if s ~= -1 then
          p = p + 4
          continue
        end
        break
      case 'f'_b then -- frontier?
        p = p + 2
        assert(ms.pattern.data[p] == '['_b, "missing '[' after '%f' in pattern")
        local ep: isize = match_class_end(ms, p) -- points to what is next
        local previous: byte = (s == 0 and s < #ms.source) and '\0'_b or ms.source.data[s-1]
        local next: byte = (s == #ms.source) and '\0'_b or ms.source.data[s]
        if not match_bracket_class(ms, previous, p, ep - 1) and
           match_bracket_class(ms, next, p, ep - 1) then
          p = ep
          continue
        end
        s = -1 -- match failed
        break
      case '0'_b, '1'_b, '2'_b, '3'_b, '4'_b, '5'_b, '6'_b, '7'_b, '8'_b, '9'_b then -- capture results (%0-%9)?
        s = match_capture(ms, s, ms.pattern.data[p+1])
        if s ~= -1 then
          p = p + 2
          continue
        end
        break
      end
    end
    do -- pattern class plus optional suffix
      local ep: isize = match_class_end(ms, p) -- points to optional suffix
      local epc: byte = ms.pattern.data[ep]
      if not match_single(ms, s, p, ep) then -- does not match at least once?
        if epc == '*'_b or epc == '?'_b or epc == '-'_b then -- accept empty?
          p = ep + 1
          continue
        else -- '+' or no suffix
          s = -1 -- fail
        end
      else -- matched once
        switch epc -- handle optional suffix
        case '?'_b then -- optional
          local res: isize = ms:_match(s + 1, ep + 1)
          if res ~= -1 then
            s = res
          else
            p = ep + 1
            continue
          end
        case '+'_b then -- 1 or more repetitions
          s = s + 1 -- 1 match already done
          s = match_max_expand(ms, s, p, ep)
        case '*'_b then -- 0 or more repetitions
          s = match_max_expand(ms, s, p, ep)
        case '-'_b then -- 0 or more repetitions (minimum)
          s = match_min_expand(ms, s, p, ep)
        else -- no suffix
          s = s + 1
          p = ep
          continue
        end
      end
      break
    end
  end
  ms.depth = ms.depth + 1
  return s
end

-- Match pattern auxiliary function.
function StrPatt.match(ms: *StrPatt, s: isize): (isize, isize)
  if (@usize)(s) > ms.source.size then
    return s, -1
  elseif ms.pattern.size == 0 then
    return s, s
  elseif ms.plain then
    local found: pointer = memory.find(
      &ms.source.data[s], ms.source.size - (@usize)(s),
      &ms.pattern.data[0], ms.pattern.size)
    if not found then
      return s, -1
    else
      s = (@isize)((@usize)(found) - (@usize)(&ms.source.data[0]))
      return s, s+ms.pattern.size
    end
  else
    local p: isize = 0
    if ms.anchor then
      p = 1 -- skip anchor character
    end
    repeat -- keep trying to match while advancing
      ms:reset_captures()
      local e: isize = ms:_match(s, p)
      if e ~= -1 then -- matched
        return s, e
      end
      s = s + 1
    until s > #ms.source or ms.anchor
    return s, -1
  end
end

return StrPatt
