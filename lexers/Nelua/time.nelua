--[[
Library that imports symbols from the `<time.h>` header according to C11 specifications.

For a complete documentation about the functions,
see [C time documentation](https://www.cplusplus.com/reference/ctime/).
]]

require 'C'

-- Types
global C.clock_t: type = @cclock_t
global C.time_t: type = @ctime_t

global C.tm: type <cimport,cinclude'<time.h>',ctypedef> = @record{
  tm_sec: cint,
  tm_min: cint,
  tm_hour: cint,
  tm_mday: cint,
  tm_mon: cint,
  tm_year: cint,
  tm_wday: cint,
  tm_yday: cint,
  tm_isdst: cint
}
global C.timespec: type <cimport,cinclude'<time.h>',ctypedef> = @record{
  tv_sec: C.time_t,
  tv_nsec: clong
}

-- Time manipulation

function C.clock(): C.clock_t <cimport,cinclude'<time.h>'> end
function C.difftime(time1: C.time_t, time0: C.time_t): float64 <cimport,cinclude'<time.h>'> end
function C.mktime(tp: *C.tm): C.time_t <cimport,cinclude'<time.h>'> end
function C.strftime(s: cstring, maxsize: csize, format: cstring, tp: *C.tm): csize <cimport,cinclude'<time.h>'> end
function C.time(timer: *C.time_t): C.time_t <cimport,cinclude'<time.h>'> end

-- Conversion

function C.asctime(tp: *C.tm): cstring <cimport,cinclude'<time.h>'> end
function C.ctime(timer: *C.time_t): cstring <cimport,cinclude'<time.h>'> end
function C.gmtime(timer: *C.time_t): *C.tm <cimport,cinclude'<time.h>'> end
function C.localtime(timer: *C.time_t): *C.tm <cimport,cinclude'<time.h>'> end
function C.timespec_get(ts: *C.timespec, base: cint): cint <cimport,cinclude'<time.h>'> end

-- Constants

global C.CLOCKS_PER_SEC: C.clock_t <const,cimport,cinclude'<time.h>'>
global C.TIME_UTC: cint <const,cimport,cinclude'<time.h>'>

-- C23

function C.asctime_r(tp: *C.tm, buf: cstring): cstring <cimport,cinclude'<time.h>'> end
function C.ctime_r(timer: *C.time_t, buf: cstring): cstring <cimport,cinclude'<time.h>'> end
function C.gmtime_r(timer: *C.time_t, tp: *C.tm): *C.tm <cimport,cinclude'<time.h>'> end
function C.localtime_r(timer: *C.time_t, tp: *C.tm): *C.tm <cimport,cinclude'<time.h>'> end

return C
