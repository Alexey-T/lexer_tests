--[[
Auxiliary module to perform conversion between string and numbers.

Used internally by the string library.
]]

local strchar: type = require 'detail.strchar'

-- Module namespace.
local strconv: type = @record{}

-- Convert a string to an integer in the desired base.
function strconv.str2int(s: string, base: uinteger): (boolean, integer)
  if s.size == 0 then return false, 0 end
  local pos: usize = 0
  while pos < s.size and strchar.isspace(s.data[pos]) do pos = pos + 1 end -- skip initial spaces
  if pos >= s.size then return false, 0 end
  local neg: boolean = false
  if s.data[pos] == '-'_b then -- negative sign
    pos = pos + 1
    neg = true
  elseif s.data[pos] == '+'_b then -- skip positive sign
    pos = pos + 1
  end
  if base == 0 then -- detect base
    base = 10 -- default to base 10
    if s.data[pos] == '0'_b and pos + 1 < s.size then -- has base prefix
      local bc: byte = s.data[pos+1]
      if bc == 'b'_b or bc == 'B'_b then -- binary
        base = 2
        pos = pos + 2
      elseif bc == 'x'_b or bc == 'X'_b then -- hexadecimal
        base = 16
        pos = pos + 2
      end
    end
  end
  assert(base >= 2 and base <= 36, "base out of range")
  local n: uinteger = 0
  while pos < s.size do
    local x: uinteger = strchar.getbasedigit(s.data[pos])
    if x >= base then break end
    n = n * base + (@uinteger)(x)
    pos = pos + 1
  end
  while pos < s.size and strchar.isspace(s.data[pos]) do pos = pos + 1 end -- skip trailing spaces
  if pos ~= s.size then return false, 0 end
  if neg then n = -n end -- negate
  return true, (@integer)(n)
end

--[[
Converts an integer to a string.
The `buf` buffer is temporary buffer needed when performing the conversion.
Returns a string view, which may point to any part of `buf`.
]]
function strconv.int2str(buf: *[48]byte, x: auto, base: int32 <comptime>): string
  local T: type = #[x.type]#
  local pos: usize = #buf-1
  buf[pos] = 0
  pos = pos - 1
  local neg: boolean = x < 0
  if x == 0 then
    buf[pos] = '0'_b
    pos = pos - 1
  else
    while x ~= 0 do
      local quot: T = x /// (@T)(base)
      local rema: T = x - quot*(@T)(base)
      ## if T.value.is_signed then
      if rema < 0 then rema = -rema end
      ## end
      x = quot
      ## if base.value > 10 then
        buf[pos] = (@byte)(rema + (rema >= 10 and 'a'_i8 - 10 or '0'_i8))
      ## else
        buf[pos] = (@byte)(rema + '0'_i8)
      ## end
      pos = pos - 1
    end
  end
  ## if base.value == 16 then
    buf[pos] = 'x'_b
    buf[pos-1] = '0'_b
    pos = pos - 2
  ## end
  if neg then
    buf[pos] = '-'_b
    pos = pos - 1
  end
  return (@string){data=&buf[pos+1], size=#buf-pos-2}
end

-- Macro to retrieve a longer float and integer type.
##[[
local function choose_long(xtype)
  if xtype.is_float32 then
    return primtypes.float64, primtypes.uint32, 7
  elseif xtype.is_float64 then
    return primtypes.clongdouble, primtypes.uint64, 14
  elseif xtype.is_clongdouble and (ccinfo.has_float128 and ccinfo.has_int128) then
    return primtypes.float128, primtypes.uint128, 19
  elseif xtype.is_float128 and (ccinfo.has_float128 and ccinfo.has_int128) then
    return primtypes.float128, primtypes.uint128, 32
  end
  return primtypes.clongdouble, primtypes.uint64, 19
end
]]

--[[
NOTE: Here we intentionally avoid using C standard library to do the float conversions,
so the Nelua standard library can be used in free standing, because some embedded systems
will not have `strtod` or `snprintf` implementations, or even if they do
its code size may be too large, or even have an incomplete implementation, or different
behavior across systems.

The following code makes no assumptions of the underlying hardware float implementation,
and it intentionally avoids reading float bits, so that it is more portable across wild hardware
float implementations.

To actually compute without loss of precision a larger float is used to perform float
operations, in case the compiler does not have support for it, a small float will be used as
fallback and there may be a loss of precision.
]]

-- Convert a decimal string to a float number.
function strconv.str2num(s: string): (boolean, number)
  ## local longfloatT, longuintT = choose_long(primtypes.number)
  local longfloat: type = #[longfloatT]#
  local num: longfloat, basenum: longfloat = 0, 10
  local base: int32, exp: int32 = 10, 0
  local pos: usize, len: usize = 0, s.size
  -- skip white spaces
  while pos < len and strchar.isspace(s.data[pos]) do pos = pos + 1 end
  if pos >= len then return false, 0 end
  -- sign
  local c: byte = s.data[pos]
  local neg: boolean = c == '-'_b
  local gotdigit: boolean, gotfrac: boolean
  if neg or c == '+'_b then pos = pos + 1 end
  -- detect base
  if pos+1 < len and s.data[pos] == '0'_b then
    c = s.data[pos+1]
    if c == 'x'_b or c == 'X'_b then -- hexadecimal
      pos = pos + 2
      base = 16; basenum = 16
    elseif c == 'b'_b or c == 'B'_b then -- binary
      pos = pos + 2
      base = 2; basenum = 2
    end
  end
  -- skip leading zeros
  while pos < len do
    c = s.data[pos]
    if c ~= '0'_b then break end
    pos = pos + 1
    gotdigit = true
  end
  -- mantissa part
  while pos < len do
    c = s.data[pos]
    local d: int32 = strchar.getbasedigit(c)
    if d < base then
      num = num * basenum + (@longfloat)(d)
      gotdigit = true
      pos = pos + 1
      if gotfrac then exp = exp - (base == 16 and 4_i32 or 1_i32) end
    elseif c == '.'_b then
      if gotfrac then return false, 0 end
      gotfrac = true
      pos = pos + 1
    else
      break
    end
  end
  if not gotdigit then return false, 0 end
  -- exponent part
  if pos < len and (base == 10 and (c == 'e'_b or c == 'E'_b)) or
                   (base ~= 10 and (c == 'p'_b or c == 'P'_b)) then
    pos = pos + 1
    if pos >= len then return false, 0 end
    c = s.data[pos]
    local negexp: boolean = c == '-'_b
    if negexp or c == '+'_b then pos = pos + 1 end
    if pos >= len or strchar.getdigit(s.data[pos]) >= 10 then return false, 0 end
    local e: int32 = 0
    while pos < len do
      local d: int32 = strchar.getdigit(s.data[pos])
      if d >= 10 then break end
      pos = pos + 1
      e = e * 10 + (@int32)(d)
      -- exponent too large? 2^-16500/10^-5000 is enough for float128
      if e > 16500 and base == 2 then e = 16500
      elseif e > 5000 and base == 10 then e = 5000 end
    end
    if negexp then e = -e end
    exp = exp + e
  end
  -- skip white spaces
  while pos < len and strchar.isspace(s.data[pos]) do pos = pos + 1 end
  if pos ~= len then return false, 0 end
  -- exponent scale
  if exp ~= 0 then
    local invscale: boolean = exp < 0
    local scale: longfloat = 1
    if invscale then exp = -exp end
    if base == 10 then
      while exp >= 256 do
        scale = scale * (@longfloat)(1e256)
        exp = exp - 256
      end
      ## for _,i in ipairs{128,64,32,16,8,4,2,1} do
        if exp >= #[i]# then
          scale = scale * (@longfloat)(#[tonumber('1e'..i)]#)
          exp = exp - #[i]#
        end
      ## end
    else -- base 2
      local te: longfloat = 2
      while true do
        if exp & 1 == 1 then scale = scale * te end
        exp = exp >>> 1
        if exp == 0 then break end
        te = te * te
      end
    end
    if invscale then scale = 1/scale end
    num = num * scale
  end
  if neg then num = -num end
  return true, (@number)(num)
end


--[[
Converts a float number to a decimal string.
The `buf` buffer is temporary buffer needed when performing the conversion.
Returns a string view, which may or may not point to any part of `buf`.
]]
function strconv.num2str(buf: *[64]byte, x: auto): string
  ## local longfloatT, longuintT, DIGITS = choose_long(x.type)
  local longfloat: type = #[longfloatT]#
  local longuint: type = #[longuintT]#
  -- volatile is used so the code can also work with '-ffast-math' on Clang
  local n: longfloat <volatile> = x
  do -- arbitrary way to check nan/inf/negative zero without relying much on float format
    local UF2I: type = @union{f: float32, i: uint32}
    local pinf: UF2I = {f=#[math.huge]#}
    local ninf: UF2I = {f=#[-math.huge]#}
    local huge: longfloat <volatile> = #[math.huge]#
    local ux: UF2I = {f=n}
    if ux.i & ninf.i == ninf.i and ux.i ~= ninf.i then -- negative nan
      return '-nan'
    elseif ux.i & pinf.i == pinf.i and ux.i ~= pinf.i and ux.i ~= ninf.i then -- nan
      return 'nan'
    elseif n == 0 then
      return ux.i ~= 0 and '-0.0' or '0.0'
    elseif n == huge then
      return 'inf'
    elseif n == -huge then
      return '-inf'
    end
  end
  local pos: usize = #buf-1
  buf[pos] = 0
  pos = pos - 1
  local gotdigit: boolean, gotexpo: boolean
  local neg: boolean = n < 0
  if neg then n = -n end
  local expo: int32 = #[DIGITS - 1]#
  -- scale n to range [10^(DIGITS-1),10^DIGITS] while computing base-10 exponent
  while n <= (@longfloat)(#[tonumber('1e'..-(256-DIGITS))]#) do
    n = n * (@longfloat)(1e256)
    expo = expo - 256
  end
  ## for _,i in ipairs{128,64,32,16,8,4,2,1} do
    if n <= (@longfloat)(#[tonumber('1e'..-(i-DIGITS))]#) then
      n = n * (@longfloat)(#[tonumber('1e'..i)]#)
      expo = expo - #[i]#
    end
  ## end
  while n >= (@longfloat)(#[tonumber('1e'..(256+DIGITS))]#) do
    n = n * (@longfloat)(1e-256)
    expo = expo + 256
  end
  ## for _,i in ipairs{128,64,32,16,8,4,2,1,0} do
    if n >= (@longfloat)(#[tonumber('1e'..(i+DIGITS))]#) then
      n = n * (@longfloat)(#[tonumber('1e-'..math.max(i,1))]#)
      expo = expo + #[math.max(i,1)]#
    end
  ## end
  -- round n after scaling
  ## if DIGITS < longfloatT.decimaldigits then
    n = n + (@longfloat)(0.5)
  ## else
    if expo ~= #[DIGITS - 1]# then -- round only when n was actually scaled
      n = n + (@longfloat)(0.5)
    end
  ## end
  -- extract fractional digits
  local frac: longuint = (@longuint)(n)
  local fracmax: longuint = 1
  for i: int32=0,<#[DIGITS]# do fracmax = fracmax * 10 end
  while frac >= fracmax do
    frac = frac // 10
    expo = expo + 1
  end
  -- fill exponent
  if expo < -4 or expo >= #[DIGITS]# then
    local negexpo: boolean = expo < 0
    if negexpo then expo = -expo end
    local expozero: boolean = expo < 10
    while expo ~= 0 do
      buf[pos] = (@byte)(expo %%% 10) + '0'_b
      expo = expo /// 10
      pos = pos - 1
    end
    if expozero then
      buf[pos] = '0'_b
      pos = pos - 1
    end
    buf[pos] = negexpo and '-'_b or '+'_b
    buf[pos-1] = 'e'_b
    pos = pos - 2
    gotexpo = true
  end
  -- fill digits
  for i:int32=#[DIGITS-1]#,expo <= 0 and expo or 0,-1 do
    if i == expo and not (gotexpo and not gotdigit) then -- add decimal separator
      if not gotdigit then -- add trailing zero
        buf[pos] = '0'_b
        pos = pos - 1
        gotdigit = true
      end
      buf[pos] = '.'_b
      pos = pos - 1
    end
    local rema: longuint = frac % 10
    frac = frac // 10
    if gotdigit or rema ~= 0 then -- add digit
      buf[pos] = (@byte)(rema) + '0'_b
      pos = pos - 1
      gotdigit = true
    end
  end
  -- trim leading zeros
  while pos < #buf-2 and buf[pos+1] == '0'_b and buf[pos+2] ~= '.'_b do
    pos = pos + 1
  end
  -- fill sign
  if neg then
    buf[pos] = '-'_b
    pos = pos - 1
  end
  return (@string){data=&buf[pos+1], size=#buf-pos-2}
end

return strconv
