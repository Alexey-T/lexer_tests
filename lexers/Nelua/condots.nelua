##[[
cflags '-O3'
cdefine 'SDL_MAIN_HANDLED'
if ccinfo.is_gcc and not ccinfo.is_clang then
  cflags '-ffast-math -march=native -fopenmp'
elseif ccinfo.is_emscripten then
  cflags '-s USE_SDL=2 -s ASYNCIFY=1'
else -- TCC does not support intrinsic headers
  cdefine 'SDL_DISABLE_IMMINTRIN_H'
end
cinclude '<SDL2/SDL.h>'
linklib 'SDL2'
]]

require 'math'
require 'memory'

--------------------------------------------------------------------------------
-- SDL

-- import SDL types
local SDL_Keysym <cimport,nodecl> = @record{
  scancode: cint,
  sym: int32,
  mod: uint16,
  unused: uint32
}
local SDL_KeyboardEvent <cimport,nodecl> = @record{
  type: uint32,
  timestamp: uint32,
  windowID: uint32,
  state: uint8,
  repeated: uint8,
  padding: uint16,
  keysym: SDL_Keysym
}
local SDL_Surface <cimport,nodecl> = @record{
  flags: uint32,
  format: pointer,
  w: cint,
  h: cint,
  pitch: cint,
  pixels: pointer
}
local SDL_Event <cimport,nodecl> = @record{type: uint32, padding: [56]byte}
local SDL_Rect <cimport,nodecl> = @record{x: cint, y: cint, w: cint, h: cint}
local SDL_Window <cimport,nodecl> = @record{}
local SDL_Renderer <cimport,nodecl> = @record{}
local SDL_Texture <cimport,nodecl> = @record{}

-- import SDL constants
local SDL_INIT_VIDEO: uint32 <cimport,nodecl>
local SDL_WINDOWPOS_UNDEFINED: cint <cimport,nodecl>
local SDL_WINDOW_OPENGL: uint32 <cimport,nodecl>
local SDL_QUIT: uint32 <cimport,nodecl>
local SDL_KEYDOWN: uint32 <cimport,nodecl>
local SDLK_UP: int32 <cimport,nodecl>
local SDLK_DOWN: int32 <cimport,nodecl>
local SDLK_LEFT: int32 <cimport,nodecl>
local SDLK_RIGHT: int32 <cimport,nodecl>
local SDLK_a: int32 <cimport,nodecl>
local SDLK_w: int32 <cimport,nodecl>
local SDLK_s: int32 <cimport,nodecl>
local SDLK_d: int32 <cimport,nodecl>
local SDLK_e: int32 <cimport,nodecl>
local SDLK_q: int32 <cimport,nodecl>
local SDL_PIXELFORMAT_ARGB8888: uint32 <cimport,nodecl>
local SDL_BLENDMODE_NONE: int32 <cimport,nodecl>
local SDL_RENDERER_ACCELERATED: uint32 <cimport,nodecl>
local SDL_RENDERER_PRESENTVSYNC: uint32 <cimport,nodecl>
local SDL_RENDERER_SOFTWARE: uint32 <cimport,nodecl>
local SDL_TEXTUREACCESS_STREAMING: cint <cimport,nodecl>

-- import SDL functions
local function SDL_Init(flags: uint32): int32 <cimport,nodecl> end
local function SDL_CreateWindow(title: cstring, x: cint, y: cint, w: cint, h: cint, flags: uint32): *SDL_Window <cimport,nodecl> end
local function SDL_Quit() <cimport,nodecl> end
local function SDL_DestroyWindow(window: *SDL_Window) <cimport,nodecl> end
local function SDL_PollEvent(event: *SDL_Event): int32 <cimport,nodecl> end
local function SDL_GetTicks(): uint32 <cimport,nodecl> end
local function SDL_Delay(ms: uint32) <cimport,nodecl> end
local function SDL_CreateRGBSurfaceWithFormatFrom(pixels: pointer, width: cint,height: cint, depth: cint, pitch: cint,format: uint32): SDL_Surface <cimport,nodecl> end
local function SDL_FreeSurface(surface: SDL_Surface) <cimport,nodecl> end
local function SDL_LockSurface(surface: SDL_Surface) <cimport,nodecl> end
local function SDL_GetWindowSurface(window: *SDL_Window): SDL_Surface <cimport,nodecl> end
local function SDL_BlitSurface(src: SDL_Surface, srcrect: *SDL_Rect, dst: SDL_Surface, dstrect: *SDL_Rect): cint <cimport,nodecl> end
local function SDL_UpdateWindowSurface(window: *SDL_Window) <cimport,nodecl> end
local function SDL_CreateRenderer(window: *SDL_Window, index: cint, flags: uint32): *SDL_Renderer <cimport,nodecl> end
local function SDL_DestroyRenderer(renderer: *SDL_Renderer) <cimport,nodecl> end
local function SDL_RenderPresent(renderer: *SDL_Renderer) <cimport,nodecl> end
local function SDL_RenderClear(renderer: *SDL_Renderer): cint <cimport,nodecl> end
local function SDL_CreateTexture(renderer: *SDL_Renderer, format: uint32, access: cint, w: cint, h: cint): *SDL_Texture <cimport,nodecl> end
local function SDL_DestroyTexture(texture: *SDL_Texture) <cimport,nodecl> end
local function SDL_RenderCopy(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_Rect, dstrect: *SDL_Rect): cint <cimport,nodecl> end
local function SDL_LockTexture(texture: *SDL_Texture, rect: *SDL_Rect, pixels: *pointer, pitch: *cint): cint <cimport,nodecl> end
local function SDL_UnlockTexture(texture: *SDL_Texture) <cimport,nodecl> end
local function SDL_SetRenderDrawBlendMode(renderer: *SDL_Renderer, blendMode: int32): cint <cimport,nodecl> end
local function SDL_SetTextureBlendMode(texture: *SDL_Texture, blendMode: int32): cint <cimport,nodecl> end
local function SDL_UpdateTexture(texture: *SDL_Texture, rect: *SDL_Rect, pixels: pointer, pitch: cint): cint <cimport,nodecl> end
local function SDL_GetError(): cstring <cimport,nodecl> end

--------------------------------------------------------------------------------
local vec4b = @record{x: byte, y: byte, z: byte, w: byte}
local vec2 = @record{x: number, y: number}
local Particle = @record{p: vec2, v: vec2}
local window, renderer, texture

local SCREEN_WIDTH <comptime> = 1280
local SCREEN_HEIGHT <comptime> = 720
local pixels: [SCREEN_HEIGHT][SCREEN_WIDTH]vec4b

local NUM_PARTICLES <comptime> = 200
local RADIUS <comptime> = 3
local MIN_DISTANCE <comptime> = 40
local MAX_DISTANCE <comptime> = 80
local MIN_DISTANCE2 <comptime> = MIN_DISTANCE * MIN_DISTANCE
local MAX_DISTANCE2 <comptime> = MAX_DISTANCE * MAX_DISTANCE
local particles: [NUM_PARTICLES]Particle

do
  for i=0,<NUM_PARTICLES do
    particles[i] = {
      p = vec2{math.random() * SCREEN_WIDTH, math.random() * SCREEN_HEIGHT},
      v = vec2{0,0}
    }
  end
end

local function draw_pixel(x: integer, y: integer, col: vec4b <const>)
  pixels[SCREEN_HEIGHT - y - 1][x] = col
end

local function blend_pixel(x: integer, y: integer, col: vec4b <const>, opacity: number)
  local pcol = &pixels[SCREEN_HEIGHT - y - 1][x]
  local iopacity = 1-opacity
  pcol.x = math.floor(pcol.x * iopacity + col.x*opacity)
  pcol.y = math.floor(pcol.y * iopacity + col.y*opacity)
  pcol.z = math.floor(pcol.z * iopacity + col.z*opacity)
end

local function lerp(v0: number, v1: number, t: number): number
  return v0 + t * (v1 - v0)
end

local function clamp(x: number, min: number, max: number): number
  return math.max(min, math.min(max, x))
end

function vec2:sub(a: vec2): vec2
  return vec2{self.x - a.x, self.y - a.y}
end
function vec2:add(a: vec2): vec2
  return vec2{self.x + a.x, self.y + a.y}
end
function vec2:mul(a: vec2): vec2
  return vec2{self.x * a.x, self.y * a.y}
end
function vec2:smul(s: number): vec2
  return vec2{self.x * s, self.y * s}
end
function vec2:dot(a: vec2): number
  return self.x * a.x + self.y * a.y
end
function vec2.length(self: vec2): number
  return math.sqrt(self.x * self.x + self.y * self.y)
end
function vec2:distance(a: vec2): number
  return self:sub(a):length()
end

local INTERP_RADIUS <comptime> = 1

local function draw_circle(p: vec2, radius: number)
  local sx: integer = math.floor(math.max(p.x-radius-INTERP_RADIUS, 0))
  local ex: integer = math.floor(math.min(p.x+radius+INTERP_RADIUS, SCREEN_WIDTH-1))
  local sy: integer = math.floor(math.max(p.y-radius-INTERP_RADIUS, 0))
  local ey: integer = math.floor(math.min(p.y+radius+INTERP_RADIUS, SCREEN_HEIGHT-1))
  for iy=sy,ey do
    for ix=sx,ex do
      local d = math.sqrt((ix-p.x)*(ix-p.x) + (iy-p.y)*(iy-p.y))
      local diff = d - radius
      if diff < 0 then
        draw_pixel(ix, iy, vec4b{0,0,0,255})
      elseif diff < INTERP_RADIUS then
        local opacity = 1-diff/INTERP_RADIUS
        blend_pixel(ix, iy, vec4b{0,0,0,255}, opacity)
      end
    end
  end
end

local function line_dist(a: vec2, b: vec2, p: vec2): number
	local pa, ba = p:sub(a), b:sub(a)
	local h = clamp(pa:dot(ba)/ba:dot(ba), 0, 1)
	return pa:sub(ba:smul(h)):length()
end

local function draw_line(a: vec2, b: vec2, radius: number, opacity: number)
  local delta = b:sub(a)
  local sx, sy = delta.x >= 0 and 1 or -1, delta.y >= 0 and 1 or -1
  if math.abs(delta.y) < 1 or math.abs(delta.x) < 1 then return end
  for j=-INTERP_RADIUS-radius,math.abs(delta.x)+radius+INTERP_RADIUS do
    local ix: integer = math.floor(a.x + j*sx)
    if ix >= 0 and ix < SCREEN_WIDTH then
      for i=-INTERP_RADIUS-radius,math.abs(delta.y)+radius+INTERP_RADIUS do
        local iy: integer = math.floor(a.y + i*sy)
        if iy >= 0 and iy < SCREEN_HEIGHT then
          local p = vec2{ix, iy}
          local d = line_dist(a, b, p)
          d = math.min(d, math.min(p:distance(a), p:distance(b)))
          local diff = d - radius
          if diff < 0 then
            blend_pixel(ix, iy, vec4b{0,0,0,255}, opacity)
          elseif diff < INTERP_RADIUS then
            local popacity = opacity*(1-diff/INTERP_RADIUS)
            blend_pixel(ix, iy, vec4b{0,0,0,255}, popacity)
          end
        end
      end
    end
  end
end

local function draw_scene()
  -- clear screen
  memory.set(&pixels[0], 255, SCREEN_WIDTH*SCREEN_HEIGHT*4)

  for i=0,<NUM_PARTICLES do
    local p = &particles[i].p
    local v = &particles[i].v
    $p = p:add(v)
    if p.x < -MAX_DISTANCE then
      p.x = p.x + SCREEN_WIDTH + MAX_DISTANCE * 2
    elseif p.x > SCREEN_WIDTH + MAX_DISTANCE then
      p.x = p.x - SCREEN_WIDTH + MAX_DISTANCE * 2
    end
    if p.y < -MAX_DISTANCE then
      p.y = p.y + SCREEN_HEIGHT + MAX_DISTANCE * 2
    elseif p.y > SCREEN_HEIGHT + MAX_DISTANCE then
      p.y = p.y - SCREEN_HEIGHT + MAX_DISTANCE * 2
    end
    v.x = v.x + 0.05 * (math.random() - 0.5) - 0.001 * v.x
    v.y = v.y + 0.05 * (math.random() - 0.5) - 0.001 * v.y
    draw_circle(p, RADIUS)
  end

  ## cemit '#pragma omp parallel for schedule(dynamic)'
  for i=0,<NUM_PARTICLES do
    local pi = &particles[i]
    for j=i+1,<NUM_PARTICLES do
      local pj = &particles[j]
      local d = pi.p:sub(pj.p)
      local d2 = d:dot(d)
      if d2 < MAX_DISTANCE2 then
        local opacity: number = 1
        if d2 > MIN_DISTANCE2 then
          opacity = (MAX_DISTANCE2 - d2) / (MAX_DISTANCE2 - MIN_DISTANCE2)
        end
        draw_line(pi.p, pj.p, 1, opacity)
      end
    end
  end
end

local function upload_pixels()
  SDL_UpdateTexture(texture, nilptr, &pixels[0][0], SCREEN_WIDTH*4)
  SDL_RenderCopy(renderer, texture, nilptr, nilptr)
  SDL_RenderPresent(renderer)
end

local function draw()
  draw_scene()
  upload_pixels()
end

local function poll_events()
  local event: SDL_Event
  while SDL_PollEvent(event) ~= 0 do
    switch event.type
    case SDL_QUIT then
      return false
    end
  end
  return true
end


local function go()
  -- init sdl
  SDL_Init(SDL_INIT_VIDEO)

  window = SDL_CreateWindow("An SDL2 Window",
    SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
    SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL)
  assert(window, "Could not create window")

  renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED)
  assert(renderer, "Could not create renderer")
  SDL_SetRenderDrawBlendMode(renderer, SDL_BLENDMODE_NONE)

  texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, SCREEN_WIDTH, SCREEN_HEIGHT)
  SDL_SetTextureBlendMode(texture, SDL_BLENDMODE_NONE)

  -- draw
  local lastticks = SDL_GetTicks()
  local fps = 0
  repeat
    local ticks = SDL_GetTicks()
    if ticks - lastticks >= 1000 then
      print('FPS', fps)
      lastticks = ticks
      fps = 0
    end

    local quit = not poll_events()
    draw()
    fps = fps + 1
  until quit

  -- cleanup and finish
  SDL_DestroyTexture(texture)
  SDL_DestroyRenderer(renderer)
  SDL_DestroyWindow(window)
  SDL_Quit()
end

go()
