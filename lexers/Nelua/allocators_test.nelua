require 'allocators.arena'
require 'allocators.stack'
require 'allocators.pool'
require 'allocators.heap'
require 'allocators.aligned'
require 'allocators.general'
require 'vector'

do -- Arena
  local allocator: ArenaAllocator(1024,8)
  local i: *int64 = (@*int64)(allocator:alloc0(#int64))
  local init: usize = allocator.prev_offset
  assert($i == 0)
  $i = 0xff
  assert($i == 0xff)
  assert(allocator.prev_offset == init and allocator.curr_offset == init+8)
  allocator:dealloc(i)
  assert(allocator.prev_offset == init and allocator.curr_offset == init)
  local ni: *int64 = (@*int64)(allocator:alloc0(#int64))
  assert(ni == i and $ni == 0)
  assert(allocator.prev_offset == init and allocator.curr_offset == init+8)
  local a: *[0]int64 = (@*[0]int64)(allocator:realloc0(i, 32 * #@int64, #@int64))
  assert((@*int64)(a) == i)
  assert(allocator.prev_offset == init and allocator.curr_offset == init +8*32)
  for i=0,<32 do a[i] = 0xff end
  a = (@*[0]int64)(allocator:realloc0(i, 8 * #@int64, 32 * #@int64))
  assert(allocator.prev_offset == init and allocator.curr_offset == init + 8*8)
  for i=0,<8 do assert(a[i] == 0xff) end
  assert(allocator:realloc0(i, 0, 8 * #@int64) == nilptr)
  for i=0,<32 do assert(a[i] == 0xff) end
  assert(allocator.prev_offset == init and allocator.curr_offset == init)
  a = (@*[0]int64)(allocator:realloc0(nilptr, 1024-init, 0))
  assert(a ~= nilptr)
  assert(allocator.prev_offset == init and allocator.curr_offset == 1024)
  assert(allocator:alloc0(1) == nilptr)
  allocator:deallocall()
  assert(allocator.prev_offset == 0 and allocator.curr_offset == 0)
  for i=0,<1024 do
    assert(allocator.buffer[i] == 0)
  end
end

do -- Stack
  local allocator: StackAllocator(1024, 16)
  assert(allocator:alloc0(1024) == nilptr)
  local a = allocator:alloc0(3)
  assert(a ~= nilptr and (@usize)(a) % 16 == 0)
  local b = allocator:alloc0(7)
  assert(b ~= nilptr and (@usize)(b) % 16 == 0)
  local c = allocator:alloc0(33)
  assert(c ~= nilptr and (@usize)(c) % 16 == 0)
  local nc = allocator:realloc0(c, 133, 33)
  assert(nc == c)
  assert(allocator:realloc0(b, 99, 7) == nilptr)
  assert(allocator:realloc0(b, 1, 7) == b)
  local d = allocator:alloc0(1)
  allocator:dealloc(d)
  allocator:dealloc(c)
  allocator:dealloc(b)
  allocator:dealloc(a)
  assert(allocator.prev_offset == 0 and allocator.curr_offset == 0)
  a = allocator:alloc0(3)
  b = allocator:alloc0(7)
  allocator:deallocall()
  assert(allocator.prev_offset == 0 and allocator.curr_offset == 0)
end

do -- Pool
  local Object = @record{x: int64, y: int64}
  local allocator: PoolAllocator(Object, 2)
  local o: *Object = (@*Object)(allocator:alloc0(#Object))
  assert(allocator.initialized == true)
  assert(o.x == 0)
  o.x = 0xff
  assert(o.x == 0xff)
  allocator:dealloc(o)
  -- must reuse the same free address
  local no: *Object = (@*Object)(allocator:alloc0(#Object))
  assert(no == o and no.x == 0)
  -- last avail memory
  allocator:alloc0(#Object)
  -- should be out of memory
  assert(allocator:alloc0(#Object) == nilptr)
  -- free all
  allocator:deallocall()
  -- realloc
  local i: *int64 = (@*int64)(allocator:realloc0(nilptr, #int64, 0))
  local ri: *int64 = (@*int64)(allocator:realloc0(i, 2*#int64, #int64))
  -- should use the same address
  assert(i == ri)
  -- should deallocate
  ri = (@*int64)(allocator:realloc(ri, 0, 2*#int64))
  assert(ri == nilptr)
end

do -- Heap
  local Allocator = @HeapAllocator(1024)
  local IntVector = @vector(int64, *Allocator)
  local allocator: Allocator
  local va = IntVector.make(&allocator)
  local vb = IntVector.make(&allocator)
  for i=1,32 do
    va:push(1)
    vb:push(2)
  end
  vb:destroy()
  va:destroy()
end

do -- Aligned
  local allocator: AlignedAllocator(GeneralAllocator, 256)
  for i=1,256 do
    local a = allocator:alloc0(1)
    assert((@usize)(a) & 0xff == 0)
    allocator:dealloc(a)
  end
end

print 'allocators OK!'
