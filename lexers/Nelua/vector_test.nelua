require 'vector'

do -- braces initializer
  local vec: vector(integer) = {}
  assert(#vec == 0 and vec:capacity() == 0)
  vec:destroy()
  vec = {1,2,3}
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 2 and vec[2] == 3)
  vec:destroy()
  vec = {4}
  assert(#vec == 1 and vec[0] == 4)
  vec:destroy()
  vec = {}
  assert(#vec == 0)
end

do -- reset and clear
  local vec: vector(integer)
  assert(#vec == 0 and vec:capacity() == 0)
  vec = {1,2,3}
  assert(#vec == 3 and vec:capacity() == 3)
  vec:clear()
  assert(#vec == 0 and vec:capacity() == 3)
  vec:destroy()
  assert(#vec == 0 and vec:capacity() == 0)
end

do -- reserve and resize
  local vec: vector(integer) = {}
  assert(vec:capacity() == 0)
  vec:push(1)
  assert(vec:capacity() == 1)
  vec:reserve(4)
  assert(vec:capacity() == 4)
  vec:resize(2)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 0)
  vec:resize(4)
  assert(#vec == 4 and vec[0] == 1 and vec[1] == 0 and vec[2] == 0 and vec[3] == 0)
  vec:destroy()
end

do -- push and pop
  local vec: vector(integer)
  assert(#vec == 0)
  vec:push(1)
  assert(#vec == 1 and vec[0] == 1 and vec:capacity() == 1)
  vec:push(2)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 2 and vec:capacity() == 2)
  assert(vec:pop() == 2)
  assert(#vec == 1 and vec[0] == 1)
  assert(vec:pop() == 1)
  assert(#vec == 0)
  vec:destroy()
end

do -- remove
  local vec: vector(integer) = {1,2,3,4}
  assert(#vec == 4)
  assert(vec:remove(1) == 2)
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 3 and vec[2] == 4)
  assert(vec:remove(2) == 4)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 3)
  assert(vec:remove(0) == 1)
  assert(#vec == 1 and vec[0] == 3)
  assert(vec:remove(0) == 3)
  assert(#vec == 0)
  vec:destroy()
end

do -- removevalue
  local vec: vector(integer)
  assert(vec:removevalue(0) == false)
  vec = {1,2,3,4}
  assert(#vec == 4)
  assert(vec:removevalue(3) == true)
  assert(#vec == 3 and vec[2] == 4)
  assert(vec:removevalue(3) == false)
  assert(vec:removevalue(1) == true)
  assert(#vec == 2 and vec[0] == 2)
  assert(vec:removevalue(2) == true)
  assert(#vec == 1 and vec[0] == 4)
  assert(vec:removevalue(4) == true)
  assert(#vec == 0)
  assert(vec:removevalue(4) == false)
  vec:destroy()
end

do -- removeif
  local vec: vector(integer) = {1,2,3,4,5,7,8,9}
  vec:removeif(function(x: integer) return x % 2 == 1 end)
  assert(#vec == 3 and vec[0] == 2 and vec[1] == 4 and vec[2] == 8)
  vec:removeif(function(x: integer) return x % 2 == 0 end)
  assert(#vec == 0)
  vec:destroy()
end

do -- insert
  local vec: vector(integer)
  vec:insert(0, 3)
  assert(#vec == 1 and vec[0] == 3)
  vec:insert(0, 1)
  assert(#vec == 2 and vec[0] == 1 and vec[1] == 3)
  vec:insert(2, 4)
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 3 and vec[2] == 4)
  vec:insert(1, 2)
  assert(#vec == 4 and vec[0] == 1 and vec[1] == 2 and vec[2] == 3 and vec[3] == 4)
  vec:destroy()
end

do -- ipairs/mipairs
  local vec: vector(integer) = {1,2,3,4}
  local sum = 0
  for i,v in ipairs(vec) do
    sum = sum + (i+1)*v
  end
  assert(sum == 30)
  sum = 0
  for i,v in mipairs(vec) do
    sum = sum + (i+1)*$v
    $v = 0
  end
  assert(sum == 30)
  sum = 0
  for i,v in ipairs(vec) do
    sum = sum + (i+1)*v
  end
  assert(sum == 0)
  vec:destroy()
end

do -- pairs/mpairs
  local vec: vector(integer) = {1,2,3,4}
  local sum: integer = 0
  for i,v in pairs(vec) do
    sum = sum + (i+1)*v
  end
  assert(sum == 30)
  sum = 0
  for i,v in mpairs(vec) do
    sum = sum + (i+1)*$v
    $v = 0
  end
  assert(sum == 30)
  sum = 0
  for i,v in pairs(vec) do
    sum = sum + (i+1)*v
  end
  assert(sum == 0)
  vec:destroy()
end

do -- next/mnext
  local vec: vector(integer) = {1,2,3,4}
  local sum: integer = 0
  for i,v in next,vec,-1 do
    sum = sum + (i+1)*v
  end
  assert(sum == 30)
  sum = 0
  for i,v in mnext,vec,-1 do
    sum = sum + (i+1)*$v
    $v = 0
  end
  assert(sum == 30)
  sum = 0
  for i,v in next,vec,-1 do
    sum = sum + (i+1)*v
  end
  assert(sum == 0)
  vec:destroy()
end

do -- implict conversion to span
  local vec: vector(integer) = {1,2,3,4}
  local spn: span(integer) = vec
  assert(#spn == 4 and spn[0] == 1 and spn[3] == 4)
  vec:destroy()
end

do -- copy
  local a: vector(integer) = {1, 2, 3, 4}
  local b: vector(integer)
  b = a:copy()
  a[0] = 5
  assert(a[0] == 5 and #a == 4 and b[0] == 1 and #b == 4)
  a:destroy()
  b:destroy()
end

require 'allocators.general'
do -- custom allocator
  local vec: vector(integer, GeneralAllocator) = {1,2,3}
  assert(#vec == 3 and vec[0] == 1 and vec[1] == 2 and vec[2] == 3)
  vec:destroy()
end

print 'vector OK!'
