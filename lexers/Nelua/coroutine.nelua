--[[
The coroutine library provides functions to manipulate coroutines.

A coroutine represents an independent "green" thread of execution.
Unlike threads in multithread systems, however,
a coroutine only suspends its execution by explicitly calling a yield function.

You create a coroutine by calling `coroutine.create`.
Its sole argument is a function that is the body function of the coroutine.
The `create` function only creates a new coroutine and returns a handle to it, it does not start the coroutine.

You execute a coroutine by calling `coroutine.resume`.
When calling a resume function the coroutine starts its execution by calling its body function.
After the coroutine starts running, it runs until it terminates or yields.

A coroutine yields by calling `coroutine.yield`.
When a coroutine yields, the corresponding resume returns immediately,
even if the yield happens inside nested function calls (that is, not in the main function).
In the case of a yield, resume also returns true.
The next time you resume the same coroutine, it continues its execution from the point where it yielded.

At the moment Nelua does not support variable arguments in `yield` and `resume` (unlikely Lua).
To pass values between resume and yield, you must use `coroutine.push` and `coroutine.pop`
with the input and output types known at compile-time.
]]

-- When the GC is enabled, we want to scan coroutines stack memory.
## if not pragmas.nogc then
require 'allocators.gc'
## end

local minicoro: type = require 'detail.minicoro'

-- Fake coroutine, used to indicate the main thread.
local main_coro: minicoro.Coro <nogcscan>

-- The coroutine handle.
global coroutine: type = @*minicoro.Coro

local function_concept: type = #[concept(function(x) return x.type.is_function end)]#

--[[
Destroy the coroutine `co`, freeing its stack memory and resources.

Note that this is only needed to be called when the GC is disabled.

*Remarks*: Destroying a coroutine before `"dead"` state will not execute its defer statements.
]]
function coroutine.destroy(co: coroutine): (boolean, string)
  ## if not pragmas.nogc then
  gc:unregister(co)
  ## end
  local res: minicoro.Result = minicoro.destroy(co)
  if res ~= minicoro.Result.MCO_SUCCESS then return false, (@string)(minicoro.result_description(res)) end
  return true, (@string){}
end

-- Effectively the same as `destroy`, called when a to-be-closed variable goes out of scope.
function coroutine:__close(): void
  self:destroy()
end

-- Called when the coroutine collected by the GC.
local function coroutine_gc(co: pointer, userdata: pointer): void
  local co: coroutine = (@coroutine)(co)
  co:destroy()
end

--[[
Returns a new coroutine with body function `f`.
The function allocates stack memory and resources for the coroutine.
It only creates a new coroutine and returns a handle to it, it does not start the coroutine.
]]
function coroutine.create(f: function_concept): (coroutine, string)
  local F: type = #[f.type]#
  local function coroutine_main(co: *minicoro.Coro): void
    -- Meta program to use values from last `push` as `f` arguments and to `push` returns from `f`.
    local f: F = (@F)(minicoro.get_user_data(co))
    ## local argnodes = {}
    ## for i=#f.type.argtypes,1,-1 do
      ## local argtype = f.type.argtypes[i]
      ## local argname = 'a'..i
      local #|argname|#: #[argtype]#
      if minicoro.pop(co, &#|argname|#, #@#[argtype]#) ~= minicoro.Result.MCO_SUCCESS then
        panic 'failed to pop a coroutine body argument'
      end
      ## argnodes[i] = aster.Id{argname}
    ## end
    ## local retnodes = {}
    ## for i,rettype in ipairs(f.type.rettypes) do
      ## local retname = 'r'..i
      local #|'r'..i|#: #[rettype]#
      ## retnodes[i] = aster.Id{retname}
    ## end
    ##[[
    local callnode = aster.Call{argnodes, aster.Id{'f'}}
    if #retnodes > 0 then
      callnode = aster.Assign{retnodes, {callnode}}
    end
    ]]
    ## inject_astnode(callnode)
    ## for i,rettype in ipairs(f.type.rettypes) do
      ## local retname = 'r'..i
      if minicoro.push(co, &#|retname|#, #@#[rettype]#) ~= minicoro.Result.MCO_SUCCESS then
        panic 'failed to push a coroutine body return'
      end
    ## end
  end
  local desc: minicoro.Desc = minicoro.desc_init(coroutine_main, 0)
  desc.user_data = (@pointer)(f)
  local co: coroutine
  local res: minicoro.Result = minicoro.create(&co, &desc)
  if res ~= minicoro.Result.MCO_SUCCESS then return (@coroutine)(), (@string)(minicoro.result_description(res)) end
  -- Mark the coroutine stack memory to scan in the garbage collector
  ## if not pragmas.nogc then
  gc:register(co, desc.coro_size, 0, coroutine_gc, nilptr)
  ## end
  return co, (@string){}
end

--[[
Pushes multiple values into the coroutine `co` storage, returning `true` on success.

- The values can be received in the next `coroutine.pop` or in the body function arguments (when coroutine starts).
- In case of an error returns `false` plus the error message.
- The user is responsible to always use the right types and push/pop order and count.
]]
function coroutine.push(co: coroutine, ...: varargs): (boolean, string)
  local bytes_pushed: csize = 0
  ## for i=1,select('#', ...) do
    ## local argnode = select(i, ...)
    ## local argtype = argnode.attr.type
    local res: minicoro.Result = minicoro.push(co, &#[argnode]#, #(#[argtype]#))
    if res ~= minicoro.Result.MCO_SUCCESS then
      minicoro.pop(co, nilptr, bytes_pushed)
      return false, (@string)(minicoro.result_description(res))
    end
    bytes_pushed = bytes_pushed + #(#[argtype]#)
  ## end
  return true, (@string){}
end

--[[
Pops multiple values from the coroutine `co` storage, returning `true` on success.

- Only pointers to values are expected in extra arguments,
and they should follow the same order of the last `coroutine.push`.
- The retrieved values was either set by the last `coroutine.pop` or returned by its body function (when coroutine finishes).
- In case of an error, return `false` plus the error message, and the values may not be set.
- The user is responsible to always use the right types and push/pop order and count.
]]
function coroutine.pop(co: coroutine, ...: varargs): (boolean, string)
  ## for i=select('#', ...),1,-1 do
    ##[[
    local argnode = select(i, ...)
    local argtype = argnode.attr.type
    static_assert(argtype.is_pointer and not argtype.is_generic_pointer,
      "expected only pointers in extra arguments but got type '%s'", argtype)
    local argsubtype = argtype.subtype
    ]]
    local res: minicoro.Result = minicoro.pop(co, #[argnode]#, #(#[argsubtype]#))
    if res ~= minicoro.Result.MCO_SUCCESS then
      return false, (@string)(minicoro.result_description(res))
    end
  ## end
  return true, (@string){}
end

--[[
Checks whether the coroutine `co` can yield.

A coroutine is yieldable if it isn't the main thread.
]]
function coroutine.isyieldable(co: coroutine): boolean
  return co ~= nilptr and co ~= &main_coro
end

--[[
Starts or continues the execution of the coroutine `co`.

- The first time you resume a coroutine, it starts running its body function.
- Extra arguments `...` are pushed before resuming.
- If the coroutine has yielded, resume continues it.
- If the coroutine runs without any errors, resume returns `true` plus an empty error message.
- If there is any error, resume returns `false` plus the error message.
- Values passed to the last yield should be retrieved with `coroutine.pop`.
]]
function coroutine.resume(co: coroutine, ...: varargs): (boolean, string) <noinline>
  ## if select('#', ...) > 0 then
  local ok: boolean, err: string = coroutine.push(co, ...)
  if not ok then return false, err end
  ## end
  ## if not pragmas.nogc then
  local ismain: boolean = minicoro.running() == nilptr
  if ismain then -- switching from main, must save the main stack in the GC
    gc:setstacktop()
  end
  ## end
  local res: minicoro.Result = minicoro.resume(co) -- continue the coroutine
  ## if not pragmas.nogc then
  if ismain then -- restore the previous stack top for scanning in the GC
    gc:setstacktop(0)
  end
  ## end
  if res ~= minicoro.Result.MCO_SUCCESS then
    return false, (@string)(minicoro.result_description(res))
  end
  return true, (@string){}
end

--[[
Creates and immediately starts a new coroutine with body function `f`.

Extra arguments are passed to the function `f` arguments.
This is effectively the same as calling `coroutine.create` and then `coroutine.resume`.
]]
function coroutine.spawn(f: function_concept, ...: varargs): (coroutine, string)
  local co: coroutine = coroutine.create(f)
  local ok: boolean, err: string = coroutine.resume(co, ...)
  if not ok then return (@coroutine)(), err end
  return co, (@string){}
end

--[[
Suspends the execution of the running coroutine.

- On failure raises an error.
- Extra arguments `...` are pushed before yielding.
- Values passed to last resume should be retrieved with `coroutine.pop`.
]]
function coroutine.yield(...: varargs): (boolean, string)
  local co: coroutine = minicoro.running()
  ## if select('#', ...) > 0 then
  local ok: boolean, err: string = coroutine.push(co, ...)
  if not ok then return ok, err end
  ## end
  local res: minicoro.Result = minicoro.yield(co)
  if res == minicoro.Result.MCO_STACK_OVERFLOW then
    -- can't recover from stack overflow, because stack is corrupted
    panic('coroutine stack overflow')
  end
  if res ~= minicoro.Result.MCO_SUCCESS then return false, minicoro.result_description(res) end
  return true, (@string){}
end

-- Returns the running coroutine plus a boolean that is true when the running coroutine is the main one.
function coroutine.running(): (coroutine, boolean)
  local co: coroutine = minicoro.running()
  if co == nilptr then
    return &main_coro, true
  else
    return co, false
  end
end

--[[
Returns the status of the coroutine `co`.

The status string can be any of the following:

* `"running"`, if the coroutine is running (that is, it is the one that called status).
* `"suspended"`, if the coroutine is suspended in a call to yield, or if it has not started running yet.
* `"normal"` if the coroutine is active but not running (that is, it has resumed another coroutine).
* `"dead"` if the coroutine has finished its body function, or if it has been destroyed.
]]
function coroutine.status(co: coroutine): string
  if co == nilptr then
    return 'dead'
  elseif co == &main_coro then -- Main coroutine.
    if minicoro.running() == nilptr then
      return 'running'
    else
      return 'normal'
    end
  end
  local status: minicoro.State = minicoro.status(co)
  if status == minicoro.State.MCO_SUSPENDED then
    return 'suspended'
  elseif status == minicoro.State.MCO_RUNNING then
    return 'running'
  elseif status == minicoro.State.MCO_NORMAL then
    return 'normal'
  else
    return 'dead'
  end
end

-- TODO: coroutine.wrap

return coroutine
