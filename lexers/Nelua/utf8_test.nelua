require 'utf8'

do -- utf8.charpattern
  local b: boolean, s: sequence(string)
  b, s = string.matchview('A', utf8.charpattern); assert(not not b and #s == 1); s:destroy()
  b, s = string.matchview('\u{ff}', utf8.charpattern); assert(not not b and #s == 1); s:destroy()
end

do -- utf8.char
  local s: string
  s = utf8.char(); assert(s == '') s:destroy()
  s = utf8.char(0x41); assert(s == 'A') s:destroy()
  s = utf8.char(0xe3); assert(s == '\u{e3}') s:destroy()
  s = utf8.char(0xff); assert(s == '\u{ff}') s:destroy()
  s = utf8.char(0xe3,0xff); assert(s == '\u{e3}\u{ff}') s:destroy()
  s = utf8.char(0x41,0xe3,0xff); assert(s == 'A\u{e3}\u{ff}') s:destroy()
  s = utf8.char(0, 97, 98, 99, 1); assert(s == "\0abc\1") s:destroy()
  s = utf8.char(0x7fffffff); assert(s == '\xFD\xBF\xBF\xBF\xBF\xBF') s:destroy()
end

do -- utf8.codes
  local i: isize = 1
  for p: isize, c: uint32 in utf8.codes('A\u{e3}\u{ff}0') do
    if i == 1 then
      assert(p == 1 and c == 0x41)
    elseif i == 2 then
      assert(p == 2 and c == 0xe3)
    elseif i == 3 then
      assert(p == 4 and c == 0xff)
    elseif i == 4 then
      assert(p == 6 and c == 0x30)
    end
    i = i + 1
  end
end

do -- utf8.codepoint
  assert(utf8.codepoint('A', 1) == 0x41)
  assert(utf8.codepoint('A', -1) == 0x41)
  assert(utf8.codepoint('\u{e3}', 1) == 0xe3)
  assert(utf8.codepoint('A\u{e3}\u{ff}B',-1) == 0x42)
  assert(utf8.codepoint('A\u{e3}\u{ff}B', 1) == 0x41)
  assert(utf8.codepoint('A\u{e3}\u{ff}B', 2) == 0xe3)
  assert(utf8.codepoint('A\u{e3}\u{ff}B', 4) == 0xff)
  assert(utf8.codepoint('A\u{e3}\u{ff}B', 6) == 0x42)
  assert(utf8.codepoint("\u{D7FF}") == 0xD800 - 1)
  assert(utf8.codepoint("\u{E000}") == 0xDFFF + 1)
  assert(utf8.codepoint("\u{D800}", 1, true) == 0xD800)
  assert(utf8.codepoint("\u{DFFF}", 1, true) == 0xDFFF)
  assert(utf8.codepoint("\u{10FFFF}", 1, true) == 0x10FFFF)
  -- the next line is disabled so the test pass on Lua 5.3 (but works fine in Lua 5.4)
  -- assert(utf8.codepoint("\u{7FFFFFFF}", 1, true) == 0x7FFFFFFF)
end

do -- utf8.offset
  assert(utf8.offset('', -1) == -1)
  assert(utf8.offset('', 0) == 1)
  assert(utf8.offset('', 1) == 1)
  assert(utf8.offset('', 2) == -1)

  assert(utf8.offset('a', -2) == -1)
  assert(utf8.offset('a', -1) == 1)
  assert(utf8.offset('a', 0) == 1)
  assert(utf8.offset('a', 1) == 1)
  assert(utf8.offset('a', 2) == 2)
  assert(utf8.offset('a', 3) == -1)

  assert(utf8.offset('alo', -4) == -1)
  assert(utf8.offset('alo', -3) == 1)
  assert(utf8.offset('alo', -2) == 2)
  assert(utf8.offset('alo', -1) == 3)
  assert(utf8.offset('alo', 0) == 1)
  assert(utf8.offset('alo', 1) == 1)
  assert(utf8.offset('alo', 2) == 2)
  assert(utf8.offset('alo', 3) == 3)
  assert(utf8.offset('alo', 4) == 4)
  assert(utf8.offset('alo', 5) == -1)

  assert(utf8.offset('\u{e3}\u{ff}a', -4) == -1)
  assert(utf8.offset('\u{e3}\u{ff}a', -3) == 1)
  assert(utf8.offset('\u{e3}\u{ff}a', -2) == 3)
  assert(utf8.offset('\u{e3}\u{ff}a', -1) == 5)
  assert(utf8.offset('\u{e3}\u{ff}a', 0) == 1)
  assert(utf8.offset('\u{e3}\u{ff}a', 1) == 1)
  assert(utf8.offset('\u{e3}\u{ff}a', 2) == 3)
  assert(utf8.offset('\u{e3}\u{ff}a', 3) == 5)
  assert(utf8.offset('\u{e3}\u{ff}a', 4) == 6)
  assert(utf8.offset('\u{e3}\u{ff}a', 5) == -1)
end

do -- utf8.len
  assert(utf8.len('') == 0)
  assert(utf8.len('A') == 1)
  assert(utf8.len('AB') == 2)
  assert(utf8.len('A\u{e3}\u{ff}0') == 4)
  assert(utf8.len('hello world\n') == #'hello world\n')

  -- invalid position
  local a: isize, b: isize
  a, b = utf8.len("abc\xE3def") assert(a == -1 and b == 4)
  a, b = utf8.len("\xF4\x9F\xBF") assert(a == -1 and b == 1)
  a, b = utf8.len("\xF4\x9F\xBF\xBF") assert(a == -1 and b == 1)
end

do -- check invalid UTF-8 sequences
  -- UTF-8 representation for 0x11ffff (value out of valid range)
  assert(utf8.len('\xF4\x9F\xBF\xBF') == -1)

  -- surrogates
  assert(utf8.len("\u{D800}") == -1)
  assert(utf8.len("\u{DFFF}") == -1)

  -- overlong sequences
  assert(utf8.len("\xC0\x80") == -1)          -- zero
  assert(utf8.len("\xC1\xBF") == -1)          -- 0x7F (should be coded in 1 byte)
  assert(utf8.len("\xE0\x9F\xBF") == -1)      -- 0x7FF (should be coded in 2 bytes)
  assert(utf8.len("\xF0\x8F\xBF\xBF") == -1)  -- 0xFFFF (should be coded in 3 bytes)

  -- invalid bytes
  assert(utf8.len("\x80") == -1)  -- continuation byte
  assert(utf8.len("\xBF") == -1)  -- continuation byte
  assert(utf8.len("\xFE") == -1)  -- invalid byte
  assert(utf8.len("\xFF") == -1)  -- invalid byte
end

print 'utf8 OK!'
