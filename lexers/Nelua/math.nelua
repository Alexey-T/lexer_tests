--[[
The math library provides basic mathematical functions.
]]

-- Namespace for math module.
global math: type = @record{}

-- Concepts used by math functions.
local an_scalar: type = #[concept(function(x) return x.type.is_scalar end)]#
local an_optional_scalar: type = #[concept(function(x) return x.type.is_scalar or x.type.is_niltype end)]#
local an_optional_integral: type = #[concept(function(x) return x.type.is_integral or x.type.is_niltype end)]#

-- Compile time utilities.
##[[
local function choose_float_type(x)
  local type
  if x.type.is_float then
    type = x.type
  else
    type = primtypes.number
  end
  if type.is_cdouble and type.size == 4 then -- demote (happens on AVR)
    type = primtypes.float32
  end
  return type
end

local function choose_float_types(x, y)
  local ltype = choose_float_type(x)
  if y then
    local rtype = choose_float_type(y)
    return ltype:promote_type(rtype)
  else
    return ltype
  end
end

local function choose_cmath_func(name, x, y)
  local ftype = choose_float_types(x, y)
  local incname = '<math.h>'
  local fname
  if ftype.is_cfloat then
    fname = name..'f'
  elseif ftype.is_clongdouble then
    fname = name..'l'
  elseif ftype.is_float128 then
    fname = name..'q'
    incname = '<quadmath.h>'
    linklib 'quadmath'
  else
    fname = name
  end
  return ftype, fname, incname
end
]]

## local function import_cmath_func1(name, x)
  ## local ftype, fname, incname = choose_cmath_func(name, x)
  local T: type = #[ftype]#
  local function #|name|#(x: T): T <cimport(#[fname]#),cinclude(#[incname]#),nosideeffect> end
## end

## local function import_cmath_func1_int(name, x)
  ## local ftype, fname, incname = choose_cmath_func(name, x)
  local T: type = #[ftype]#
  local function #|name|#(x: T): cint <cimport(#[fname]#),cinclude(#[incname]#),nosideeffect> end
## end

## local function import_cmath_func2(name, x, y)
  ## local ftype, fname, incname = choose_cmath_func(name, x, y)
  local T: type = #[ftype]#
  local function #|name|#(x: T, y: T): T <cimport(#[fname]#),cinclude(#[incname]#),nosideeffect> end
## end

--[[
Returns the absolute value of `x`, that is, the maximum value between `x` and `-x`.

The argument type is always preserved.
]]
function math.abs(x: an_scalar): auto <inline,nosideeffect>
  x = x < 0 and -x or x
  return x
end

-- Returns the largest integral value less than or equal to `x`.
function math.floor(x: an_scalar): auto <inline,nosideeffect>
  ## if x.type.is_float then
    ## import_cmath_func1('floor', x)
    return floor(x)
  ## else
    return x
  ## end
end

-- Like `math.floor`, but the result is always converted to an integer.
function math.ifloor(x: an_scalar): integer <inline,nosideeffect>
  return math.floor(x)
end

-- Returns the smallest integral value greater than or equal to `x`.
function math.ceil(x: an_scalar): auto <inline,nosideeffect>
  ## if x.type.is_float then
    ## import_cmath_func1('ceil', x)
    return ceil(x)
  ## else
    return x
  ## end
end

-- Like `math.ceil`, but the result is always converted to an integer.
function math.iceil(x: an_scalar): integer <inline,nosideeffect>
  return math.ceil(x)
end

--[[
Returns the rounded value of `x` towards the nearest integer.
Halfway cases are rounded away from zero.
]]
function math.round(x: an_scalar): auto <inline,nosideeffect>
  ## if x.type.is_float then
    ## import_cmath_func1('round', x)
    return round(x)
  ## else
    return x
  ## end
end

-- Like `math.round`, but the result is always converted to an integer.
function math.iround(x: an_scalar): integer <inline,nosideeffect>
  return math.round(x)
end

-- Returns the rounded value of `x` towards zero.
function math.trunc(x: an_scalar): auto <inline,nosideeffect>
  ## if x.type.is_float then
    ## import_cmath_func1('trunc', x)
    return trunc(x)
  ## else
    return x
  ## end
end

-- Like `math.trunc`, but the result is always converted to an integer.
function math.itrunc(x: an_scalar): integer <inline,nosideeffect>
  return math.trunc(x)
end

--[[
Returns the square root of `x`.
You can also use the expression `x^0.5` to compute this value.
]]
function math.sqrt(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('sqrt', x)
  return sqrt(x)
end

--[[
Returns the cubic root of `x`.
You can also use the expression `x^(1/3)` to compute this value.
]]
function math.cbrt(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('cbrt', x)
  return cbrt(x)
end

-- Returns the value of `e^x` (where `e` is the base of natural logarithms).
function math.exp(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('exp', x)
  return exp(x)
end

--[[
Returns the value of `2^x`.
You can also use the expression `2^x` to compute this value.
]]
function math.exp2(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('exp2', x)
  return exp2(x)
end

--[[
Returns `x^y`.
You can also use the expression `x^y` to compute this value.
]]
function math.pow(x: an_scalar, y: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func2('pow', x, y)
  return pow(x, y)
end

--[[
Returns the logarithm of `x` in the given `base`.
The default for `base` is *e*, so that the function returns the natural logarithm of `x`.
]]
function math.log(x: an_scalar, base: an_optional_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('log', x)
  ## if not base.type.is_niltype then
    local r: #[choose_float_type(x)]#
    ## if not ccinfo.is_avr then -- AVR has no log2
      if base == 2 then
        ## import_cmath_func1('log2', x)
        r = log2(x)
        return r
      end
    ## end
    if base == 10 then
      ## import_cmath_func1('log10', x)
      r = log10(x)
    else
      r = log(x) / log(base)
    end
    return r
  ## else
    return log(x)
  ## end
end

-- Returns the cosine of `x` (assumed to be in radians).
function math.cos(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('cos', x)
  return cos(x)
end

-- Returns the sine of `x` (assumed to be in radians).
function math.sin(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('sin', x)
  return sin(x)
end

-- Returns the tangent of `x` (assumed to be in radians).
function math.tan(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('tan', x)
  return tan(x)
end

-- Returns the arc cosine of `x` (in radians).
function math.acos(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('acos', x)
  return acos(x)
end

-- Returns the arc sine of `x` (in radians).
function math.asin(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('asin', x)
  return asin(x)
end

--[[
Returns the arc tangent of `y/x` (in radians),
but uses the signs of both arguments to find the quadrant of the result.
It also handles correctly the case of `x` being zero.

The default value for `x` is `1`, so that the call `math.atan(y)` returns the arc tangent of `y`.
]]
function math.atan(y: an_scalar, x: an_optional_scalar): auto <inline,nosideeffect>
  ## if not x.type.is_niltype then
    ## import_cmath_func2('atan2', y, x)
    return atan2(y, x)
  ## else
    ## import_cmath_func1('atan', x)
    return atan(y)
  ## end
end

--[[
Returns the arc tangent of `y/x` (in radians),
but uses the signs of both arguments to find the quadrant of the result.
It also handles correctly the case of `x` being zero.
]]
function math.atan2(y: an_scalar, x: an_optional_scalar): auto <inline,nosideeffect>
  ## import_cmath_func2('atan2', y, x)
  return atan2(y, x)
end

-- Returns the hyperbolic cosine of `x`.
function math.cosh(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('cosh', x)
  return cosh(x)
end

-- Returns the hyperbolic sine of `x`.
function math.sinh(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('sinh', x)
  return sinh(x)
end

-- Returns the hyperbolic tangent of `x`.
function math.tanh(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('tanh', x)
  return tanh(x)
end

-- Returns the base-10 logarithm of `x`.
function math.log10(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('log10', x)
  return log10(x)
end

-- Returns the base-2 logarithm of `x`.
function math.log2(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('log2', x)
  return log2(x)
end

-- Returns the inverse hyperbolic cosine of `x`.
function math.acosh(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('acosh', x)
  return acosh(x)
end

-- Returns the inverse hyperbolic sine of `x`.
function math.asinh(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('asinh', x)
  return asinh(x)
end

-- Returns the inverse hyperbolic tangent of `x`.
function math.atanh(x: an_scalar): auto <inline,nosideeffect>
  ## import_cmath_func1('atanh', x)
  return atanh(x)
end

-- Converts the angle `x` from radians to degrees.
function math.deg(x: an_scalar): auto <inline,nosideeffect>
  return x * (#[choose_float_type(x)]#)(#[180.0/ math.pi]#)
end

-- Converts the angle `x` from degrees to radians.
function math.rad(x: an_scalar): auto <inline,nosideeffect>
  return x * (#[choose_float_type(x)]#)(#[math.pi / 180.0]#)
end

--[[
Returns the sign of `x`, that is:
* `-1` if `x < 0`
* `0` if `x == 0`
* `1` if `x > 0`
]]
function math.sign(x: an_scalar): auto <inline,nosideeffect>
  x = x > 0 and 1 or x
  x = x < 0 and -1 or x
  return x
end

--[[
Returns the fractional part of `x`.

Computed as `x - math.floor(x)`.
]]
function math.fract(x: an_scalar): auto <inline,nosideeffect>
  return x - math.floor(x)
end

--[[
Returns the modulo operation of `x` by `y`, rounded towards minus infinity.

This is equivalent to `x % y`, but faster and subject to rounding errors.
It's computed as `x - math.floor(x / y) * y`.
]]
function math.mod(x: an_scalar, y: an_scalar): auto <inline,nosideeffect>
  ## if x.type.is_float or y.type.is_float then
  return x - math.floor(x / y) * y
  ## else
  return x % y
  ## end
end

--[[
Returns the integral part of `x` and the fractional part of `x`.
Its second result is always a float.
]]
function math.modf(x: an_scalar): (auto, auto) <inline,nosideeffect>
  ## local ftype, fname, incname = choose_cmath_func('modf', x)
  local T: type = #[ftype]#
  local function modf(x: T, y: *T): T <cimport(#[fname]#),cinclude(#[incname]#),nosideeffect> end
  local i: T
  local f: auto = modf(x, &i)
  return i, f
end

--[[
Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
The result can either be an integer or a float depending on the arguments.
]]
function math.fmod(x: an_scalar, y: an_scalar): auto <inline,nosideeffect>
  ## if x.type.is_integral and y.type.is_integral then
    local z: #[x.type]# <noinit>
    ## cemit '  z = x % y;'
    return z
  ## else
    ## import_cmath_func2('fmod', x, y)
    return fmod(x, y)
  ## end
end

--[[
Returns `m` and `e` such that `x = m*(2^e)`,
`e` is an integer and the absolute value of `m` is in the range [0.5, 1) or zero (when `x` is zero).
]]
function math.frexp(x: an_scalar): (auto, int32) <inline,nosideeffect>
  ## local ftype, fname, incname = choose_cmath_func('frexp', x)
  local T: type = #[ftype]#
  local function frexp(x: T, exp: *cint): T <cimport(#[fname]#),cinclude(#[incname]#),nosideeffect> end
  local exp: cint
  local n: T = frexp(x, &exp)
  return n, (@int32)(exp)
end

-- Returns `m*(2^e)`, that is, `m` multiplied by an integral power of 2.
function math.ldexp(m: an_scalar, e: int32): auto <inline,nosideeffect>
  ## local ftype, fname, incname = choose_cmath_func('ldexp', m)
  local T: type = #[ftype]#
  local function ldexp(x: T, exp: cint): T <cimport(#[fname]#),cinclude(#[incname]#),nosideeffect> end
  return ldexp(m, (@int32)(e))
end

-- Returns the argument with the minimum value, according to the operator `<`.
function math.min(...: varargs): auto <inline,nosideeffect>
  ## local nargs = select('#', ...)
  ## static_assert(nargs > 0, 'expected at least one argument')
  ## if nargs == 1 then
    return #[select(1, ...)]#
  ## elseif nargs == 2 then
    ## local x, y = select(1, ...), select(2, ...)
    return #[x]# < #[y]# and #[x]# or #[y]#
  ## else
    local res = #[select(1, ...)]#
    ## for i=2,nargs do
      ## local v = select(i, ...)
      if #[v]# < res then
        res = #[v]#
      end
    ## end
    return res
  ## end
end

-- Returns the argument with the maximum value, according to the operator `<`.
function math.max(...: varargs): auto <inline,nosideeffect>
  ## local nargs = select('#', ...)
  ## static_assert(nargs > 0, 'expected at least one argument')
  ## if nargs == 1 then
    return #[select(1, ...)]#
  ## elseif nargs == 2 then
    ## local x, y = select(1, ...), select(2, ...)
    return #[y]# < #[x]# and #[x]# or #[y]#
  ## else
    local res = #[select(1, ...)]#
    ## for i=2,nargs do
      ## local v = select(i, ...)
      if res < #[v]# then
        res = #[v]#
      end
    ## end
    return res
  ## end
end

-- Returns the value of `x` clamped between `min` and `max`.
function math.clamp(x: an_scalar, min: an_scalar, max: an_scalar): auto <inline,nosideeffect>
  x = x < min and min or x
  x = x > max and max or x
  return x
end

--[[
Returns a boolean, `true` if and only if integer `m` is below integer `n`
when they are compared as unsigned integers.
]]
function math.ult(m: an_scalar, n: an_scalar): boolean <inline>
  ## if m.type.is_integral and n.type.is_integral then
    return (@uinteger)(m) < (@uinteger)(n)
  ## elseif x.type.is_float then
    local mi: integer, ni: integer = (@integer)(m), (@integer)(n)
    if likely(mi == m and ni == n) then
      return (@uinteger)(mi) < (@uinteger)(ni)
    else
      error('m or n has no integer representation')
    end
  ## end
end

-- If the value `x` is convertible to an integer, returns that integer. Otherwise, returns `nil`.
function math.tointeger(x: an_scalar): auto <inline,nosideeffect>
  ## if x.type == primtypes.integer then
    return x
  ## elseif x.type.is_scalar then
    local r: integer = (@integer)(x)
    if likely(x == r) then
      return r
    else
      return nil
    end
  ## else
    return nil
  ## end
end

-- Returns `"integer"` if `x` is an integer, "float" if `x` is a float, or fail if `x` is not a number.
function math.type(x: auto): auto <inline,nosideeffect>
  ## if x.type.is_float then
    return 'float'
  ## elseif x.type.is_integral then
    return 'integer'
  ## else
    return nil
  ## end
end

local Xoshiro256: type = require 'detail.xoshiro256'

-- Default initialization for the pseudo random generator
local default_random: Xoshiro256 = {state={
  0x65CE039BAEBE74B4, 0x4911ADA153B51EEF, 0xFB71FBB497C00950, 0xF83CCF6AC1B74755
}}


--[[
When called with at least one argument,
the integer parameters `x` and `y` are joined into a 128-bit seed that is used
to reinitialize the pseudo-random generator.
Equal seeds produce equal sequences of numbers. The default for `y` is zero.

When called with no arguments, generates a seed with a weak attempt for randomness.

This function returns the two seed components that were effectively used,
so that setting them again repeats the sequence.

To ensure a required level of randomness to the initial state
(or contrarily, to have a deterministic sequence, for instance when debugging a program),
you should call `math.randomseed` with explicit arguments.
]]
function math.randomseed(x: an_optional_integral, y: an_optional_integral): (integer, integer)
  local random_buf: [2]uint64 <noinit>
  ## if x.type.is_niltype and y.type.is_niltype then
    ## if ccinfo.is_wasi then
      local function __wasi_random_get(buf: *uint8, size: culong): uint16 <cimport,cinclude'<wasi/api.h>'> end
      __wasi_random_get((@*uint8)(&random_buf), 16)
    ## elseif ccinfo.is_emscripten then
      local function emscripten_random(): float32 <cimport,cinclude'<emscripten.h>'> end
      local random_floats: *[4]float32 = (@*[4]float32)(&random_buf)
      random_floats[0] = emscripten_random()
      random_floats[1] = emscripten_random()
      random_floats[2] = emscripten_random()
      random_floats[3] = emscripten_random()
    ## else
      local function time(tloc: *ctime_t): ctime_t <cimport,cinclude'<time.h>'> end
      random_buf[0] = (@uint64)(time(nilptr))
      random_buf[1] = (@usize)(&random_buf)
    ## end
  ## elseif y.type.is_niltype then
    random_buf[0] = (@uint64)(x)
    random_buf[1] = 0
  ## else
    random_buf[0] = (@uint64)(x)
    random_buf[1] = (@uint64)(y)
  ## end
  local ix: integer, iy: integer = (@integer)(random_buf[0]), (@integer)(random_buf[1])
  default_random:seed((@uint64)(ix), (@uint64)(iy))
  return ix, iy
end

--[[
When called without arguments, returns a pseudo-random float with uniform distribution in the range [`0`,`1`).
When called with two integers `m ` and `n`, returns a pseudo-random integer with uniform distribution in the range [`m`, `n`].

The call `math.random(n)`, for a positive `n`, is equivalent to `math.random(1,n)`.
The call `math.random(0)` produces an integer with all bits (pseudo)random.

This function uses an algorithm based on *xoshiro256* to produce pseudo-random 64-bit integers,
which are the results of calls with argument 0.
Other results (ranges and floats) are unbiased extracted from these integers.

Its pseudo-random generator is initialized with the equivalent of a call to `math.randomseed` with no arguments,
so that `math.random` should generate different sequences of results each time the program runs.
]]
function math.random(m: an_optional_scalar, n: an_optional_scalar): auto
  ## if not m.type.is_niltype then
    ## if not n.type.is_niltype then
    local low: integer = (@integer)(m)
    local high: integer = (@integer)(n)
    check(low == m and high == n, "number has no integer representation")
    ## else
    local low: integer <comptime> = 1
    local high: integer = (@integer)(m)
    check(high == m, "number has no integer representation")
    if high == 0 then
      return (@integer)(default_random:nextrand())
    end
    ## end
    check(low <= high, "interval is empty")
    return (@integer)(default_random:randomuint((@uint64)(high) - (@uint64)(low)) + (@uint64)(low))
  ## else
    return default_random:randomfloat()
  ## end
end

-- Returns true if value `x` is a NaN (not a number) floating point number.
function math.isnan(x: an_scalar): boolean
  ## if x.type.is_float then
    if x ~= x then return true end -- early check, NaN cannot be equal to itself
    --[[
    Arbitrary way to check NaN without relying much on float format.
    C99 `isnan` is intentionally not used here because it doesn't work under `-ffast-math`
    while this method should work.
    Note that it's fine to downcast to float32 just for NaN checking.
    Also <volatile> must be used so the code is not optimized outwith '-ffast-math' on Clang.
    ]]
    local n: auto <volatile> = x
    local UF2I: type = @union{f: float32, i: uint32}
    local pinf: UF2I = {f=#[math.huge]#}
    local ninf: UF2I = {f=#[-math.huge]#}
    local ux: UF2I = {f=n}
    return (ux.i & ninf.i == ninf.i and ux.i ~= ninf.i) or -- negative nan
           (ux.i & pinf.i == pinf.i and ux.i ~= pinf.i and ux.i ~= ninf.i) -- positive nan
  ## else
    return false
  ## end
end

-- Returns true if value `x` is an infinite floating point number.
function math.isinf(x: an_scalar): boolean
  ## if x.type.is_float then
    return x + x == x and x ~= 0
  ## else
    return false
  ## end
end

-- Returns true if value `x` is a finite floating point number (neither NaN or Inf).
function math.isfinite(x: an_scalar): boolean
  return not math.isnan(x) and not math.isinf(x)
end

-- Float value of PI.
global math.pi: number <comptime> = #[math.pi]#

-- Float value greater than any other numeric value (infinite).
global math.huge: number <comptime> = #[math.huge]#

-- An integer with the minimum value for an integer.
global math.mininteger: integer <comptime> = #[primtypes.integer.min]#

-- An integer with the maximum value for an integer.
global math.maxinteger: integer <comptime> = #[primtypes.integer.max]#

-- An integer with the maximum value for an unsigned integer.
global math.maxuinteger: uinteger <comptime> = #[primtypes.uinteger.max]#

return math
