--[[
The traits library provides utilities to gather type information.
]]

-- Namespace for traits module.
global traits: type = @record{}

-- Type of the identifier for types.
global traits.typeid: type = @uint32

-- Record for type information.
global traits.typeinfo: type = @record{
  id: traits.typeid,
  name: string,
  nickname: string,
  codename: string
}

--[[
Returns the `typeid` of `v`.
The given `v` can be either a runtime value or a compile-time type.
]]
function traits.typeidof(v: auto): traits.typeid <inline>
  ## local vtype = v.type.is_type and v.value or v.type
  return #[vtype.id]#
end

--[[
Returns type information of `v`.
The given `v` can be either a runtime value or a compile-time type.
]]
function traits.typeinfoof(v: auto): traits.typeinfo <inline>
  ## local vtype = v.type.is_type and v.value or v.type
  return (@traits.typeinfo){
    id = #[vtype.id]#,
    name = #[vtype.name]#,
    nickname = #[vtype.nickname or '']#,
    codename = #[vtype.codename]#
  }
end

--[[
Returns the type of `v`, coded as a string, as follows:
* `"nil"` for `niltype`
* `"pointer"` for pointers and `nilptr`
* `"number"` for scalar types (including enums)
* `"string"` for types that can represent a string
* `"record"` for records
* `"union"` for unions
* `"type"` for compile-time types
* `"function"` for functions
* `"polyfunction"` for polymorphic functions

This function behaves as describe to be compatible with Lua APIs.
]]
global function type(v: auto): string <inline>
  ## if v.type.is_niltype then
    return 'nil'
  ## elseif v.type.is_nilptr then
    return 'pointer'
  ## elseif v.type.is_scalar then
    return 'number'
  ## elseif v.type.is_stringy then
    return 'string'
  ## else
    return #[v.type.name]#
  ## end
end

return traits
