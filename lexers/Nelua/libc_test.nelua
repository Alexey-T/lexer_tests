require 'C.arg'
require 'C.ctype'
require 'C.errno'
require 'C.locale'
require 'C.math'
require 'C.signal'
require 'C.stdarg'
-- require 'C.stdatomic'
require 'C.stdio'
require 'C.stdlib'
require 'C.string'
-- require 'C.threads'
require 'C.time'

do -- math
  assert(C.fabs(-1.0) == 1.0)
  assert(C.fabsf(-2.0_f32) == 2.0_f32)

  ## if ccinfo.is_gcc or ccinfo.is_clang then
    assert(C.isnan(C.NAN) ~= 0)
    assert(C.isinf(C.INFINITY) ~= 0)
    assert(C.NAN ~= C.NAN)
  ## end
end

do -- va_list
  local function fill_numbers(numbers: *[0]float64, n: integer, ...: cvarargs)
    local vl: cvalist
    C.va_start(vl, n)
    for i=0,<n do
      numbers[i] = C.va_arg(vl, @float64)
    end
    C.va_end(vl)
  end

  local numbers: [4]float64
  fill_numbers(&numbers, 0)
  fill_numbers(&numbers, 1, 0.5_f64)
  assert(numbers[0] == 0.5_f64)
  fill_numbers(&numbers, 2, 1.0_f32, 0.5_f32)
  assert(numbers[0] == 1.0_f64 and numbers[1] == 0.5_f64)
  fill_numbers(&numbers, 3, 2.0_f64, 1.0_f64, 0.5_f64)
  assert(numbers[0] == 2.0_f64 and numbers[1] == 1.0_f64 and numbers[2] == 0.5_f64)
end

do -- vsnprintf
  local function mysprintf(s: cstring, format: cstring, ...: cvarargs): cint
    local args: cvalist
    C.va_start(args, format)
    local ret: cint = C.vsprintf(s, format, args)
    C.va_end(args)
    return ret
  end

  local hello: cstring = "hello"
  local val: cint = 10
  local buf: [256]cchar
  mysprintf(&buf[0], "%s %d", hello, val);
  assert(&buf[0] == 'hello 10')
end

print 'libc OK!'
