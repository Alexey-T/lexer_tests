--[[
The os library provides some operating system facilities.

Some `os` functions behavior may vary across different operating systems,
or may not be supported.
]]

require 'string'

-- Common C imports.

local tm: type <cimport,cinclude'<time.h>',ctypedef> = @record{
  tm_year: cint,
  tm_mon: cint,
  tm_mday: cint,
  tm_hour: cint,
  tm_min: cint,
  tm_sec: cint,
  tm_isdst: cint
}
local timespec: type <cimport,cinclude'<time.h>',ctypedef> = @record{
  tv_sec: ctime_t,
  tv_nsec: clong
}
local errno: cint <cimport,cinclude'<errno.h>'>
local function time(tloc: *ctime_t): ctime_t <cimport,cinclude'<time.h>'> end
local function getenv(name: cstring): cstring <cimport,cinclude'<stdlib.h>'> end

-- Namespace for OS module.
global os: type = @record{}

-- Returns last errno message plus its code.
local function geterrno(): (string, integer)
  local function strerror(errnum: cint): cstring <cimport,cinclude'<string.h>'> end
  return strerror(errno), errno
end

--[[
Passes command to be executed by an operating system shell.

Its first result is `true` if the command terminated successfully, or `false` otherwise.
After this first result the function returns a string plus a number, as follows:

 * `"exit"`: the command terminated normally; the following number is the exit status of the command.
 * `"unsupported"`: executing command is not supported in the system.

When called without a command, `os.execute` returns a boolean that is `true` if a shell is available.

This function is equivalent to the ISO C function `system`.
This function is system dependent and is not available on all platforms.
]]
function os.execute(command: facultative(string)): (boolean, string, integer)
  ## if ccinfo.is_wasm then
    return false, 'unsupported', -1
  ## else
    local function system(command: cstring): cint <cimport,cinclude'<stdlib.h>'> end
    ## if command.type.is_string then
      errno = 0
      local status: cint = system(command)
      if status ~= 0 and errno ~= 0 then -- error with an errno?
        return false, geterrno()
      end
      local reason: string = 'exit'
      ## cinclude '@unistd.h'
      ## cemit '#if defined(_POSIX_VERSION) && defined(WEXITSTATUS)'
        local function WEXITSTATUS(stat: cint): cint <cimport,cinclude'<stdlib.h>'> end
        local function WIFEXITED(stat: cint): cint <cimport,cinclude'<stdlib.h>'> end
        local function WIFSIGNALED(stat: cint): cint <cimport,cinclude'<stdlib.h>'> end
        local function WTERMSIG(stat: cint): cint <cimport,cinclude'<stdlib.h>'> end
        if WIFEXITED(status) ~= 0 then
          status = WEXITSTATUS(status)
        elseif WIFSIGNALED(status) ~= 0 then
          status = WTERMSIG(status)
          reason = 'signal'
        end
      ## cemit '#endif'
      return status == 0, reason, status
    ## else
      local status: cint = system(nilptr)
      return status ~= 0, 'unsupported', -1
    ## end
  ## end
end

--[[
Calls the ISO C function `exit` to terminate the host program.

If `code` is `true`, the returned status is `EXIT_SUCCESS`.
If `code` is `false`, the returned status is `EXIT_FAILURE`.
If `code` is a number, the returned status is this number.
The default value for code is `true`.
]]
function os.exit(code: overload(integer,boolean,niltype)): void <noreturn>
  local EXIT_SUCCESS: cint <cimport,cinclude'<stdlib.h>'>
  local EXIT_FAILURE: cint <cimport,cinclude'<stdlib.h>'>
  local function exit(status: cint): void <cimport,cinclude'<stdlib.h>'> end
  ## if code.type.is_integral then
    exit(code)
  ## elseif code.type.is_boolean then
    local status: cint = EXIT_FAILURE
    if code then
      status = EXIT_SUCCESS
    end
    exit(status)
  ## else
    exit(EXIT_SUCCESS)
  ## end
end

--[[
Sets the value of the process environment variable `varname` to `value`.
In case the variable already exists, then it is overwritten, otherwise it is added.
If `value` is not present, then the variable is removed.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]]
function os.setenv(varname: string, value: facultative(string)): (boolean, string, integer)
  local ret: cint
  ## cinclude '@unistd.h'
  ## cemit '#ifdef _WIN32'
    if memory.scan(varname.data, '='_b, varname.size) then
      return false, 'invalid variable name', -1
    end
    local nameq: string = varname..'='
    local function _putenv(envstr: cstring): cint <cimport,cinclude'<stdlib.h>'> end
    ## if value.type.is_niltype then
    ret = _putenv(nameq)
    ## else
    local envstr: string = nameq..value
    ret = _putenv(envstr)
    envstr:destroy()
    ## end
    nameq:destroy()
  ## cemit '#elif _POSIX_VERSION >= 200112L'
    ## if value.type.is_niltype then
    local function unsetenv(name: cstring): cint <cimport,cinclude'<stdlib.h>'> end
    ret = unsetenv(varname)
    ## else
    local function setenv(name: cstring, value: cstring, overwrite: cint): cint <cimport,cinclude'<stdlib.h>'> end
    ret = setenv(varname, value, 1)
    ## end
  ## cemit '#else'
    return false, 'unsupported', -1
  ## cemit '#endif'
  if ret ~= 0 then -- error with an errno?
    return false, geterrno()
  end
  return true, (@string){}, 0
end

--[[
Returns the value of the process environment variable `varname`.
In case the variable is not defined, an empty string is returned.
]]
function os.getenv(varname: string): string
  local s: cstring = getenv(varname)
  if s then
    return string.copy(s)
  else
    return (@string){}
  end
end

--[[
Deletes the file (or empty directory, on POSIX systems) with the given name.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]]
function os.remove(filename: string): (boolean, string, integer)
  ## if ccinfo.is_wasm then
    return false, 'unsupported', -1
  ## else
    local function remove(pathname: cstring): cint <cimport,cinclude'<stdio.h>'> end
    if remove(filename) == -1 then
      return false, geterrno()
    end
    return true, (@string){}, 0
  ## end
end

--[[
Renames the file or directory named `oldname` to `newname`.

Returns `true` on success, otherwise `false` plus an error message and a system-dependent error code.
]]
function os.rename(oldname: string, newname: string): (boolean, string, integer)
  ## if ccinfo.is_wasm then
    return false, 'unsupported', -1
  ## else
    local function rename(old: cstring, new: cstring): cint <cimport,cinclude'<stdio.h>'> end
    if rename(oldname, newname) == -1 then
      return false, geterrno()
    end
    return true, (@string){}, 0
  ## end
end

--[[
Sets the current locale of the program.

`locale` is a system-dependent string specifying a locale.
`category` is an optional string describing which category to change:
`"all"`, `"collate"`, `"ctype"`, `"monetary"`, `"numeric"`, or `"time"`;
the default category is "all".

If locale is the empty string, the current locale is set to an implementation-defined native locale.
If locale is the string `"C"`, the current locale is set to the standard C locale.

The function returns the name of the new locale on success,
or an empty string if the request cannot be honored.
]]
function os.setlocale(locale: facultative(string), category: facultative(string)): string
  local LC_ALL: cint <cimport,cinclude'<locale.h>'>
  local LC_COLLATE: cint <cimport,cinclude'<locale.h>'>
  local LC_CTYPE: cint <cimport,cinclude'<locale.h>'>
  local LC_MONETARY: cint <cimport,cinclude'<locale.h>'>
  local LC_NUMERIC: cint <cimport,cinclude'<locale.h>'>
  local LC_TIME: cint <cimport,cinclude'<locale.h>'>
  local function setlocale(category: cint, locale: cstring): cstring <cimport,cinclude'<locale.h>'> end
  local s: cstring
  ## if locale.type.is_niltype then
    s = setlocale(LC_ALL, nilptr)
  ## elseif category.type.is_niltype then
    s = setlocale(LC_ALL, locale)
  ## else
    local cat: cint
    if category == 'all' then cat = LC_ALL
    elseif category == 'collate' then cat = LC_COLLATE
    elseif category == 'ctype' then cat = LC_CTYPE
    elseif category == 'monetary' then cat = LC_MONETARY
    elseif category == 'numeric' then cat = LC_NUMERIC
    elseif category == 'time' then cat = LC_TIME
    else
      error("invalid category")
    end
    s = setlocale(cat, locale)
  ## end
  if s then
    return string.copy(s)
  else
    return (@string){}
  end
end

--[[
Returns a string with a file name that can be used for a temporary file.

The file must be explicitly opened before its use and explicitly removed when no longer needed.
In POSIX systems, this function also creates a file with that name, to avoid security risks.
(Someone else might create the file with wrong permissions in the time between getting the name and creating the file.)
You still have to open the file to use it and to remove it (even if you do not use it).
When possible, you may prefer to use `io.tmpfile`, which automatically removes the file when the program ends.
]]
function os.tmpname(): string
  local name: string
  ## if ccinfo.is_wasm then
    error 'unsupported'
  ## else
    ## cinclude '@unistd.h'
    ## cemit '#if _POSIX_VERSION >= 200112L'
      local function mkstemp(template: cstring): cint <cimport,cinclude'<stdlib.h>'> end
      local function close(fd: cint): cint <cimport,cinclude'@unistd.h'> end
      local tmpdir: cstring = getenv('TMPDIR')
      if tmpdir ~= nilptr then
        name = tmpdir.."/nelua_XXXXXX"
      else
        name = string.copy("/tmp/nelua_XXXXXX")
      end
      local fd: cint = mkstemp(name)
      if fd == -1 then
        name:destroy()
      else
        close(fd)
      end
    ## cemit '#else'
    local function tmpnam(s: cstring): cstring <cimport,cinclude'<stdio.h>'> end
    local buf: [260]cchar
    local bufcs: cstring = &buf[0]
    if tmpnam(bufcs) ~= nilptr then
      name = string.copy(bufcs)
    end
    ## cemit '#endif'
  ## end
  return name
end

--[[
Returns a string or a table containing date and time,
formatted according to the given string `format`.

If the `formattime` argument is present, this is the time to be formatted
(see the `os.time` function for a description of this value).
Otherwise, `date` formats the current time.

If `format` starts with '!', then the date is formatted in UTC (Coordinated Universal Time).
After this optional character, the date is
formatted according to the same rules as the ISO C function `strftime`.

If `format` is absent, it defaults to "%c",
which gives a human-readable date and time representation using the current locale.

On non-POSIX systems, this function may be not thread safe
because of its reliance on C function `gmtime` and C function `localtime`.
]]
function os.date(format: facultative(string), formattime: facultative(integer)): string
  -- TODO: handle '*t' format
  -- TODO: check for invalid formats (Lua performs checks)
  ## if formattime.type.is_niltype then
  local t: ctime_t = time(nilptr)
  ## else
  local t: ctime_t = (@ctime_t)(formattime)
  assert(t == formattime, 'time out of bounds')
  ## end
  local fmt: cstring, stm: *tm, tmr: tm
  local buf: [256]cchar <noinit>
  local utc: boolean
  ## if format.type.is_niltype then
    fmt = "%c"
  ## else
    if format.size > 0 and format.data[0] == '!'_b then -- UTC?
      utc = true
      fmt = &format.data[1]
    else
      fmt = &format.data[0]
    end
  ## end
  ## cinclude '@unistd.h'
  local function gmtime_r(timep: *ctime_t, result: *tm): *tm <cimport,cinclude'<time.h>'> end
  local function gmtime(timep: *ctime_t): *tm <cimport,cinclude'<time.h>'> end
  local function localtime_r(timep: *ctime_t, result: *tm): *tm <cimport,cinclude'<time.h>'> end
  local function localtime(timep: *ctime_t): *tm <cimport,cinclude'<time.h>'> end
  local function strftime(s: cstring, maxsize: csize, format: cstring, tp: *tm): csize <cimport,cinclude'<time.h>'> end
  ## cemit '#if _POSIX_VERSION'
    if utc then
      stm = gmtime_r(&t, &tmr)
    else
      stm = localtime_r(&t, &tmr)
    end
  ## cemit '#else'
    if utc then
      stm = gmtime(&t)
    else
      stm = localtime(&t)
    end
  ## cemit '#endif'
  assert(stm ~= nilptr, "date result cannot be represented in this installation")
  local size: csize = strftime(&buf, #buf, fmt, stm)
  return string{data=&buf[0],size=size}:copy()
end

--[[
Returns an approximation of the amount in seconds of CPU time used by the program,
as returned by the underlying ISO C function `clock`.
]]
function os.clock(): number
  ## if ccinfo.is_wasi then
  local function __wasi_clock_time_get(id: uint32, precision: uint64, retptr0: *uint64): uint16 <cimport,cinclude'<wasi/api.h>'> end
  local __WASI_CLOCKID_PROCESS_CPUTIME_ID: uint32 <comptime> = 2
  local clock_time: uint64
  __wasi_clock_time_get(__WASI_CLOCKID_PROCESS_CPUTIME_ID, 0, &clock_time)
  return clock_time / 1000000000.0
  ## elseif ccinfo.is_emscripten then
  local function emscripten_get_now(): float64 <cimport,cinclude'<emscripten.h>'> end
  return emscripten_get_now() * 1000.0
  ## else
  local CLOCKS_PER_SEC: cclock_t <cimport,cinclude'<time.h>'>
  local function clock(): cclock_t <cimport,cinclude'<time.h>'> end
  return clock() / CLOCKS_PER_SEC
  ## end
end

--[[
Returns the difference, in seconds, from time `t1` to time `t2`
(where the times are values returned by `os.time`).

In POSIX, Windows, and some other systems, this value is exactly `t2 - t1`.
]]
function os.difftime(t2: integer, t1: integer): number
  local ct2: ctime_t = (@ctime_t)(t2)
  local ct1: ctime_t = (@ctime_t)(t1)
  assert(ct2 == t2 and ct1 == t1, 'time out of bounds')
  local function difftime(time1: ctime_t, time0: ctime_t): cdouble <cimport,cinclude'<time.h>'> end
  return difftime(ct2, ct1)
end

-- Time description, used by function `os.time`.
global os.timedesc: type = @record{
  year: integer, month: integer, day: integer,
  hour: integer, min: integer, sec: integer,
  isdst: boolean
}

--[[
Returns the current time when called without arguments,
or a time representing the local date and time specified by the given time description.

When the function is called, the values in these fields do not need to be inside their valid ranges.
For instance, if sec is -10, it means 10 seconds before the time specified by the other fields.
If hour is 1000, it means 1000 hours after the time specified by the other fields.

The returned value is a number, whose meaning depends on your system.
In POSIX, Windows, and some other systems,
this number counts the number of seconds since some given start time (the "epoch").
In other systems, the meaning is not specified,
and the number returned by time can be used only as an argument to `os.date` and `os.difftime`.

When called with a record `os.timedesc`, `os.time` also normalizes all the fields,
so that they represent the same time as before the call but with values inside their valid ranges.
]]
function os.time(desc: facultative(os.timedesc)): integer
  local function mktime(tp: *tm): ctime_t <cimport,cinclude'<time.h>'> end
  local t: ctime_t
  ## if desc.type.is_niltype then
    t = time(nilptr)
  ## else
    --TODO: change desc to table and update fields with normalize values
    --TODO: make default hour 12
    local ts: tm
    ts.tm_year = desc.year - 1900
    ts.tm_mon = desc.month - 1
    ts.tm_mday = desc.day
    ts.tm_hour = desc.hour
    ts.tm_min = desc.min
    ts.tm_sec = desc.sec
    if desc.isdst then
      ts.tm_isdst = 1
    end
    t = mktime(&ts)
  ## end
  local ret: integer = (@integer)(t)
  assert(ret == t and t >= 0, 'time result cannot be represented in this installation')
  return ret
end

--[[
Like `os.time`, returns the current time but using a high resolution clock.

Returns two integers, the number of seconds since the "epoch" (same value as `os.time`)
plus the remaining number of nanoseconds.

A system realtime clock is used.
A realtime clock can jump, because it is affected by changes in system time clock,
thus prefer using `os.now` for timers.

The operation may not be supported by all systems, or may fail in some systems,
in that case `-1`, `0` is returned.
]]
function os.realtime(): (integer, integer)
  ## if ccinfo.is_wasi then
  local function __wasi_clock_time_get(id: uint32, precision: uint64, retptr0: *uint64): uint16 <cimport,cinclude'<wasi/api.h>'> end
  local __WASI_CLOCKID_REALTIME: uint32 <comptime> = 0
  local clock_time: uint64
  local ok: boolean = __wasi_clock_time_get(__WASI_CLOCKID_REALTIME, 0, &clock_time) == 0
  local secs: int64 = (@int64)(clock_time // 1000000000)
  local nsecs: int64 = (@int64)(clock_time % 1000000000)
  ## else
  local ok: boolean = false
  local secs: int64 = 0
  local nsecs: int64 = 0
##[==[
  cinclude '<stdbool.h>' -- for bool
  cinclude '<stdint.h>' -- for int64_t
  cinclude '<time.h>' -- for timespec_get/TIME_UTC
  cinclude '<errno.h>' -- for errno
  cinclude '@unistd.h'
  cinclude '@windows.h'
  cinclude [[
/* Determine supported high resolution time API. */
#if defined(_POSIX_TIMERS) && defined(_POSIX_REALTIME_CLOCK)
  #define NELUA_HAVE_POSIX_REALTIME_CLOCK
#elif __STDC_VERSION__ >= 201112L && defined(TIME_UTC) && !defined(__ANDROID__) && !defined(__wasm__)
  #define NELUA_HAVE_C11_TIMESPEC_GET
#elif defined(_POSIX_VERSION)
  #include <sys/time.h>
  #define NELUA_HAVE_POSIX_GETTIMEOFDAY
#endif
]]
  cemit [[
#if defined(_WIN32)
  FILETIME filetime = {0};
  ULARGE_INTEGER large_filetime = {0};
#if _WIN32_WINNT >= _WIN32_WINNT_WIN8
  GetSystemTimePreciseAsFileTime(&filetime);
#else
  GetSystemTimeAsFileTime(&filetime);
#endif
  ok = true;
  large_filetime.LowPart = filetime.dwLowDateTime;
  large_filetime.HighPart = filetime.dwHighDateTime;
  uint64_t unixtime = large_filetime.QuadPart - 116444736000000000;
  secs = unixtime / 10000000;
  nsecs = (unixtime % 10000000) * 100;
#elif defined(NELUA_HAVE_POSIX_REALTIME_CLOCK)
  struct timespec ts = {0};
  ok = clock_gettime(CLOCK_MONOTONIC, &ts) == 0;
  secs = ts.tv_sec;
  nsecs = ts.tv_nsec;
#elif defined(NELUA_HAVE_C11_TIMESPEC_GET)
  struct timespec ts = {0};
  ok = timespec_get(&ts, TIME_UTC) == TIME_UTC;
  secs = ts.tv_sec;
  nsecs = ts.tv_nsec;
#elif defined(NELUA_HAVE_POSIX_GETTIMEOFDAY)
  struct timeval ts;
  ok = gettimeofday(&ts, NULL) == 0;
  secs = ts.tv_sec;
  nsecs = ts.tv_usec * 1000;
#endif
]]
]==]
  ## end
  if not ok then return -1, 0 end
  return secs, nsecs
end

--[[
Get time elapsed in seconds since its first call using a high resolution timer.
Returns a number greater than or equal to `0` on success, otherwise `-1`.

In the first successful call `0` is returned,
in subsequent calls the relative time in seconds since the first call is returned.
This is typically used to compute time differences with high precision.

A system monotonic clock is used if supported by the OS.
A monotonic clock can't jump, because it isn't affected by changes in system time clock.
If a monotonic clock is not supported, then a realtime may be used as fallback.

The time resolution is unspecified and depends on the OS,
but typically has nanosecond precision on POSIX systems.

The operation may not be supported by all systems, or may fail in some systems,
in that case `-1` is returned.
]]
function os.now(): number
  ## if ccinfo.is_wasi then
  local function __wasi_clock_time_get(id: uint32, precision: uint64, retptr0: *uint64): uint16 <cimport,cinclude'<wasi/api.h>'> end
  local __WASI_CLOCKID_MONOTONIC: uint32 <comptime> = 1
  local clock_time: uint64
  if __wasi_clock_time_get(__WASI_CLOCKID_MONOTONIC, 0, &clock_time) ~= 0 then
    return -1
  end
  local initialized: boolean <static> = false
  local first_clock_time: uint64 <static> = 0
  if not initialized then
    first_clock_time = clock_time
    initialized = true
  end
  return (clock_time - first_clock_time) / 1000000000.0
  ## elseif ccinfo.is_emscripten then
  local function emscripten_get_now(): float64 <cimport,cinclude'<emscripten.h>'> end
  local now: float64 = emscripten_get_now()
  local initialized: boolean <static> = false
  local first_now: float64 <static> = 0
  if not initialized then
    first_now = now
    initialized = true
  end
  return (now - first_now) / 1000.0
  ## else
  local ok: boolean = false
  local ns: int64 = 0
##[==[
  cinclude '<stdbool.h>' -- for bool
  cinclude '<stdint.h>' -- for int64_t
  cinclude '<time.h>' -- for timespec_get/TIME_UTC
  cinclude '@unistd.h'
  cinclude '@windows.h'
  cinclude [[
/* Determine supported high resolution time API. */
#if defined(_POSIX_TIMERS) && defined(_POSIX_MONOTONIC_CLOCK)
  #define NELUA_HAVE_POSIX_MONOTONIC_CLOCK
#elif __STDC_VERSION__ >= 201112L && defined(TIME_UTC) && !defined(__ANDROID__) && !defined(__wasm__)
  #define NELUA_HAVE_C11_TIMESPEC_GET
#elif defined(_POSIX_VERSION)
  #include <sys/time.h>
  #define NELUA_HAVE_POSIX_GETTIMEOFDAY
#endif
]]
  cemit [[
#if defined(_WIN32)
  static bool initialized = false;
  static LARGE_INTEGER freq;
  static LARGE_INTEGER start;
  if(!initialized) {
    initialized = true;
    ok = (QueryPerformanceFrequency(&freq) != 0) && (QueryPerformanceCounter(&start) != 0);
  } else {
    LARGE_INTEGER qpc;
    ok = QueryPerformanceCounter(&qpc) != 0;
    int64_t ticks = qpc.QuadPart - start.QuadPart;
    int64_t q = ticks / freq.QuadPart;
    int64_t r = ticks % freq.QuadPart;
    ns = (q * 1000000000) + ((r * 1000000000) / freq.QuadPart);
  }
#elif defined(NELUA_HAVE_POSIX_MONOTONIC_CLOCK)
  static bool initialized = false;
  static struct timespec start = {0};
  if(!initialized) {
    initialized = true;
    ok = clock_gettime(CLOCK_MONOTONIC, &start) == 0;
  } else {
    struct timespec ts = {0};
    ok = clock_gettime(CLOCK_MONOTONIC, &ts) == 0;
    ns = (int64_t)(ts.tv_sec - start.tv_sec)*1000000000 + (int64_t)(ts.tv_nsec - start.tv_nsec);
  }
#elif defined(NELUA_HAVE_C11_TIMESPEC_GET)
  static bool initialized = false;
  static struct timespec start = {0};
  if(!initialized) {
    initialized = true;
    ok = timespec_get(&start, TIME_UTC) == TIME_UTC;
  } else {
    struct timespec ts = {0};
    ok = timespec_get(&ts, TIME_UTC) == TIME_UTC;
    ns = (int64_t)(ts.tv_sec - start.tv_sec)*1000000000 + (int64_t)(ts.tv_nsec - start.tv_nsec);
  }
#elif defined(NELUA_HAVE_POSIX_GETTIMEOFDAY)
  static bool initialized = false;
  static struct timeval start = {0};
  if(!initialized) {
    initialized = true;
    ok = gettimeofday(&start, NULL) == 0;
  } else {
    struct timeval ts;
    ok = gettimeofday(&ts, NULL) == 0;
    ns = (int64_t)(ts.tv_sec - start.tv_sec)*1000000000 + (int64_t)(ts.tv_usec - start.tv_usec)*1000;
  }
#endif
]]
]==]
  if not ok then return -1.0 end
  return ns / 1000000000.0
  ## end
end

--[[
Sleep the current OS thread for `secs` seconds.
Returns true on success, otherwise false.

The operation typically has at least millisecond precision,
the sleep time will be typically the requested one,
but can be a little lower or higher depending on the system.

The operation may not be supported by all systems, or may fail in some systems,
in that case false is returned.
]]
function os.sleep(secs: number): boolean
  if secs < 0 then return false end
  ## if ccinfo.is_wasm then
    -- TODO: support WASI with `__wasi_poll_oneoff`
    return false
  ## elseif ccinfo.is_emscripten then
    local function emscripten_sleep(ms: cuint): void <cimport,cinclude'<emscripten.h>'> end
    emscripten_sleep((@cuint)(secs * 1000.0))
    ## cflags '-s ASYNCIFY=1'
  ## else
    local ok: boolean
    ## cinclude '@unistd.h'
    ## cinclude '@windows.h'
    ## cemit '#if defined(_WIN32)'
      local function Sleep(ms: culong): void <cimport,cinclude'@windows.h'> end
      local us: uint64 <nodce> = (@uint64)(secs * 1000000)
      local ms: cuint = (@cuint)((us + 999) // 1000)
      if ms > 0 then
        Sleep(ms)
      end
      ok = true
    ## cemit '#elif defined(_POSIX_TIMERS)'
      local function nanosleep(requested_time: *timespec, remaining: *timespec): cint <cimport,cinclude'<time.h>'> end
      local EINTR: cint <cimport,cinclude'<errno.h>'>
      local res: cint
      if secs > 0 then
        local ts: timespec = {
          tv_sec = (@ctime_t)(secs // 1),
          tv_nsec = (@clong)((secs % 1) * 1e9)
        }
        repeat
          errno = 0
          res = nanosleep(&ts, &ts)
        until res == 0 or errno ~= EINTR
        ok = res == 0
      end
    ## cemit '#elif defined(_POSIX_VERSION)'
      local function usleep(usec: cuint): cint <cimport,cinclude'@unistd.h'> end
      local us: uint64 <nodce> = (@uint64)(secs * 1000000)
      if us > 0 then
        ok = usleep(us) == 0
      else
        ok = true
      end
    ## cemit '#endif'
    return ok
  ## end
end

return os
