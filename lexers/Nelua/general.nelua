--[[
The general allocator uses the system's general purpose allocator to allocate dynamic memory,
usually this an efficient allocator for the general use case.
It uses the allocation functions provided by the system.

The general allocator can also be overridden by an allocator instance in case
the global `embedded_general_allocator` is declared before this library is required.
]]

-- General allocator record.
global GeneralAllocator: type = @record{}

-- General allocator instance, that must be used to perform allocations.
global general_allocator: GeneralAllocator

--[[
Allocates `size` bytes and returns a pointer of the allocated memory block.

The allocated memory is not initialized.
For more details see `Allocator:alloc`.

This function calls system's `malloc()`.
]]
function GeneralAllocator:alloc(size: usize, flags: facultative(usize)): pointer <inline>
  ## if embedded_general_allocator then
    return embedded_general_allocator:alloc(size)
  ## else
    local function malloc(size: csize): pointer <cimport,cinclude'<stdlib.h>'> end
    if unlikely(size == 0) then return nilptr end
    return malloc(size)
  ## end
end

--[[
Like `alloc`, but the allocated memory is initialized with zeros.

This function calls system's `calloc()`.
]]
function GeneralAllocator:alloc0(size: usize, flags: facultative(usize)): pointer <inline>
  ## if embedded_general_allocator then
    return embedded_general_allocator:alloc0(size)
  ## else
    local function calloc(nmemb: csize, size: csize): pointer <cimport,cinclude'<stdlib.h>'> end
    if unlikely(size == 0) then return nilptr end
    return calloc(size, 1)
  ## end
end

--[[
Deallocates the allocated memory block pointed by `p`.

For more details see `Allocator:dealloc`.
This function calls system's `free()`.
]]
function GeneralAllocator:dealloc(p: pointer): void <inline>
  ## if embedded_general_allocator then
    embedded_general_allocator:dealloc(p)
  ## else
    local function free(ptr: pointer): void <cimport,cinclude'<stdlib.h>'> end
    if unlikely(p == nilptr) then return end
    free(p)
  ## end
end

--[[
Changes the size of the memory block pointer by `p` from size `oldsize` bytes to `newsize` bytes.

For more details see `Allocator:realloc`.
This function calls system's `realloc()`.
]]
function GeneralAllocator:realloc(p: pointer, newsize: usize, oldsize: usize): pointer <inline>
  ## if embedded_general_allocator then
    return embedded_general_allocator:realloc(p, newsize, oldsize)
  ## else
    local function free(ptr: pointer): void <cimport,cinclude'<stdlib.h>'> end
    local function realloc(ptr: pointer, size: csize): pointer <cimport,cinclude'<stdlib.h>'> end
    if unlikely(newsize == 0) then
      if likely(p ~= nilptr) then
        free(p)
      end
      return nilptr
    elseif unlikely(newsize == oldsize) then
      return p
    end
    return realloc(p, newsize)
  ## end
end

require 'allocators.allocator'

## Allocator_implement_interface(GeneralAllocator)

return GeneralAllocator
