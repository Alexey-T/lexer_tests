use Collection.Generic;
use System.IO.Net;
use Data.JSON;

bundle LSP {
	#~
	Abstract socket server worker
	~#
	class LspWorker from System.Concurrency.Thread {
		@address : String;
		@port : Int;
		@quit : Bool;
		@is_initialized : Bool;
		@is_debug : Bool;
		@workspace : LspWorkspace;
		@socket : TCPSocket;
		@cancel_id : Int;

		New(socket : TCPSocket, is_debug : Bool) {
			Parent();
			@socket := socket;
			@is_debug := is_debug;
			@cancel_id := -1;
			@workspace := LspWorkspace->New(@is_debug);
		}

		method : public : Run(param : Base) ~ Nil {
			while(<>@quit) {
				request := ReadRpcRequest();
				if(request <> Nil) {
					ProcessResponse(request);
				}	
				else {
					@quit := true;
				};
			};

			@socket->Close();
		}

		method : public : IsDebug() ~ Bool {
			return @is_debug;
		}

		#
		# Notifications
		#
		method : virtual : NotifyInitialized(params : JsonElement) ~ Nil;
		method : virtual : NotifyCancel(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidOpen(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChange(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChangeWatchedFiles(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidSave(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidClose(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChangeWorkspace(params : JsonElement) ~ Nil;

		#
		# Callbacks
		#
		method : virtual : CallbackInitialize(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackShutdown(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackCompletion(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackHover(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackCodeAction(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackResolve(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackRename(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackDocumentSymbol(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackReferences(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackDeclaration(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackDefinition(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackSignatureHelp(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackFormatDocument(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackFormatRange(id : Int, params : JsonElement) ~ Nil;

		# --- process requests ---
		method : ProcessResponse(request : RpcRequest) ~ Nil {
			id := request->GetId();
			method_id := request->GetMethod();
			
			# notification
			if(id->IsNeg()) {
				if(@is_debug) {
					System.IO.Filesystem.Logger->Instance()->Info("NOTIFICATION='{$method_id}'\n");
				};

				if(method_id->Equals("initialized")) {
					NotifyInitialized(request->GetParams());
				}
				else if(method_id->Equals("$/cancelRequest")) {
					NotifyCancel(request->GetParams());
				}
				else if(method_id->Equals("workspace/didChangeWatchedFiles")) {
					NotifyDidChangeWatchedFiles(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didOpen")) {
					NotifyDidOpen(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didChange")) {
					NotifyDidChange(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didSave")) {
					NotifyDidSave(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didClose")) {
					NotifyDidClose(request->GetParams());
				}
				else if(method_id->Equals("workspace/didChangeWorkspaceFolders")) {
					NotifyDidChangeWorkspace(request->GetParams());
				}
				else {
					if(@is_debug) {
						System.IO.Filesystem.Logger->Instance()->Error("*** Unknown notification='{$method_id}' ***");
					};
				};
			}
			# callback
			else {
				if(@is_debug) {
					System.IO.Filesystem.Logger->Instance()->Info("METHOD='{$method_id}', id={$id}");
				};

				if(method_id->Equals("initialize")) {
					CallbackInitialize(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/completion")) {
					CallbackCompletion(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/hover")) {
					CallbackHover(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/codeAction")) {
					CallbackCodeAction(id, request->GetParams());
				}
				else if(method_id->Equals("completionItem/resolve")) {
					CallbackResolve(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/rename")) {
					CallbackRename(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/documentSymbol")) {
					CallbackDocumentSymbol(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/references")) {
					CallbackReferences(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/declaration")) {
					CallbackDeclaration(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/definition")) {
					CallbackDefinition(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/signatureHelp")) {
					CallbackSignatureHelp(id, request->GetParams());
				}
				else if(method_id->Equals("shutdown")) {
					CallbackShutdown(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/formatting")) {
					CallbackFormatDocument(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/rangeFormatting")) {
					CallbackFormatRange(id, request->GetParams());
				}
				else {
					if(@is_debug & <>method_id->Equals("<none>")) {
						System.IO.Filesystem.Logger->Instance()->Error("*** Unknown method='{$method_id}' ***");
					};
				};
			};
		}

		# --- utilities ---
		method : ReadString() ~ String {
			line := @socket->ReadLine();
			@socket->ReadLine();

			index := line->Find(':');
			if(index > 0) {
				index += 2;
				length := line->SubString(index, line->Size() - index)->ToInt();
				# TODO: check length (buffer overflow)
				buffer := Byte->New[length];
				@socket->ReadBuffer(0, buffer->Size(), buffer);

				text := String->New(buffer->ToUnicode());
				if(@is_debug) {
					System.IO.Filesystem.Logger->Instance()->Info("====\nREAD='{$text}'");
				};

				return text;
			};

			return "";
		}

		method : WriteString(text : String) ~ Nil {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("WRITE='{$text}'");
			};		
			length := text->Size();
			@socket->WriteString("Content-Length: {$length}\r\n\r\n{$text}");
		}

		method : ReadRpcRequest() ~ RpcRequest {
			text := ReadString();
			if(<>text->IsEmpty()) {
				json :=JsonParser->New(text);
				if(json->Parse()) {
					node := json->GetRoot();
					
					id := -1;
					id_elem := node->Get("id");
					if(id_elem <> Nil) {
						id := id_elem->GetValue()->ToInt();
					};

					ver := node->Get("jsonrpc");
					
					mthd : String;
					mthd_elem := node->Get("method");
					if(mthd_elem <> Nil) {
						mthd := mthd_elem->GetValue();
					}
					else {
						mthd := "<none>";
					};

					params := node->Get("params");
					if(params = Nil) {
						params := node->Get("result");
					};

					if(ver <> Nil & ver->GetValue()->Equals("2.0") & mthd <> Nil) {
						return RpcRequest->New(id, mthd, params);
					};
				};
			};

			return Nil;
		}

		# --- capability ---
		method : WriteRpcCapability(id : Int, params : JsonElement) ~ Nil {
			node := JsonElement->New(JsonElement->JsonType->OBJECT);
			
			node->Insert("jsonrpc", "2.0");
			node->Insert("method", "client/registerCapability");
			node->Insert("params", params);
			node->Insert("id", id);

			WriteString(node->ToString());
		}

		# --- response ---
		method : WriteRpcResponse(id : Int, result : JsonElement) ~ Nil {
			if(id = @cancel_id) {
				@cancel_id := -1;
			}
			else {
				node := JsonElement->New(JsonElement->JsonType->OBJECT);

				node->Insert("jsonrpc", "2.0");
				if(result = Nil) {
					node->Insert("result", JsonElement->New(JsonElement->JsonType->NULL));
				}
				else {
					node->Insert("result", result);
				};

				if(id > -1) {
					node->Insert("id", id);
				};

				WriteString(node->ToString());
			};
		}

		# --- request ---
		method : WriteRpcRequest(kind : String, result : JsonElement) ~ Nil {
			node := JsonElement->New(JsonElement->JsonType->OBJECT);

			node->Insert("jsonrpc", "2.0");
			node->Insert("method", kind);

			if(result = Nil) {
				node->Insert("params", JsonElement->New(JsonElement->JsonType->NULL));
			}
			else {
				node->Insert("params", result);
			};

			WriteString(node->ToString());
		}
	}

	#~
	Workspaace
	~#
	class : private : LspWorkspace {
		@is_debug : Bool;
		@name : String;
		@root : String;
		@local_path : String;
		@file_strs : String[];		
		@libs_str : String;		
		@documents : Map<String, Document>;
		@texts : String[,];

		New(is_debug : Bool) {
			@is_debug := is_debug;
			@documents := Map->New()<String, Document>;
		}

		method : public : SetRoot(name : String, root : String) ~ Nil {
			@name := name;
			@root := root;
		}

		method : public : SetFilesLibs(local_path : String, file_strs : String[], libs_str : String) ~ Nil {
			@local_path := local_path;
			@file_strs := file_strs;
			@libs_str := libs_str;
		}

		method : public : GetTexts(uri : String, use_alt : Bool) ~ String[,] {
			# workspace
			if(@file_strs <> Nil) {
				file_count := @file_strs->Size();
				if(file_count > 0) {
					@texts := String->New[file_count, 2];
					
					each(i : file_count) {
						local_file_path := String->New(@local_path);
						local_file_path += '/';
						local_file_path += @file_strs[i];

						file_uri := String->New(@root);
						file_uri += '/';
						file_uri += @file_strs[i];

						text : String;
						document := @documents->Find(file_uri);
						if(document <> Nil) {
							if(use_alt) {
								text := document->GetAltText();
							}
							else {
								text := document->GetText();
							};

							if(@is_debug & text <> Nil) {
								size := text->Size();
								System.IO.Filesystem.Logger->Instance()->Info("### Cached: file_uri='{$file_uri}', size={$size} ###");
							};
						}
						else {
							text := System.IO.Filesystem.FileReader->ReadFile(local_file_path);
							if(@is_debug & text <> Nil) {
								size := text->Size();
								System.IO.Filesystem.Logger->Instance()->Info("### From disk: local_file_path='{$local_file_path}', size={$size} ###");
							};
						};

						if(text = Nil) {
							System.IO.Filesystem.Logger->Instance()->Error("Unable to open file: {$local_file_path}");
						}
						else {
							@texts[i,0] := file_uri;
							@texts[i,1] := text;
						};
					};

					return @texts;
				};
			}
			# non-workspace
			else {
				@libs_str := "gen_collect.obl";

				key_values := @documents->GetKeyValues()<Pair<String, Document>>;
				@texts := String->New[1, 2];
				each(i : key_values) {
					key_value := key_values->Get(i);
					
					file_uri := key_value->GetFirst();
					if(file_uri->Equals(uri)) {
						document := key_value->GetSecond();

						text : String;
						if(use_alt) {
							text := document->GetAltText();
						}
						else {
							text := document->GetText();
						};

						if(@is_debug & text <> Nil) {
							size := text->Size();
							System.IO.Filesystem.Logger->Instance()->Info("### Cached: file_uri='{$file_uri}', size={$size} ###");
						};

						@texts[0,0] := file_uri;
						@texts[0,1] := text;
					};
				};
			};
			
			return @texts;
		}

		method : public : GetLibs() ~ String {
			return @libs_str;
		}

		method : public : GetDocument(uri : String) ~ Document {
			return @documents->Find(uri);
		}

		method : public : AddDocument(uri : String, document : Document) ~ Nil {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("=> Add: {$uri}");
			};

			@documents->Remove(uri);
			@documents->Insert(uri, document);
		}

		method : public : RemoveDocument(uri : String, document : Document) ~ Nil {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("=> Remove: {$uri}");
			};

			if(@documents->Remove(uri)) {
				document->Release();
			};
		}
	}

	#~
	In-memory text document
	~#
	class : private : Document {
		@workspace : LspWorkspace;
		@uri : String;
		@text : String;
		@alt_text : String;
		@is_debug : Bool;

		New(uri : String, text : String, workspace : LspWorkspace, is_debug : Bool) {
			@workspace := workspace;
			@uri := uri;
			@text := GetText(text);
			@is_debug := is_debug;
		}

		method : public : GetDiagnosis() ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			proxy->Build();
			return proxy->GetDiagnosis(@uri, @workspace->GetLibs());
		}

		method : public : GetSymbols(uri : String) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			if(<>proxy->Build()) {
				return Nil;
			};

			is_parsed := BoolHolder->New();
			result := proxy->GetSymbols(is_parsed, uri, @workspace->GetLibs());

			if(is_parsed->Get()) {
				@alt_text := @text->Clone()->As(String);
			};

			return result;
		}

		method : public : FindReferences(line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			return proxy->FindReferences(line_pos, char_pos, @uri, @workspace->GetLibs());
		}

		method : public : CodeRename(new_name : String, line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			return proxy->CodeRename(new_name, line_pos, char_pos, @uri, @workspace->GetLibs());
		}
		
		method : public : FindDeclaration(line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			return proxy->FindDeclaration(line_pos, char_pos, @uri, @workspace->GetLibs());
		}

		method : public : FindDefinition(line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			return proxy->FindDefinition(line_pos, char_pos, @uri, @workspace->GetLibs());
		}

		method : public : Completion(line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, true, @is_debug);
			leaving {
				proxy->Release();
			};
			
			index := GetDocumentIndex(line_pos, char_pos);
			if(index > -1) {
				var_str := ""; mthd_str := "";
				if(GetVariableMethodStrings(index - 1, var_str, mthd_str, false)) {
					return proxy->Completion(line_pos, char_pos, var_str, mthd_str, @uri, @workspace->GetLibs());
				};
			};

			return Nil;
		}

		method : public : Hover(line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, true, @is_debug);
			leaving {
				proxy->Release();
			};
			
			index := GetDocumentIndex(line_pos, char_pos);
			if(index > -1) {
				var_str := ""; mthd_str := "";
				if(GetVariableMethodStrings(index - 1, var_str, mthd_str, false)) {
					return proxy->Hover(line_pos, char_pos, var_str, mthd_str, @uri, @workspace->GetLibs());
				};
			};

			return Nil;
		}

		method : public : SignatureHelp(line_pos : Int, char_pos : Int) ~ JsonElement {
			proxy := AstProxy->New(@workspace, @uri, true, @is_debug);
			leaving {
				proxy->Release();
			};

			index := GetDocumentIndex(line_pos, char_pos);
			if(index > -1) {
				var_str := "";	mthd_str := "";
				if(GetVariableMethodStrings(index, var_str, mthd_str)) {
					return proxy->SignatureHelp(line_pos, char_pos, var_str, mthd_str, @uri, @workspace->GetLibs());
				};
			};
			
			return Nil;
		}

		method : public : CodeAction(start_range_line : Int, start_range_char : Int, end_range_line : Int, end_range_char : Int, message : String, context : String, build_file : String) ~  JsonElement {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("=> CodeAction: uri='{$@uri}', start=({$start_range_line},{$start_range_char}), end=({$end_range_line},{$end_range_char}), message='{$message}', context='{$context}', build_file='{$build_file}'");
			};
			
			proxy := AstProxy->New(@workspace, @uri, false, @is_debug);
			leaving {
				proxy->Release();
			};

			if(context->Equals("quickfix") & message->StartsWith("Undefined class")) {
				start := message->Find('\'');
				last := message->FindLast('\'');

				if(last > start) {
					start += 1;
					return proxy->CodeAction(@uri, start_range_line, start_range_char, message->SubString(start, last - start), build_file);
				};
			};

			return Nil;
		}

		method : public : FormatRange(tab_spaces : Int, insert_spaces : Bool, start_range_line : Int, start_range_char : Int, end_range_line : Int, end_range_char : Int) ~  JsonElement {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("=> FormatRange: uri='{$@uri}', tab_spaces={$tab_spaces}, insert_spaces={$insert_spaces}, start=({$start_range_line},{$start_range_char}), end=({$end_range_line},{$end_range_char})");
			};

			# create formatter
			options := Map->New()<String, String>;
			options->Insert("function-space", "false");
			if(insert_spaces) {
				options->Insert("ident-space", tab_spaces->ToString());
			};
			options->Insert("start-line", (start_range_line + 1)->ToString());
			options->Insert("end-line", (end_range_line + 1)->ToString());

			formatter := CodeFormatter->New(options);
			new_text := PutText(formatter->Format(GetText(@text)));

			# format and upate json
			edits_builder := JsonBuilder->New();
			edits_builder->PushArray();
			
			edits_builder->PushObject();
			edits_builder->Insert("newText", new_text);

			edits_builder->PushObject("range");
			obj := edits_builder->PushObject("start");
			obj->Insert("line", start_range_line);
			if(new_text->StartsWith(' ') | new_text->StartsWith('\t')) {
				obj->Insert("character", start_range_char);
			}
			else {
				obj->Insert("character", 0);
			};
			
			edits_builder->Pop();

			obj := edits_builder->PushObject("end");
			obj->Insert("line", end_range_line);
			obj->Insert("character", end_range_char);

			edits_builder->Pop();
			edits_builder->Pop();
			edits_builder->Pop();
			
			return edits_builder->Pop();
		}

		method : public : FormatDocument(tab_spaces : Int, insert_spaces : Bool) ~  JsonElement {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("=> FormatDocument: uri='{$@uri}', tab_spaces={$tab_spaces}, insert_spaces={$insert_spaces}");
			};

			# get ranges
			end_ranges := GetDocumentEnd();

			end_line := end_ranges[0];
			end_index := end_ranges[1];

			# create formatter
			options := Map->New()<String, String>;
			options->Insert("function-space", "false");
			options->Insert("trim-trailing", "true");
			if(insert_spaces) {
				options->Insert("ident-space", tab_spaces->ToString());
			};
			formatter := CodeFormatter->New(options);
			new_text := PutText(formatter->Format(GetText(@text)));
			
			# format and upate json
			edits_builder := JsonBuilder->New();
			edits_builder->PushArray();
			
			edits_builder->PushObject();
			edits_builder->Insert("newText", new_text);

			edits_builder->PushObject("range");
			obj := edits_builder->PushObject("start");
			obj->Insert("line", 0);
			obj->Insert("character", 0);
			edits_builder->Pop();

			obj := edits_builder->PushObject("end");
			obj->Insert("line", end_line);
			obj->Insert("character", end_index);

			return edits_builder->PopAll();
		}

		method : public : GetVariableMethodStrings(index : Int, var_str : String, mthd_str : String, offset : Bool := true) ~ Bool {
			start_pos := index;

			while(@text->Get(index)->IsChar() | @text->Get(index) = '_'  | @text->Get(index) = '@' | @text->Get(index) = '(' | @text->Get(index) = ')') {
				index -= 1;
			};
			end_pos := index;

			length := start_pos - end_pos;
			if(offset) {
				length -= 2;
			};

			if(length > 0) {
				mthd_str += @text->SubString(end_pos + 1, length);
			};

			while(@text->Get(index) = ' ' | 
					(@text->Get(index) = 'n' & @text->Get(index - 1) = '\\') |
					(@text->Get(index) = 'r' & @text->Get(index - 1) = '\\') |
					(@text->Get(index) = 't' & @text->Get(index - 1) = '\\')) {
				index -= 1;
				if(@text->Get(index - 1) = '\\') {
					index -= 1;
				};
			};

			has_var := @text->Get(index) = '>' & @text->Get(index - 1) = '-';
			if(has_var) {
				index -= 2;
				
				start_pos := index;

				# variable
				if(@text->Get(index)->IsChar() | @text->Get(index) = '_' |  @text->Get(index) = '@') {
					while(@text->Get(index)->IsChar() | @text->Get(index) = '_' |  @text->Get(index) = '@') {
						index -= 1;
					};
				}
				# character
				else if(@text->Get(index) = '\'') {
					index -= 1;
					while(@text->Get(index) <> '\'' & @text->Get(index - 1) <> '\\') {
						index -= 1;
					};
					index -= 1;
				}
				# string
				else if(@text->Get(index) = '"') {
					index -= 1;
					while(@text->Get(index) <> '"' & @text->Get(index - 1) <> '\\') {
						index -= 1;
					};
					index -= 1;
				};

				end_pos := index;

				length := start_pos - end_pos;
				if(length > 0) {
					var_str += @text->SubString(end_pos + 1, length);
				};
			};

			return <>(var_str->IsEmpty() & mthd_str->IsEmpty());
		}

		method : public : Update(range_length : Int, text : String, start_line : Int, start_char: Int, end_line : Int, end_char : Int) ~ Nil {
			start := GetDocumentIndex(start_line, start_char);
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("### Update: start={$start}, range_length={$range_length}, text='{$text}'; start_line={$start_line}, start_char={$start_char}; end_line={$end_line}, end_char={$end_char} ###");
			};
			
			if(start > -1) {
				if(range_length > 0) {
					@text->Delete(start, range_length);
				};
				@text->Insert(start, GetText(text));
			};
		}

		method : public : Release() ~ Nil {
			@text := @alt_text := Nil;
		}

		method : public : GetText() ~ String {
			return @text;
		}

		method : public : GetAltText() ~ String {
			return @alt_text;
		}

		method : GetLineCharacterIndex(index : Int, line_pos : IntHolder, char_pos : IntHolder) ~ Nil {
			cur_line := 0;
			cur_char := 0;

			for(pos := 0; pos < index; pos += 1;) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\\') {
					if(next_char = 'n') {
							cur_line += 1;
							cur_char := 0;
					};
					
					pos += 1;
					cur_char += 1;
				}
				else {
					cur_char += 1;
				};
			};

			line_pos->Set(cur_line);
			char_pos->Set(cur_char - 1);
		}

		method : GetDocumentIndex(line_pos : Int, char_pos : Int) ~ Int {
			if(@text = Nil  | (line_pos = 0 & char_pos = 0)) {
				return 0;
			};
			
			cur_line := 0; cur_char := 0;
			each(pos : @text) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\n') {
					cur_line += 1;					
				};
				cur_char += 1;

				if(cur_line = line_pos) {
					index := cur_char + char_pos;
					if(cur_line = 0) {
						index -= 1;
					};
					
					return index;
				};
			};

			return -1;
		}

		method : GetDocumentEnd() ~ Int[] {
			indexes := Int->New[2];

			cur_line := 0; cur_char := 0;
			each(pos : @text) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\n') {
					cur_line += 1;
					cur_char := 0;			
				};
				cur_char += 1;
			};
			indexes[0] := cur_line;
			indexes[1] := cur_char;

			return indexes;
		}

		function : PutText(text : String) ~ String {
			out := "";

			each(i : text) {
				cur_char := text->Get(i);
				select(cur_char) {
					label '\t' {
						out += "\\t";
					}

					label '\r' {
						out += "\\r";
					}

					label '\n' {
						out += "\\n";
					}

					label '\\' {
						out += "\\\\";
					}

					label '"' {
						out += "\\\"";
					}

					other {
						out += cur_char;
					}
				};
			};

			return out;
		}

		function : GetText(text : String) ~ String {
			out := "";

			each(i : text) {
				cur_char := text->Get(i);
				next_char := '\0';
				if(i + 1 < text->Size()) {
					next_char := text->Get(i + 1);
				};

				if(cur_char = '\\') {
					select(next_char) {
						label 't' {
							out += '\t';
							i += 1;
						}

						label 'r' {
							out += '\r';
							i += 1;
						}

						label 'n' {
							out += '\n';
							i += 1;
						}

						label '\\' {
							out += '\\';
							i += 1;
						}

						label '"' {
							out += '"';
							i += 1;
						}

						other {
							out += cur_char;
						}
					};
				}
				else {
					out += cur_char;
				};
			};

			return out;
		}

		method : DumpDocument() ~ Nil {
			if(@is_debug) {
				System.IO.Filesystem.Logger->Instance()->Info("TEXT='{$@text}'");
			};
		}
	}

	#~
	Handles JSON-RPC requests
	~#
	class : private : RpcRequest {
		@id : Int;
		@mthd : String;
		@params : JsonElement;
		@is_debug : Bool;

		New(id : Int, mthd : String, params : JsonElement) {
			@id := id;
			@mthd := mthd;
			@params := params;
			@is_debug := true;
		}

		method : public : GetId() ~ Int {
			return @id;
		}

		method : public : GetMethod() ~ String {
			return @mthd;
		}

		method : public : GetParams() ~ JsonElement {
			return @params;
		}
	}
}