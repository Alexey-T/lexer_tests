set_pixel_size( WINDOW_XSIZE / 256 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

fn audio_callback(
    $stream, 
    $userdata, 
    $channels, 
    $frames, 
    $output_time_in_system_ticks, 
    $in_channels, 
    $latency_in_frames )
{
    clean( $channels[ 0 ] )
    $t = 0 while $t < tracks_num
    {
	$phase = tracks_phase[ $t ]
	$delta = ( tracks_freq[ $t ] * 32768 ) / 44100
	if $delta != 0
	{
	    $buf = tracks_buf[ $t ]
	    generator( OP_SIN, $buf, ( $phase / 32768 ) * 2 * M_PI, 1 / tracks_num, ( $delta / 32768 ) * 2 * M_PI, 0, 0, $frames )
	    op_cc( OP_ADD, $channels[ 0 ], $buf, 0, 0, $frames )
	    tracks_phase[ $t ] = ( $phase + $delta * $frames ) & 32767
	}
	$t + 1
    }
    copy( master_scope, $channels[ 0 ] )
    ret( 1 )
}

freq_mul = 0 //3/2

fn set_freq( $track, $freq )
{
    tracks_freq[ $track ] = $freq
    logf( "%d = %f Hz\n", $track + 1, $freq )
}

fn set_tone( $track, $n )
{
    if $n == 0 { set_freq( $track, 0 ) ret }
    tracks_tone[ $track ] = $n
    if freq_mul == 0
    {
	set_freq( $track, base_freq * $n )
    }
    else
    {
	$f = base_freq
	$i = 1 while $i < $n
	{
	    $f * freq_mul
	    $i + 1
	}
	while $f >= base_freq * 2
	{
	    $f / 2
	}
	set_freq( $track, $f )
    }
}

scr = get_screen()
xsize = get_xsize( scr )
ysize = get_ysize( scr )

scope_size = 256
master_scope = new( scope_size, 1, FLOAT )
clean( master_scope )

tracks_num = 3
tracks_phase = new( 1, tracks_num, INT )
tracks_freq = new( 1, tracks_num, FLOAT )
tracks_tone = new( 1, tracks_num, FLOAT )
tracks_buf = new( 1, tracks_num, INT )
clean( tracks_phase )
clean( tracks_freq )
clean( tracks_tone )
clean( tracks_buf )
i = 0 while i < tracks_num
{
    tracks_buf[ i ] = new( 4096, 1, FLOAT )
    clean( tracks_buf[ i ] )
    i + 1
}
base_freq = 44100 / scope_size
i = 0 while i < tracks_num
{
    set_freq( i, base_freq * ( i + 1 ) )
    i + 1
}

set_audio_callback( audio_callback, 0, 44100, FLOAT32, 1 )

while( 1 )
{    
    while( get_event() ) 
    {
	if EVT[ EVT_TYPE ] == EVT_QUIT { breakall } 
	if EVT[ EVT_TYPE ] == EVT_BUTTONDOWN
	{
	    $key = EVT[ EVT_KEY ]

            if $key == '1' { set_tone( 0, 1 ) }
            if $key == '2' { set_tone( 0, 2 ) }
            if $key == '3' { set_tone( 0, 3 ) }
            if $key == '4' { set_tone( 0, 4 ) }
            if $key == '5' { set_tone( 0, 5 ) }
            if $key == '6' { set_tone( 0, 6 ) }
            if $key == '7' { set_tone( 0, 7 ) }
            if $key == '8' { set_tone( 0, 8 ) }
            if $key == '9' { set_tone( 0, 9 ) }
            if $key == '0' { set_tone( 0, 10 ) }
            if $key == '-' { set_tone( 0, 11 ) }
            if $key == '=' { set_tone( 0, 12 ) }
            if $key == KEY_BACKSPACE { set_tone( 0, 13 ) }
            if $key == KEY_F1 { set_tone( 0, 14 ) }
            if $key == KEY_F2 { set_tone( 0, 15 ) }
            if $key == KEY_F3 { set_tone( 0, 16 ) }

            if $key == 'q' { set_tone( 1, 1 ) }
            if $key == 'w' { set_tone( 1, 2 ) }
            if $key == 'e' { set_tone( 1, 3 ) }
            if $key == 'r' { set_tone( 1, 4 ) }
            if $key == 't' { set_tone( 1, 5 ) }
            if $key == 'y' { set_tone( 1, 6 ) }
            if $key == 'u' { set_tone( 1, 7 ) }
            if $key == 'i' { set_tone( 1, 8 ) }
            if $key == 'o' { set_tone( 1, 9 ) }
            if $key == 'p' { set_tone( 1, 10 ) }
            if $key == '[' { set_tone( 1, 11 ) }
            if $key == ']' { set_tone( 1, 12 ) }

            if $key == 'a' { set_tone( 2, 1 ) }
            if $key == 's' { set_tone( 2, 2 ) }
            if $key == 'd' { set_tone( 2, 3 ) }
            if $key == 'f' { set_tone( 2, 4 ) }
            if $key == 'g' { set_tone( 2, 5 ) }
            if $key == 'h' { set_tone( 2, 6 ) }
            if $key == 'j' { set_tone( 2, 7 ) }
            if $key == 'k' { set_tone( 2, 8 ) }
            if $key == 'l' { set_tone( 2, 9 ) }
            if $key == ';' { set_tone( 2, 10 ) }
            if $key == 0x27 { set_tone( 2, 11 ) }
            if $key == KEY_ENTER { set_tone( 2, 12 ) }
            
            if $key == ' ' { set_tone( 0, 0 ) set_tone( 1, 0 ) set_tone( 2, 0 ) }
            if $key == 'z' { freq_mul = 0 }
            if $key == 'x' { freq_mul = 3/2 }
	}
    }

    clear()

    $track_ysize = ysize / tracks_num
    $y = -ysize / 2 + $track_ysize / 2
    $x = -xsize / 2
    $t = 0 while $t < tracks_num
    {
	if tracks_freq[ $t ] != 0
	{
	    $buf = tracks_buf[ $t ]
	    $i = 0 while $i < scope_size
	    {
	        $xx = $x + ( $i * xsize ) / scope_size
		dot( $xx, $y + $buf[ $i ] * $track_ysize / 2, GREEN )
		$i + 1
	    }
	    ts = "" sprintf( ts, "x %d\n%d Hz", tracks_tone[ $t ], tracks_freq[ $t ] ) 
	    print( ts, xsize / 2 - 8, $y, WHITE, RIGHT )
	}
	$y + $track_ysize
	$t + 1
    }

    $y = 0
    $i = 0 while $i < scope_size
    {
        $xx = $x + ( $i * xsize ) / scope_size
	dot( $xx, $y + master_scope[ $i ] * ysize / 2, BLUE )
	$i + 1
    }
    
    print( "Control keys:
 Harmonic 1: 1234567890-=
 Harmonic 2: qwertyuiop[]
 Harmonic 3: asdfghjkl;'
 All notes off: SPACE
 All overtones: z
 Only 3/2 intervals: x", -xsize / 2 + 8, -ysize / 2 + 8, WHITE, LEFT | TOP )

    frame( 50 )
}

