set_pixel_size( WINDOW_XSIZE / 480 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

scr = get_screen()
xsize = get_xsize( scr )
ysize = get_ysize( scr )

g_fgear_v = -1 //Vertices
g_fgear_t = -1 //Triangles
g_fgear_p = 0 //Number of points
g_fgear_r1 = 0 //Radius1
g_fgear_r2 = 0 //Radius2
g_fgear_tn = 0 //Number of teeth
g_fgear_c = 0 //Color

//Main loop:
start_timer( 0 )
while 1
{
    transp( 128 )
    clear()
    $t = get_timer( 0 ) / 4000
    
    $r = xsize / 16 * ( sin( $t * M_PI * 2 ) + 2 )
    t_rotate( $t * 360, 0, 0, 1 )
    draw_gear( 0, 0, $r, $r*( sin( $t * M_PI * 4 )/2 + 1 ), 32, 8, #80EE60 )
    transp( 64 )
    t_reset()
    t_rotate( $t/4 * 360, 0, 0, 1 )
    draw_gear( 0, 0, $r*2, $r*2*( cos( $t * M_PI * 4 )/2 + 1 ), 30, 5, #80EE60 )
    t_reset()
    transp( 255 )
    
    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }
    frame()
}

fn draw_gear( $cx, $cy, $radius1, $tooth_radius, $number_of_points, $teeth_num, $color )
{
    if $number_of_points < 3 { ret }
    $number_of_points div 1

    if get_transp() == 0 { ret }

    if g_fgear_p != $number_of_points
    {
	$c = 0
	if g_fgear_v == -1
	{
	    g_fgear_v = new( ( $number_of_points + 1 ) * 8, 1, FLOAT32 )
	    g_fgear_t = new( $number_of_points * 8, 1, INT )
	    $c = 1
	}
	else
	{
	    if $number_of_points > g_fgear_p
	    {
		resize( g_fgear_v, ( $number_of_points + 1 ) * 8, 1 )
		resize( g_fgear_t, $number_of_points * 8, 1 )
		$c = 1
	    }
	}
	if $c
	{
	    clean( g_fgear_v )
	    clean( g_fgear_t )
	}
	$p = 0 while $p < $number_of_points
	{
	    $pp = $p * 8
	    g_fgear_t[ $pp + 0 ] = 0 //vertex1
	    g_fgear_t[ $pp + 1 ] = $p + 1 //vertex2
	    g_fgear_t[ $pp + 2 ] = $p + 2 //vertex3
	    g_fgear_t[ $pp + 3 ] = $color
	    g_fgear_t[ $pp + 4 ] = -1 //texture
	    g_fgear_t[ $pp + 5 ] = 255 //alpha
	    g_fgear_t[ $pp + 7 ] = $p //order
    	    $p + 1
	}
	g_fgear_t[ ( $number_of_points - 1 ) * 8 + 2 ] = 1
	g_fgear_p = $number_of_points
	g_fgear_c = $color
    }
    if g_fgear_c != $color
    {
	$p = 0 while $p < $number_of_points
	{
	    $pp = $p * 8
	    g_fgear_t[ $pp + 3 ] = $color
    	    $p + 1
	}
	g_fgear_c = $color
    }
    if $radius1 != g_fgear_r1 || $tooth_radius != g_fgear_r2 || g_fgear_tn != $teeth_num
    {
	$tp = 0
	$td = ( $teeth_num * 2 ) / $number_of_points
	$p = 0 while $p < $number_of_points
	{
	    if ( $tp & 1 ) == 0
	    {
		$r = $tooth_radius
	    }
	    else
	    {
		$r = $radius1
	    }
    	    $v = $p / $number_of_points
    	    $x = cos( M_PI * 2 * $v ) * $r
	    $y = sin( M_PI * 2 * $v ) * $r
	    $pp = $p + 1
	    g_fgear_v[ $pp * 8 + 0 ] = $x
	    g_fgear_v[ $pp * 8 + 1 ] = $y
	    $p + 1
	    $tp + $td
	}
	g_fgear_r1 = $radius1
	g_fgear_r2 = $tooth_radius
	g_fgear_tn = $teeth_num
    }
    t_push_matrix()
    t_translate( $cx, $cy, 0 )
    triangles3d( g_fgear_v, g_fgear_t, $number_of_points )
    t_pop_matrix()
}
