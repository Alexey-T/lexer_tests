fn gl_callback( $userdata )
{
    $t = ( get_timer( 0 ) & 8191 ) / 8192
    $t2 = $t * M_PI * 2

    t_reset()

    set_screen( GL_SCREEN ) //Enable OpenGL drawing mode
    set_zbuf( GL_ZBUF )

    clear( #203040 )
    clear_zbuf()

    $path_radius = img_ysize / 4
    t_set_camera( 
	cos( $t2 ) * $path_radius, -200, -sin( $t2 ) * $path_radius,
	-60, -$t * 360, 0,
	4, img_ysize*2,
	100 )

    //t_scale( 4, 4, 4 )
    t_rotate( 90, 1, 0, 0 )
    t_scale( 1, 1, sin( $t2 ) )
    gl_draw_arrays( GL_TRIANGLE_STRIP, 0, land_vcnt, 255, 255, 255, 255, -1, land_v, land_c )

    t_reset()
    //pixi( img )

    ts = ""
    sprintf( ts, "FPS:%u", FPS )
    print( ts, -WINDOW_XSIZE div 2 + 8, -WINDOW_YSIZE div 2 + 8, WHITE, TOP | LEFT )

    set_zbuf( -1 )
    set_screen( 0 ) //Back to the default screen
}

start_timer( 0 )

img = load( "../graphics/images/test2.jpg" )
img_xsize = get_xsize( img )
img_ysize = get_ysize( img )
land_v = new( 1, 1, FLOAT )
land_c = new( 1, 1, INT8 )
land_vcnt = make_landscape_from_image( img, land_v, land_c )

set_gl_callback( 
    gl_callback, //OpenGL frame drawing function
    0 ) //Some user-defined data

while 1
{
    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }
    frame()
}

//x,y,z - camera position;
//r1 - rotation around the X-axis;
//r2 - rotation around the Y-axis;
//r3 - rotation around the Z-axis;
//near,far - visible Z range;
//angle_of_view - viewing angle in degrees
fn t_set_camera( $x, $y, $z, $r1, $r2, $r3, $near, $far, $angle_of_view )
{
    $aspect_ratio = WINDOW_XSIZE / WINDOW_YSIZE
    $scale = tan( $angle_of_view * 0.5 * M_PI / 180 ) * $near
    $r = $aspect_ratio * $scale
    $l = -$r
    $t = -$scale
    $b = -$t
    t_frustum( $l, $r, $b, $t, $near, $far )
    if $r1 { t_rotate( $r1, 1, 0, 0 ) }
    if $r2 { t_rotate( $r2, 0, 1, 0 ) }
    if $r3 { t_rotate( $r3, 0, 0, 1 ) }
    t_translate( -$x, -$y, -$z )
}

//Parallel projection:
fn t_orthographic( $left, $right, $bottom, $top, $z_near, $z_far )
{
    t_scale( WINDOW_XSIZE / 2, -WINDOW_YSIZE / 2, -WINDOW_ZSIZE / 2 ) //OpenGL NDC -> Pixilang coordinates

    if tmp_matrix == 0 { tmp_matrix = new( 4, 4, FLOAT ) }
    $m = tmp_matrix
    clean( $m )
    $m[ 0 ] = 2 / ( $right - $left )
    $m[ 4 + 1 ] = 2 / ( $top - $bottom )
    $m[ 8 + 2 ] = -2 / ( $z_far - $z_near )
    $m[ 12 + 0 ] = - ( $right + $left ) / ( $right - $left )
    $m[ 12 + 1 ] = - ( $top + $bottom ) / ( $top - $bottom )
    $m[ 12 + 2 ] = - ( $z_far + $z_near ) / ( $z_far - $z_near )
    $m[ 12 + 3 ] = 1
    t_mul_matrix( $m )
}

//Perspective projection:
fn t_frustum( $left, $right, $bottom, $top, $z_near, $z_far )
{
    t_scale( WINDOW_XSIZE / 2, -WINDOW_YSIZE / 2, -WINDOW_ZSIZE / 2 ) //OpenGL NDC -> Pixilang coordinates

    if tmp_matrix == 0 { tmp_matrix = new( 4, 4, FLOAT ) }
    $m = tmp_matrix
    clean( $m )
    $m[ 0 ] = 2 * $z_near / ( $right - $left )
    $m[ 5 ] = 2 * $z_near / ( $top - $bottom )
    $m[ 8 ] = ( $right + $left ) / ( $right - $left )
    $m[ 9 ] = ( $top + $bottom ) / ( $top - $bottom )
    $m[ 10 ] = -( $z_far + $z_near ) / ( $z_far - $z_near )
    $m[ 11 ] = -1
    $m[ 14 ] = -2 * $z_far * $z_near / ( $z_far - $z_near )
    t_mul_matrix( $m )
}

//$img - source
//$v - vertex array for gl_draw_arrays( GL_TRIANGLE_STRIP...
//$c - color array
fn make_landscape_from_image( $img, $v, $c )
{
    $img_xsize = get_xsize( $img )
    $img_ysize = get_ysize( $img )
    $img_hxsize = $img_xsize / 2
    $img_hysize = $img_ysize / 2
    $vcnt = $img_xsize * $img_ysize
    $vcnt + ( $img_xsize + 1 ) * ( $img_ysize - 2 )
    resize( $v, 3, $vcnt, FLOAT )
    resize( $c, 3, $vcnt, INT8 )
    $vp = 0
    $cp = 0
    for( $y = 0; $y < $img_ysize; $y + 1 )
    {
	if $y & 1
	{
	    for( $x = $img_xsize - 1; $x >= 0; $x - 1 )
	    {
		$color = $img[ $x, $y ]
		$color2 = $img[ $x, $y + 1 ]
		$rr = get_red( $color )
		$gg = get_green( $color )
		$bb = get_blue( $color )
		$rr2 = get_red( $color2 )
		$gg2 = get_green( $color2 )
		$bb2 = get_blue( $color2 )
		$v[ $vp ] = $x - $img_hxsize
		$v[ $vp + 1 ] = $y - $img_hysize
		$v[ $vp + 2 ] = $bb //z
		$v[ $vp + 3 ] = $x - $img_hxsize
		$v[ $vp + 4 ] = $y + 1 - $img_hysize
		$v[ $vp + 5 ] = $bb2 //z
		$vp + 6
		$c[ $cp ] = $rr
		$c[ $cp + 1 ] = $gg
		$c[ $cp + 2 ] = $bb
		$c[ $cp + 3 ] = $rr2
		$c[ $cp + 4 ] = $gg2
		$c[ $cp + 5 ] = $bb2
		$cp + 6
	    }
	}
	else
	{
	    for( $x = 0; $x < $img_xsize; $x + 1 )
	    {
		$color = $img[ $x, $y ]
		$color2 = $img[ $x, $y + 1 ]
		$rr = get_red( $color )
		$gg = get_green( $color )
		$bb = get_blue( $color )
		$rr2 = get_red( $color2 )
		$gg2 = get_green( $color2 )
		$bb2 = get_blue( $color2 )
		$v[ $vp ] = $x - $img_hxsize
		$v[ $vp + 1 ] = $y - $img_hysize
		$v[ $vp + 2 ] = $bb //z
		$v[ $vp + 3 ] = $x - $img_hxsize
		$v[ $vp + 4 ] = $y + 1 - $img_hysize
		$v[ $vp + 5 ] = $bb2 //z
		$vp + 6
		$c[ $cp ] = $rr
		$c[ $cp + 1 ] = $gg
		$c[ $cp + 2 ] = $bb
		$c[ $cp + 3 ] = $rr2
		$c[ $cp + 4 ] = $gg2
		$c[ $cp + 5 ] = $bb2
		$cp + 6
	    }
	}
	if $y < $img_ysize - 1
	{
	    for( $a = 0; $a < 3; $a + 1 ) { $v[ $vp ] = $v[ $vp - 3 ] ; $vp + 1 }
	    for( $a = 0; $a < 3; $a + 1 ) { $c[ $cp ] = $c[ $cp - 3 ] ; $cp + 1 }
	}
    }
    ret( $vcnt )
}
