/*

  Universal 2D graphic primitives:

  circle( $x, $y, $radius, $number_of_points, $color )
    Draw a circle.

  fcircle( $x, $y, $radius, $number_of_points, $color )
    Draw a filled circle.

  star( $x, $y, $radius1, $radius2, $number_of_points, $color )
    Draw a star.

  fstar( $x, $y, $z, $radius1, $radius2, $number_of_points, $color )
    Draw a filled star.

  farrow( $x1, $y1, $x2, $y2, $size1, $size2, $size3, $bidirect, $color )
    Draw a filled arrow.

  ftriangle( $x1, $y1, $x2, $y2, $x3, $y3, $color )
    Draw a filled triangle.

*/

fn circle( $cx, $cy, $radius, $number_of_points, $color )
{
    if $number_of_points < 3 { ret }
    $number_of_points div 1

    if get_transp() == 0 { ret }

    $px = $cx + cos( 0 ) * $radius
    $py = $cy + sin( 0 ) * $radius
    $p = 1 while $p <= $number_of_points
    {
        $v = $p / $number_of_points
        $x = $cx + cos( M_PI * 2 * $v ) * $radius
	$y = $cy + sin( M_PI * 2 * $v ) * $radius
	line( $px, $py, $x, $y, $color )
	$px = $x
	$py = $y
        $p + 1
    }
}

g_fcircle_v = -1 //Vertices
g_fcircle_t = -1 //Triangles
g_fcircle_p = 0 //Number of points
g_fcircle_c = 0 //Color

fn fcircle( $cx, $cy, $radius, $number_of_points, $color )
{
    if $number_of_points < 3 { ret }
    $number_of_points div 1

    if get_transp() == 0 { ret }

    if g_fcircle_p != $number_of_points
    {
	$c = 0
	if g_fcircle_v == -1
	{
	    g_fcircle_v = new( ( $number_of_points + 1 ) * 8, 1, FLOAT32 )
	    g_fcircle_t = new( $number_of_points * 8, 1, INT )
	    $c = 1
	}
	else
	{
	    if $number_of_points > g_fcircle_p
	    {
		resize( g_fcircle_v, ( $number_of_points + 1 ) * 8, 1 )
		resize( g_fcircle_t, $number_of_points * 8, 1 )
		$c = 1
	    }
	}
	if $c
	{
	    clean( g_fcircle_v )
	    clean( g_fcircle_t )
	}
	$p = 0 while $p < $number_of_points
	{
    	    $v = $p / $number_of_points
    	    $x = cos( M_PI * 2 * $v )
	    $y = sin( M_PI * 2 * $v )
	    $pp = $p + 1
	    g_fcircle_v[ $pp * 8 + 0 ] = $x
	    g_fcircle_v[ $pp * 8 + 1 ] = $y
	    $pp = $p * 8
	    g_fcircle_t[ $pp + 0 ] = 0 //vertex1
	    g_fcircle_t[ $pp + 1 ] = $p + 1 //vertex2
	    g_fcircle_t[ $pp + 2 ] = $p + 2 //vertex3
	    g_fcircle_t[ $pp + 3 ] = $color
	    g_fcircle_t[ $pp + 4 ] = -1 //texture
	    g_fcircle_t[ $pp + 5 ] = 255 //alpha
	    g_fcircle_t[ $pp + 7 ] = $p //order
    	    $p + 1
	}
	g_fcircle_t[ ( $number_of_points - 1 ) * 8 + 2 ] = 1
	g_fcircle_p = $number_of_points
	g_fcircle_c = $color
    }
    if g_fcircle_c != $color
    {
	$p = 0 while $p < $number_of_points
	{
	    $pp = $p * 8
	    g_fcircle_t[ $pp + 3 ] = $color
    	    $p + 1
	}
	g_fcircle_c = $color
    }
    t_push_matrix()
    t_translate( $cx, $cy, 0 )
    if $radius != 1 { t_scale( $radius, $radius, 0 ) }
    triangles3d( g_fcircle_v, g_fcircle_t, $number_of_points )
    t_pop_matrix()
}

fn star( $cx, $cy, $radius1, $radius2, $number_of_points, $color )
{
    if $number_of_points < 3 { ret }
    $number_of_points div 1
    
    if get_transp() == 0 { ret }
    
    $px = $cx + cos( 0 ) * $radius1
    $py = $cy + sin( 0 ) * $radius1
    $p = 1 while $p <= $number_of_points
    {
        $v = $p / $number_of_points
        if $p & 1
        {
    	    $r = $radius2
        }
        else
        {
    	    $r = $radius1
        }
        $x = $cx + cos( M_PI * 2 * $v ) * $r
	$y = $cy + sin( M_PI * 2 * $v ) * $r
	line( $px, $py, $x, $y, $color )
	$px = $x
	$py = $y
        $p + 1
    }
}

g_fstar_v = -1 //Vertices
g_fstar_t = -1 //Triangles
g_fstar_p = 0 //Number of points
g_fstar_r1 = 0 //Radius1
g_fstar_r2 = 0 //Radius2
g_fstar_c = 0 //Color

fn fstar( $cx, $cy, $radius1, $radius2, $number_of_points, $color )
{
    if $number_of_points < 3 { ret }
    $number_of_points div 1

    if get_transp() == 0 { ret }

    if g_fstar_p != $number_of_points
    {
	$c = 0
	if g_fstar_v == -1
	{
	    g_fstar_v = new( ( $number_of_points + 1 ) * 8, 1, FLOAT32 )
	    g_fstar_t = new( $number_of_points * 8, 1, INT )
	    $c = 1
	}
	else
	{
	    if $number_of_points > g_fstar_p
	    {
		resize( g_fstar_v, ( $number_of_points + 1 ) * 8, 1 )
		resize( g_fstar_t, $number_of_points * 8, 1 )
		$c = 1
	    }
	}
	if $c
	{
	    clean( g_fstar_v )
	    clean( g_fstar_t )
	}
	$p = 0 while $p < $number_of_points
	{
	    $pp = $p * 8
	    g_fstar_t[ $pp + 0 ] = 0 //vertex1
	    g_fstar_t[ $pp + 1 ] = $p + 1 //vertex2
	    g_fstar_t[ $pp + 2 ] = $p + 2 //vertex3
	    g_fstar_t[ $pp + 3 ] = $color
	    g_fstar_t[ $pp + 4 ] = -1 //texture
	    g_fstar_t[ $pp + 5 ] = 255 //alpha
	    g_fstar_t[ $pp + 7 ] = $p //order
    	    $p + 1
	}
	g_fstar_t[ ( $number_of_points - 1 ) * 8 + 2 ] = 1
	g_fstar_p = $number_of_points
	g_fstar_c = $color
    }
    if g_fstar_c != $color
    {
	$p = 0 while $p < $number_of_points
	{
	    $pp = $p * 8
	    g_fstar_t[ $pp + 3 ] = $color
    	    $p + 1
	}
	g_fstar_c = $color
    }
    if $radius1 != g_fstar_r1 || $radius2 != g_fstar_r2
    {
	$p = 0 while $p < $number_of_points
	{
	    if $p & 1
	    {
		$r = $radius2
	    }
	    else
	    {
		$r = $radius1
	    }
    	    $v = $p / $number_of_points
    	    $x = cos( M_PI * 2 * $v ) * $r
	    $y = sin( M_PI * 2 * $v ) * $r
	    $pp = $p + 1
	    g_fstar_v[ $pp * 8 + 0 ] = $x
	    g_fstar_v[ $pp * 8 + 1 ] = $y
	    $p + 1
	}
	g_fstar_r1 = $radius1
	g_fstar_r2 = $radius2
    }
    t_push_matrix()
    t_translate( $cx, $cy, 0 )
    triangles3d( g_fstar_v, g_fstar_t, $number_of_points )
    t_pop_matrix()
}

g_farrow_v = -1
g_farrow_t = -1

fn farrow( $x1, $y1, $x2, $y2, $size1, $size2, $size3, $bidirect, $color )
{
    if get_transp() == 0 { ret }
    
    if g_farrow_v == -1
    {
        g_farrow_v = new( 10 * 8, 1, FLOAT32 )
        g_farrow_t = new( 4 * 8, 1, INT )
        clean( g_farrow_v )
        clean( g_farrow_t )
    }
    
    $xx = $x2 - $x1
    $yy = $y2 - $y1
    $len = sqrt( $xx * $xx + $yy * $yy )
    if $len == 0 { ret }
    $angle = acos( $xx / $len ) //0 ... M_PI
    if $yy > 0
    {
	$angle = 2 * M_PI - $angle //M_PI ... M_PI * 2
    }
    
    $c1 = $size3 / $len
    $c2 = 1 - $c1
    
    $xstep_down = cos( $angle - M_PI / 2 )
    $ystep_down = -sin( $angle - M_PI / 2 )
    $xstep_up = cos( $angle + M_PI / 2 )
    $ystep_up = -sin( $angle + M_PI / 2 )
    
    $size1 / 2
    $size2 / 2
    
    $p = 0 * 8
    if $bidirect
    {
	$x = $x1 + $xx * $c1
	$y = $y1 + $yy * $c1
    }
    else
    {
	$x = $x1
	$y = $y1
    }
    g_farrow_v[ $p + 0 ] = $x + $xstep_down * $size1
    g_farrow_v[ $p + 1 ] = $y + $ystep_down * $size1
    $p = 1 * 8
    g_farrow_v[ $p + 0 ] = $x + $xstep_up * $size1
    g_farrow_v[ $p + 1 ] = $y + $ystep_up * $size1
    $p = 2 * 8
    $x = $x1 + $xx * $c2
    $y = $y1 + $yy * $c2
    g_farrow_v[ $p + 0 ] = $x + $xstep_up * $size1
    g_farrow_v[ $p + 1 ] = $y + $ystep_up * $size1
    $p = 3 * 8
    g_farrow_v[ $p + 0 ] = $x + $xstep_down * $size1
    g_farrow_v[ $p + 1 ] = $y + $ystep_down * $size1
    $p = 4 * 8
    g_farrow_v[ $p + 0 ] = $x + $xstep_down * $size2
    g_farrow_v[ $p + 1 ] = $y + $ystep_down * $size2
    $p = 5 * 8
    g_farrow_v[ $p + 0 ] = $x + $xstep_up * $size2
    g_farrow_v[ $p + 1 ] = $y + $ystep_up * $size2
    $p = 6 * 8
    g_farrow_v[ $p + 0 ] = $x2
    g_farrow_v[ $p + 1 ] = $y2
    if $bidirect
    {
	$p = 7 * 8
	$x = $x1 + $xx * $c1
	$y = $y1 + $yy * $c1
	g_farrow_v[ $p + 0 ] = $x + $xstep_down * $size2
	g_farrow_v[ $p + 1 ] = $y + $ystep_down * $size2
	$p = 8 * 8
	g_farrow_v[ $p + 0 ] = $x + $xstep_up * $size2
	g_farrow_v[ $p + 1 ] = $y + $ystep_up * $size2
	$p = 9 * 8
	g_farrow_v[ $p + 0 ] = $x1
	g_farrow_v[ $p + 1 ] = $y1
    }

    $p = 0 * 8
    g_farrow_t[ $p + 0 ] = 0 //vertex1
    g_farrow_t[ $p + 1 ] = 1 //vertex2
    g_farrow_t[ $p + 2 ] = 2 //vertex3
    g_farrow_t[ $p + 3 ] = $color
    g_farrow_t[ $p + 4 ] = -1
    g_farrow_t[ $p + 5 ] = 255
    g_farrow_t[ $p + 7 ] = $p div 8 //order
    $p = 1 * 8
    g_farrow_t[ $p + 0 ] = 0 //vertex1
    g_farrow_t[ $p + 1 ] = 2 //vertex2
    g_farrow_t[ $p + 2 ] = 3 //vertex3
    g_farrow_t[ $p + 3 ] = $color
    g_farrow_t[ $p + 4 ] = -1
    g_farrow_t[ $p + 5 ] = 255
    g_farrow_t[ $p + 7 ] = $p div 8 //order
    $p = 2 * 8
    g_farrow_t[ $p + 0 ] = 4 //vertex1
    g_farrow_t[ $p + 1 ] = 5 //vertex2
    g_farrow_t[ $p + 2 ] = 6 //vertex3
    g_farrow_t[ $p + 3 ] = $color
    g_farrow_t[ $p + 4 ] = -1
    g_farrow_t[ $p + 5 ] = 255
    g_farrow_t[ $p + 7 ] = $p div 8 //order
    if $bidirect
    {
	$p = 3 * 8
	g_farrow_t[ $p + 0 ] = 7 //vertex1
	g_farrow_t[ $p + 1 ] = 8 //vertex2
	g_farrow_t[ $p + 2 ] = 9 //vertex3
	g_farrow_t[ $p + 3 ] = $color
	g_farrow_t[ $p + 4 ] = -1
	g_farrow_t[ $p + 5 ] = 255
	g_farrow_t[ $p + 7 ] = $p div 8 //order
	$tnum = 4
    }
    else
    {
	$tnum = 3
    }

    triangles3d( g_farrow_v, g_farrow_t, $tnum )
}

g_ftr_v = -1
g_ftr_t = -1

fn ftriangle( $x1, $y1, $x2, $y2, $x3, $y3, $color )
{
    if get_transp() == 0 { ret }

    if g_ftr_v == -1
    {
        g_ftr_v = new( 3 * 8, 1, FLOAT32 )
        g_ftr_t = new( 3 * 8, 1, INT )
        clean( g_ftr_v )
        clean( g_ftr_t )

	g_ftr_t[ 0 ] = 0 //vertex1
	g_ftr_t[ 1 ] = 1 //vertex2
	g_ftr_t[ 2 ] = 2 //vertex3
	g_ftr_t[ 4 ] = -1
	g_ftr_t[ 5 ] = 255
	g_ftr_t[ 7 ] = 0 //order
    }

    g_ftr_v[ 8*0 + 0 ] = $x1
    g_ftr_v[ 8*0 + 1 ] = $y1
    g_ftr_v[ 8*1 + 0 ] = $x2
    g_ftr_v[ 8*1 + 1 ] = $y2
    g_ftr_v[ 8*2 + 0 ] = $x3
    g_ftr_v[ 8*2 + 1 ] = $y3

    g_ftr_t[ 3 ] = $color

    triangles3d( g_ftr_v, g_ftr_t, 1 )
}
