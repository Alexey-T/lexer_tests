set_pixel_size( WINDOW_XSIZE / 256 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

fn audio_callback( 
    $stream, 
    $userdata, 
    $channels, 
    $frames,
    $output_time_in_system_ticks, 
    $in_channels, 
    $latency_in_frames )
{
    wavetable_generator( $channels[ 0 ], 0, $frames, wave, wave_amp, wave_amp_delta, wave_pos, wave_pos_delta, 0, 1, polyphony )
    $ch = 1 while $ch < num_channels
    {
	copy( $channels[ $ch ], $channels[ 0 ] )
	$ch + 1
    }
    v = 0 while v < polyphony
    {
	//frequency decrease:
	wave_pos_delta[ v ] * 0.99
	v + 1
    }
    copy( oscbuf, $channels[ 1 ] )
    ret( 1 )
}

oscbuf = new( 256, 1, INT16 ) //Oscilloscope buffer
clean( oscbuf )

sample_rate = 44100
num_channels = 2 //stereo output

//Create a table with a waveform (32768 samples):
wave = new( 32768, 1, INT16 )
i = 0 while i < 32768
{
    wave[ i ] = sin( i / 32768 * M_PI * 2 ) * 32767
    i + 1
}

polyphony = 8 //number of voices
wave_amp = new( polyphony, 1, INT32 ) //INT32 array of amplitudes (fixed point 16.16)
wave_amp_delta = new( polyphony, 1, INT32 ) //INT32 array of amplitude delta values (fixed point 16.16)
wave_pos = new( polyphony, 1, INT32 ) //INT32 array of wavetable positions (fixed point 16.16)
wave_pos_delta = new( polyphony, 1, INT32 ) //INT32 array of wavetable position delta values (fixed point 16.16)
v = 0 while v < polyphony
{
    //For each voice:
    wave_amp[ v ] = ( 32768 << 16 ) / 8 //volume from 0 to 32768<<16
    wave_amp_delta[ v ] = 0 //not used in this example (no volume envelopes)
    wave_pos[ v ] = rand() << 16 //start phase
    note = rand() % 32 + 60 //MIDI note number
    freq = pow( 2, (note-69)/12 ) * 440 //MIDI note -> note frequency
    printf( "%d: %f Hz\n", v, freq )
    wave_pos_delta[ v ] = freq / sample_rate * (32768<<16)
    printf( "%d\n", wave_pos_delta[ v ] )
    v + 1
}

set_audio_callback( audio_callback, 0, sample_rate, INT16, num_channels )

rate1 = get_audio_sample_rate( 0 )
rate2 = get_audio_sample_rate( 1 )
logf( "Local (defined by the set_audio_callback()) sample rate: %d Hz\n", rate1 )
logf( "Global (defined in the global Pixilang preferences) sample rate: %d Hz\n", rate2 )
if rate1 != rate2
{
    logf( "%d != %d, so resampling will be enabled\n", rate1, rate2 )
}

while 1
{
    clear()

    x = 0 while( x < 256 )
    {
	dot( x - 128, oscbuf[ x ] / 512, GREEN )
	x + 1
    }

    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }

    frame()
}

