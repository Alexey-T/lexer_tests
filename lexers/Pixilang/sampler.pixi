set_pixel_size( WINDOW_XSIZE / 256 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

tick_size = 1024 * 8
tick_cnt = 0
tick_num = 0

buf = new( 256, 1, INT16 )
clean( buf )

sample_data = load( "sound_files/sound.wav" )
sample_info = new( SMP_INFO_SIZE, 1, INT32 )
clean( sample_info )
sample_info[ SMP_SRC ] = sample_data
sample_info[ SMP_SRC_OFF_H ] = 0
sample_info[ SMP_SRC_OFF_L ] = 0
sample_info[ SMP_LOOP ] = 0
sample_info[ SMP_LOOP_LEN ] = get_size( sample_data )
sample_info[ SMP_VOL1 ] = 32768 / 2
sample_info[ SMP_VOL2 ] = 32768 / 2
sample_info[ SMP_DELTA ] = ( 1 << 16 )

set_audio_callback( audio_callback, 0, 44100, INT16, 1 )

fn audio_callback(
    $stream, 
    $userdata, 
    $channels, 
    $frames, 
    $output_time_in_system_ticks, 
    $in_channels, 
    $latency_in_frames )
{
    $p = 0
    while( $p < $frames )
    {
	$size = $frames - $p;
	if $size > tick_size - tick_cnt { $size = tick_size - tick_cnt }

	sample_info[ SMP_DEST ] = $channels[ 0 ];
        sample_info[ SMP_DEST_OFF ] = $p;
	sample_info[ SMP_DEST_LEN ] = $size;
        sampler( sample_info )
        
        $p + $size
        tick_cnt + $size
        if tick_cnt >= tick_size
        {
	    sample_info[ SMP_DELTA ] = 1 + ( rand() % 32767 )
    	    tick_num + 1
    	    tick_cnt = 0
        }
    }
    copy( buf, $channels[ 0 ] )
    ret( 1 )
}

start_timer( 0 )

while( 1 )
{
    clear()
    
    x = 0 while( x < 256 )
    {
	dot( x - 128, buf[ x ] / 512, GREEN )
	x + 1
    }

    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }

    frame()
}

