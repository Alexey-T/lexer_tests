/**
 * stringify.du
 *
 * Testing the JSON.stringify() function
 *
 */
from UnitTest import UnitTest;

import JSON;

class TestJsonStringify < UnitTest {
    testJsonStringify(data) {
        this.assertEquals(JSON.stringify(data["value"]).unwrap(), data["expected"]);
    }

    testJsonStringifyProvider() {
        return [
            {"value": true, "expected": "true"},
            {"value": false, "expected": "false"},
            {"value": nil, "expected": "null"},
            {"value": 10, "expected": "10"},
            {"value": 10.5, "expected": "10.5"},
            {"value": "test", "expected": '"test"'},
            {"value": [], "expected": "[]"},
            {"value": {}, "expected": "{}"},

            {"value": [true], "expected": "[true]"},
            {"value": [false], "expected": "[false]"},
            {"value": [nil], "expected": "[null]"},
            {"value": [10], "expected": "[10]"},
            {"value": [10.5], "expected": "[10.5]"},
            {"value": ["test"], "expected": '["test"]'},
            {"value": [[]], "expected": "[[]]"},
            {"value": [{}], "expected": "[{}]"},

            {"value": {"test": true}, "expected": '{"test": true}'},
            {"value": {"test": false}, "expected": '{"test": false}'},
            {"value": {"test": nil}, "expected": '{"test": null}'},
            {"value": {"test": 10}, "expected": '{"test": 10}'},
            {"value": {"test": 10.5}, "expected": '{"test": 10.5}'},
            {"value": {"test": "test"}, "expected": '{"test": "test"}'},
            {"value": {"test": []}, "expected": '{"test": []}'},
            {"value": {"test": {}}, "expected": '{"test": {}}'},
            {"value": {10: {}}, "expected": '{"10": {}}'},
            {"value": {true: false}, "expected": '{"true": false}'},
            {"value": {nil: 10.5}, "expected": '{"null": 10.5}'},
            {"value": {"test": {"test": [1, 2, 3, {"test": true}]}}, "expected": '{"test": {"test": [1, 2, 3, {"test": true}]}}'},
        ];
    }

    testUnserializableObject() {
        class JsonTestError {
          init() {
            this.test = 0;
          }
        }

        const jsonError = JsonTestError();

        this.assertFalsey(JSON.stringify(jsonError).success());
        this.assertEquals(JSON.stringify(jsonError).unwrapError(), "Object is not serializable");
    }

    testTwoSpaceIndent() {
        const twoSpace = '[\n' +
            '  1,\n' +
            '  2\n' +
            ']';

        this.assertEquals(JSON.stringify([1, 2], 2).unwrap(), twoSpace);
    }

    testThreeSpaceIndent() {
        const threeSpace = '[\n' +
          '   1,\n' +
          '   2\n' +
          ']';

        this.assertEquals(JSON.stringify([1, 2], 3).unwrap(), threeSpace);
    }

    testFourSpaceIndent() {
        var fourSpace = '[\n' +
          '    1,\n' +
          '    2\n' +
          ']';

        this.assertEquals(JSON.stringify([1, 2], 4).unwrap(), fourSpace);
    }
}

TestJsonStringify().run();