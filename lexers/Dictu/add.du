/**
 * add.du
 *
 * Testing the set.add() method
 *
 * .add() mutates the set to add a value
 */
from UnitTest import UnitTest;

class TestSetAdd < UnitTest {
    testSetAdd() {
        const mySet = set();

        mySet.add("dictu");
        this.assertTruthy(mySet.contains("dictu"));
        this.assertEquals(mySet.len(), 1);

        mySet.add("is");
        this.assertTruthy(mySet.contains("is"));
        this.assertEquals(mySet.len(), 2);

        mySet.add("great!");
        this.assertTruthy(mySet.contains("great!"));
        this.assertEquals(mySet.len(), 3);
    }

    testSetAddMultipleTypes() {
        const mySet = set();

        mySet.add(1);
        this.assertTruthy(mySet.contains(1));
        this.assertEquals(mySet.len(), 1);

        mySet.add(true);
        this.assertTruthy(mySet.contains(true));
        this.assertEquals(mySet.len(), 2);

        mySet.add(nil);
        this.assertTruthy(mySet.contains(nil));
        this.assertEquals(mySet.len(), 3);

        mySet.add(false);
        this.assertTruthy(mySet.contains(false));
        this.assertEquals(mySet.len(), 4);

        mySet.add(10.5);
        this.assertTruthy(mySet.contains(10.5));
        this.assertEquals(mySet.len(), 5);
    }

    testSetAddSameValue() {
        const mySet = set();

        mySet.add(10);
        mySet.add(10);
        mySet.add(10);
        mySet.add(10);
        mySet.add(10);

        this.assertEquals(mySet.len(), 1);

        const anotherSet = set(10);

        anotherSet.add(10);
        anotherSet.add(10);
        anotherSet.add(10);
        anotherSet.add(10);
        anotherSet.add(10);

        this.assertEquals(anotherSet.len(), 1);
    }
}

TestSetAdd().run();