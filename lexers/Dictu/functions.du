/**
 * functions.du
 *
 * Testing importing functions from another script works
 */
from UnitTest import UnitTest;

import "../functions/parameters.du" as ParametersModule;
import "../functions/arrow.du" as ArrowFuncModule;

class TestModuleFunctions < UnitTest {
    /**
     * ArrowFuncModule
     *
     * Mirrors some of the tests in arrow.du
     */
    testArrowFunction() {
        this.assertType(ArrowFuncModule.func, "function");
        this.assertEquals(ArrowFuncModule.func(), 10);

        this.assertType(ArrowFuncModule.func1, "function");
        this.assertEquals(ArrowFuncModule.func1(), 30);
        this.assertEquals(ArrowFuncModule.func1(10, 20), 30);
        this.assertEquals(ArrowFuncModule.func1(1.5, 2.5), 4);
        this.assertEquals(ArrowFuncModule.func1("Dictu ", "is great!"), "Dictu is great!");
    }

    /**
     * Nested scope
     */
    testNestedScope() {
        {
            {
                import "../functions/arrow.du" as NestedArrowFuncModule;

                this.assertType(NestedArrowFuncModule.func, "function");
                this.assertEquals(NestedArrowFuncModule.func(), 10);

                this.assertType(NestedArrowFuncModule.func1, "function");
                this.assertEquals(NestedArrowFuncModule.func1(), 30);
                this.assertEquals(NestedArrowFuncModule.func1(10, 20), 30);
                this.assertEquals(NestedArrowFuncModule.func1(1.5, 2.5), 4);
                this.assertEquals(NestedArrowFuncModule.func1("Dictu ", "is great!"), "Dictu is great!");
                {
                    {
                        import JSON;
                        this.assertEquals(JSON.parse("10").unwrap(), 10);
                    }
                }
            }
        }
    }

    /**
     * Within a loop.
     *     There was an issue where functions defined in a loop wrongly shuffled the bytecode
     *     add a test to cover this
     */
    testFunctionsInLoop() {
        var x = 0;

        while (x < 10) {
            def myFunc() {
                this.assertType(x, 'number');
            }

            myFunc();
            x += 1;
        }
    }
}

/**
 * ParametersModule
 *
 * Mirrors the function calls in parameters.du
 */
// ParametersModule.test(10);
// ParametersModule.test1(5, 5);
// ParametersModule.test2(10, "hello", true);
// ParametersModule.optional();
// ParametersModule.oneOptional(10);
// ParametersModule.twoOptional(10, 20);
// ParametersModule.threeOptional(10, 20);
// ParametersModule.threeOptional(10, 20, true);
// ParametersModule.fourOptional(10, nil);
// ParametersModule.fourOptional(10, nil, true);
// ParametersModule.fourOptional(10, nil, true, 10);
// ParametersModule.largeParameters(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77);

