/**
 * toNumber.du
 *
 * Testing the str.toNumber() method
 *
 * .toNumber() converts a string to a number
 */
from UnitTest import UnitTest;

class TestStringToNumber < UnitTest {
    testStringToNumber() {
        this.assertEquals("10".toNumber().unwrap(), 10);
        this.assertEquals("   10".toNumber().unwrap(), 10);
        this.assertEquals("10.2".toNumber().unwrap(), 10.2);
        this.assertEquals("10.123456".toNumber().unwrap(), 10.123456);
        this.assertEquals("1000000".toNumber().unwrap(), 1000000);
    }

    testStringToNumberFailedParse() {
        this.assertEquals("10  ".toNumber().success(), false);
        this.assertEquals("number".toNumber().success(), false);
        this.assertEquals("10number".toNumber().success(), false);
        this.assertEquals("10number10".toNumber().success(), false);
        this.assertEquals("10..".toNumber().success(), false);
    }

    testStringToNumberFailedParseReason() {
        this.assertEquals("10  ".toNumber().unwrapError(), "Can not convert '10  ' to number");
        this.assertEquals("number".toNumber().unwrapError(), "Can not convert 'number' to number");
        this.assertEquals("10number".toNumber().unwrapError(), "Can not convert '10number' to number");
        this.assertEquals("10number10".toNumber().unwrapError(), "Can not convert '10number10' to number");
        this.assertEquals("10..".toNumber().unwrapError(), "Can not convert '10..' to number");
    }
}

TestStringToNumber().run();