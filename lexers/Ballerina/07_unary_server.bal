// Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import ballerina/grpc;
import ballerina/io;

listener grpc:Listener ep7 = new (9097);

@grpc:ServiceDescriptor {
    descriptor: ROOT_DESCRIPTOR_7,
    descMap: getDescriptorMap7()
}
service HelloWorld100 on ep7 {
    resource function hello(grpc:Caller caller, string name) {
        io:println("name: " + name);
        string message = "Hello " + name;
        grpc:Error? err = ();
        if (name == "invalid") {
            err = caller->sendError(grpc:ABORTED, "Operation aborted");
        } else {
            err = caller->send(message);
        }
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        }
        checkpanic caller->complete();
    }

    resource function testInt(grpc:Caller caller, int age) {
        io:println("age: " + age.toString());
        int displayAge = age - 2;
        grpc:Error? err = caller->send(displayAge);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("display age : " + displayAge.toString());
        }
        checkpanic caller->complete();
    }

    resource function testFloat(grpc:Caller caller, float salary) {
        io:println("gross salary: " + salary.toString());
        float netSalary = salary * 0.88;
        grpc:Error? err = caller->send(netSalary);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("net salary : " + netSalary.toString());
        }
        checkpanic caller->complete();
    }

    resource function testBoolean(grpc:Caller caller, boolean available) {
        io:println("is available: " + available.toString());
        boolean aval = available || true;
        grpc:Error? err = caller->send(aval);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("avaliability : " + aval.toString());
        }
        checkpanic caller->complete();
    }

    resource function testStruct(grpc:Caller caller, Request msg) {
        io:println(msg.name + " : " + msg.message);
        Response response = {resp:"Acknowledge " + msg.name};
        grpc:Error? err = caller->send(response);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("msg : " + response.resp);
        }
        checkpanic caller->complete();
    }

    resource function testNoRequest(grpc:Caller caller) {
        string resp = "service invoked with no request";
        grpc:Error? err = caller->send(resp);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("response : " + resp);
        }
        checkpanic caller->complete();
    }

    resource function testNoResponse(grpc:Caller caller, string msg) {
        io:println("Request: " + msg);
    }

    resource function testResponseInsideMatch(grpc:Caller caller, string msg) {
        io:println("Request: " + msg);
        Response? res = {resp:"Acknowledge " + msg};
        if (res is Response) {
            checkpanic caller->send(res);
        } else {
            checkpanic caller->sendError(grpc:NOT_FOUND, "No updates from that drone");
        }
        checkpanic caller->complete();
    }
}

type Request record {
    string name = "";
    string message = "";
    int age = 0;
};

type Response record {
    string resp = "";
};

const string
function getDescriptorMap7() returns map<string> {
    return {
        "HelloWorld100.proto":

        ,

        "google/protobuf/wrappers.proto":

        ,

        "google/protobuf/empty.proto":
        "0A1B676F6F676C652F70726F746F6275662F656D7074792E70726F746F120F676F6F676C652E70726F746F62756622070A05456D70747942760A13636F6D2E676F6F676C652E70726F746F627566420A456D70747950726F746F50015A276769746875622E636F6D2F676F6C616E672F70726F746F6275662F7074797065732F656D707479F80101A20203475042AA021E476F6F676C652E50726F746F6275662E57656C6C4B6E6F776E5479706573620670726F746F33"

    };
}
