// Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import ballerina/grpc;
import ballerina/io;

listener grpc:Listener ep = new (9091, {
    host:"localhost"
});

@grpc:ServiceDescriptor {
    descriptor: ROOT_DESCRIPTOR_1,
    descMap: getDescriptorMap1()
}
service HelloWorld on ep {

    resource function testInputNestedStruct(grpc:Caller caller, Person req) {
        io:println("name: " + req.name);
        string message = "Submitted name: " + req.name;
        io:println("Response message " + message);
        grpc:Error? err = caller->send(message);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        }
        checkpanic caller->complete();
    }

    resource function testOutputNestedStruct(grpc:Caller caller, string name) {
        io:println("requested name: " + name);
        Person person = {name:"Sam", address:{postalCode:10300, state:"CA", country:"USA"}};
        io:println(person);
        grpc:Error? err = caller->send(person);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        }
        checkpanic caller->complete();
    }

    resource function testInputStructOutputStruct(grpc:Caller caller, StockRequest req) {
        io:println("Getting stock details for symbol: " + req.name);
        StockQuote res = {symbol:"WSO2", name:"WSO2.com", last:149.52, low:150.70, high:
        149.18};
        io:println(res);
        grpc:Error? err = caller->send(res);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        }
        checkpanic caller->complete();
    }

    resource function testInputStructNoOutput(grpc:Caller caller, StockQuote req) {
        io:println("Symbol: " + req.symbol);
        io:println("Name: " + req.name);
        io:println("Last: " + req.last.toString());
        io:println("Low: " + req.low.toString());
        io:println("High: " + req.high.toString());
    }

    resource function testNoInputOutputStruct(grpc:Caller caller) {
        StockQuote res = {symbol:"WSO2", name:"WSO2 Inc.", last:14.0, low:15.0, high:16.0};
        StockQuote res1 = {symbol:"Google", name:"Google Inc.", last:100.0, low:101.0, high:102.0};
        StockQuotes quotes = {stock:[res, res1]};

        grpc:Error? err = caller->send(quotes);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        }
        checkpanic caller->complete();
    }

    resource function testNoInputOutputArray(grpc:Caller caller) {
        string[] names = ["WSO2", "Google"];
        StockNames stockNames = {names:names};
        grpc:Error? err = caller->send(stockNames);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        }
        checkpanic caller->complete();
    }
}

type Person record {
    string name = "";
    Address address = {};
};

type Address record {
    int postalCode = 0;
    string state = "";
    string country = "";
};

type StockQuote record {
    string symbol = "";
    string name = "";
    float last = 0.0;
    float low = 0.0;
    float high = 0.0;
};

type StockRequest record {
    string name = "";
};

type StockQuotes record {
    StockQuote[] stock = [];
};

type StockNames record {
    string[] names = [];
};

const string
function getDescriptorMap1() returns map<string> {
    return {
        "HelloWorld.proto":

        ,

        "google/protobuf/wrappers.proto":

        ,

        "google/protobuf/empty.proto":
        "0A0B656D7074792E70726F746F120F676F6F676C652E70726F746F62756622070A05456D70747942540A13636F6D2E676F6F676C652E70726F746F627566420A456D70747950726F746F50015A057479706573F80101A20203475042AA021E476F6F676C652E50726F746F6275662E57656C6C4B6E6F776E5479706573620670726F746F33"

    };
}
