// Copyright (c) 2018 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import ballerina/grpc;
import ballerina/io;

listener grpc:Listener ep2 = new (9092, {
    host:"localhost"
});

@grpc:ServiceDescriptor {
    descriptor: ROOT_DESCRIPTOR_2,
    descMap: getDescriptorMap2()
}
service HelloWorld3 on ep2 {

    resource function testIntArrayInput(grpc:Caller caller, TestInt req) {
        io:println(req);
        int[] numbers = req.values;
        int result = 0;
        foreach var number in numbers {
            result = result + number;
        }
        grpc:Error? err = caller->send(result);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("Result: " + result.toString());
        }
        checkpanic caller->complete();
    }

    resource function testStringArrayInput(grpc:Caller caller, TestString req) {
        io:println(req);
        string[] values = req.values;
        string result = "";
        foreach var value in values {
            result = result + "," + value;
        }
        grpc:Error? err = caller->send(result);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("Result: " + result);
        }
        checkpanic caller->complete();
    }

    resource function testFloatArrayInput(grpc:Caller caller, TestFloat req) {
        io:println(req);
        float[] values = req.values;
        float result = 0.0;
        foreach var value in values {
            result = result + value;
        }
        grpc:Error? err = caller->send(result);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("Result: " + result.toString());
        }
        checkpanic caller->complete();
    }

    resource function testBooleanArrayInput(grpc:Caller caller, TestBoolean req) {
        io:println(req);
        boolean[] values = req.values;
        boolean result = false;
        foreach var value in values {
            result = result || value;
        }
        grpc:Error? err = caller->send(result);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("Result: " + result.toString());
        }
        checkpanic caller->complete();
    }

    resource function testStructArrayInput(grpc:Caller caller, TestStruct req) {
        io:println(req);
        A[] values = req.values;
        string result = "";
        foreach var value in values {
            result = result + "," + <string> value.name;
        }
        grpc:Error? err = caller->send(result);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println("Result: " + result);
        }
        checkpanic caller->complete();
    }

    resource function testIntArrayOutput(grpc:Caller caller) {
        TestInt intArray = {values:[1, 2, 3, 4, 5]};
        grpc:Error? err = caller->send(intArray);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println(intArray);
        }
        checkpanic caller->complete();
    }

    resource function testStringArrayOutput(grpc:Caller caller) {
        TestString stringArray = {values:["A", "B", "C"]};
        grpc:Error? err = caller->send(stringArray);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println(stringArray);
        }
        checkpanic caller->complete();
    }

    resource function testFloatArrayOutput(grpc:Caller caller) {
        TestFloat floatArray = {values:[1.1, 1.2, 1.3, 1.4, 1.5]};
        grpc:Error? err = caller->send(floatArray);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println(floatArray);
        }
        checkpanic caller->complete();
    }

    resource function testBooleanArrayOutput(grpc:Caller caller) {
        TestBoolean booleanArray = {values:[true, false, true]};
        grpc:Error? err = caller->send(booleanArray);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println(booleanArray);
        }
        checkpanic caller->complete();
    }

    resource function testStructArrayOutput(grpc:Caller caller) {
        A a1 = {name:"Sam"};
        A a2 = {name:"John"};
        TestStruct structArray = {values:[a1, a2]};
        grpc:Error? err = caller->send(structArray);
        if (err is grpc:Error) {
            io:println("Error from Connector: " + err.reason());
        } else {
            io:println(structArray);
        }
        checkpanic caller->complete();
    }
}

type TestInt record {
    int[] values = [];
};

type TestString record {
    string[] values = [];
};

type TestFloat record {
    float[] values = [];
};

type TestBoolean record {
    boolean[] values = [];
};

type TestStruct record {
    A[] values = [];
};

type A record {
    string name = "";
};

const string
function getDescriptorMap2() returns map<string> {
    return {
        "HelloWorld3.proto":

        ,

        "google/protobuf/wrappers.proto":

        ,

        "google/protobuf/empty.proto":
        "0A0B656D7074792E70726F746F120F676F6F676C652E70726F746F62756622070A05456D70747942540A13636F6D2E676F6F676C652E70726F746F627566420A456D70747950726F746F50015A057479706573F80101A20203475042AA021E476F6F676C652E50726F746F6275662E57656C6C4B6E6F776E5479706573620670726F746F33"

    };
}
