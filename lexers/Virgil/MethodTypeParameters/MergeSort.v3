// with declared types and type arguments
var x: Array<int> = sort<int>([7, 8, -3, 2, 1], int.<);
// with type inferece
var y = sort([7, 8, -3, 2, 1], int.<);

// A basic implementation of Merge Sort for arrays
def sort<T>(array: Array<T>, cmp: (T, T) -> bool) -> Array<T> {
	return sortRec(array, 0, array.length, cmp);
}
// Recursive merge sort
def sortRec<T>(array: Array<T>, start: int, end: int, cmp: (T, T) -> bool) -> Array<T> {
	var size = end - start;
	if (size == 0) return [];
	if (size == 1) return [array(start)];
	if (size == 2) {
		var s = array(start), e = array(end - 1);
		if (cmp(e, s)) return [e, s];
		return [s, e];
	}
	if (size > 2) {
		var middle = (start + end) / 2;
		var a = sortRec(array, start, middle, cmp);
		var b = sortRec(array, middle, end, cmp);
		// merge
		var n = Array<T>.new(size);
		var i = 0, j = 0;
		for (k = 0; k < n.length; k++) {
			var l = a(i), r = b(j);
			if (cmp(l, r)) {
				n(k) = l;
				if (++i == a.length) return finish(n, k + 1, b, j); 
			} else {
				n(k) = r;
				if (++j == b.length) return finish(n, k + 1, a, i); 
			}
		}
		return n;
	}
	return array;
}
// helper for merge sort routine
def finish<T>(array: Array<T>, k: int, end: Array<T>, i: int) -> Array<T> {
	while (k < array.length) array(k++) = end(i++);
	return array;
}
