def main() {
	// with explicit type arguments
	def x = zip<int, bool>([1, 2, 3], [true, false, true]);

	// with inferred type arguments
	def y = zip([6, 7, 8], [false, false, true]);

	// unzip into two distinct arrays
	def w = unzip(y);
}
// creates a single array of tuples from two arrays of individual elements
def zip<A, B>(a: Array<A>, b: Array<B>) -> Array<(A, B)> {
	def r = Array<(A, B)>.new(a.length);
	for (i = 0; i < r.length; i++) {
		r(i) = (a(i), b(i));
	}
	return r;
}
// creates two arrays from a single array of tuples
def unzip<A, B>(r: Array<(A, B)>) -> (Array<A>, Array<B>) {
	def a = Array<A>.new(r.length), b = Array<B>.new(r.length);
	for (i = 0; i < r.length; i++) {
		a(i) = r(i).0;
		b(i) = r(i).1;
	}
	return (a, b);
}
