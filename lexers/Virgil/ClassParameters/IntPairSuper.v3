// With class parameters:
// implicit field declarations and constructor
class IntPair(a: int, b: int) {
	def sum() -> int {
		return a + b;
	}
}
// Alternative A:
// explicit constructor and call to super
class IntTripleA extends IntPair {
	def c: int;
	new(a: int, b: int, c) super(a, b) { }
	def sum() -> int {
		return a + b + c;
	}
}
// Alternative B:
// class parameters, explicit constructor and call to super
class IntTripleB(x: int, y: int, c: int) extends IntPair {
	new() super(x, y) { }
	def sum() -> int {
		return a + b + c;
	}
}
// Alternative C:
// class parameters, implicit constructor and call to super
class IntTripleC(x: int, y: int, c: int) extends IntPair(x, y) {
	def sum() -> int {
		return a + b + c;
	}
}

// all alternatives have a constructor that accepts 3 ints
def x = IntTripleA.new(1, 2, 3);
def y = IntTripleB.new(1, 2, 3);
def z = IntTripleC.new(1, 2, 3);
