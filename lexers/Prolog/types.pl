%main Relation Any;has_type Relation Any Any String;parse_type Relation String Any;get_type Relation Any Any String;string_to_type Relation Any Any;_string_to_type Relation Any Any Any Any;match_until Relation Any Any Any;strictest_type Relation Any Any Any;strict_type Relation Any Any Any;strict_type2 Relation Any Any Any;strict_type Relation;strict_type_atomic Relation String String String;compare_types Relation Any Any;compare_types2 Relation Any Any;compare_types Relation;compare_types_atomic Relation Any String;type_to_string Relation Any String;type_to_string2 Relation Any String;type_to_string3 Relation Any String;type_to_string2 Relation;Cons FunctorObject
:- style_check([-singleton,-no_effect]), ensure_loaded("core.pl").
:- ensure_loaded("string.pl").
:- ensure_loaded("math.pl").
:- ensure_loaded("io.pl").
types_type_to_string3(Env0,_t,_s) :- eq(_t, '[|]'(_a,_b)),eq(_s1,_a),env_call(Env0,"type_to_string2",[Env0,_b,_s2]),(((eq(_s2,"")),eq(_s,_s1));(string_concat("(",_s1,T4),dynamic_add(T4," ",T3),dynamic_add(T3,_s2,T2),dynamic_add(T2,")",T1),eq(_s,T1))).
types_type_to_string2(Env0,_t,_s) :- (((eq(_t,[])),eq(_s,""));(eq(_t, '[|]'(_a,_b)),env_call(Env0,"type_to_string3",[Env0,_a,_s1]),env_call(Env0,"type_to_string2",[Env0,_b,_s2]),(((eq(_s2,"")),eq(_s,_s1));(string_concat(_s1," ",T6),dynamic_add(T6,_s2,T5),eq(_s,T5))))).
types_type_to_string(Env0,_t,_s) :- eq(_t, '[|]'(_a,_b)),eq(_s1,_a),env_call(Env0,"type_to_string2",[Env0,_b,_s2]),(((eq(_s2,"")),eq(_s,_s1));(string_concat(_s1," ",T8),dynamic_add(T8,_s2,T7),eq(_s,T7))).
types_compare_types_atomic(Env0,_s1,_s2) :- eq(_s1,"Any");eq(_s2,"Any");eq(_s1,_s2).
types_compare_types2(Env0,_t1,_t2) :- eq(_t1,[]),eq(_t2,[]);eq(_t1, '[|]'(_a1,_b1)),eq(_t2, '[|]'(_a2,_b2)),env_call(Env0,"compare_types",[Env0,_a1,_a2]),env_call(Env0,"compare_types2",[Env0,_b1,_b2]).
types_compare_types(Env0,_t1,_t2) :- eq(_t1, '[|]'(_a1,_b1)),eq(_t2, '[|]'(_a2,_b2)),env_call(Env0,"compare_types_atomic",[Env0,_a1,_a2]),(((eq(_b1,[]);eq(_b2,[])),true);(env_call(Env0,"compare_types2",[Env0,_b1,_b2]))).
types_strict_type_atomic(Env0,_ta,_tb,_tc) :- once((((eq(_ta,"Any")),eq(_tc,_tb));(eq(_tc,_ta)))).
types_strict_type2(Env0,_t1,_t2,_t3) :- (((eq(_t1,[]),eq(_t2,[])),eq(_t3,[]));(eq(_t1, '[|]'(_a1,_b1)),eq(_t2, '[|]'(_a2,_b2)),env_call(Env0,"strict_type",[Env0,_a1,_a2,_a3]),env_call(Env0,"strict_type2",[Env0,_b1,_b2,_b3]),eq(_t3, '[|]'(_a3,_b3)))).
types_strict_type(Env0,_t1,_t2,_t3) :- eq(_t1, '[|]'(_a1,_b1)),eq(_t2, '[|]'(_a2,_b2)),env_call(Env0,"strict_type_atomic",[Env0,_a1,_a2,_a3]),(((eq(_b1,[])),eq(_t3, '[|]'(_a3,[])));((eq(_b2,[])),eq(_t3, '[|]'(_a3,[])));(env_call(Env0,"strict_type2",[Env0,_b1,_b2,_b3]),eq(_t3, '[|]'(_a3,_b3)))).
types_strictest_type(Env0,_t1,_t2,_t3) :- once((((eq(_t1,'[|]'("Any",[]))),eq(_t3,_t2));((eq(_t2,'[|]'("Any",[]))),eq(_t3,_t1));(eq(_t1, '[|]'(_a1,_b1)),eq(_t2, '[|]'(_a2,_b2)),env_call(Env0,"strict_type_atomic",[Env0,_a1,_a2,_a3]),obj_call2(Env0,"io","writeln",[_a3]),(((eq(_b1,[])),eq(_t3, '[|]'(_a3,[])),obj_call2(Env0,"io","writeln",[_t3]));((eq(_b2,[])),eq(_t3, '[|]'(_a3,[])),obj_call2(Env0,"io","writeln",[_t3]));(env_call(Env0,"strict_type2",[Env0,_b1,_b2,_b3]),eq(_t3, '[|]'(_a3,_b3)),obj_call2(Env0,"io","writeln",[_t3])))))).
types_match_until(Env0,_s,_i,_i2) :- once((((obj_call2(Env0,"string","size",[_s,T9]),eq(T9,_i);obj_call2(Env0,"string","at",[_s,_i," "])),eq(_i,_i2));(fd_add(_i,1,T10),env_call(Env0,"match_until",[Env0,_s,T10,_i2])))).
types__string_to_type(Env0,_s,_i,_final,_type) :- env_call(Env0,"match_until",[Env0,_s,_i,_j]),((fd_sub(_j,1,T12),obj_call2(Env0,"string","at",[_s,T12,T11]),eq(T11,")"))->(fd_sub(_j,1,T14),obj_call2(Env0,"string","slice",[_s,_i,T14,T13]),eq(_s1,T13),eq(_type,'[|]'(_s1,[])),eq(_final,_j));(obj_call2(Env0,"string","slice",[_s,_i,_j,T15]),eq(_s1,T15),((obj_call2(Env0,"string","size",[_s,T16]),eq(_j,T16))->(eq(_type,'[|]'(_s1,[])),eq(_final,_j));(fd_add(_j,1,T17),obj_call2(Env0,"string","at",[_s,T17,_c]),((eq(_c,"("))->(fd_add(_j,2,T18),env_call(Env0,"_string_to_type",[Env0,_s,T18,_final0,_t0]),((obj_call2(Env0,"string","size",[_s,T19]),eq(T19,_final0))->(eq(_type, '[|]'(_s1,'[|]'(_t0,[]))));(fd_add(_final0,1,T20),env_call(Env0,"_string_to_type",[Env0,_s,T20,_final,_t1]),eq(_t1, '[|]'(_a,_b)),eq(_type, '[|]'(_s1, '[|]'(_t0, '[|]'('[|]'(_a,[]),_b)))))));(fd_add(_j,1,T21),env_call(Env0,"_string_to_type",[Env0,_s,T21,_final,_t0]),eq(_t0, '[|]'(_a,_b)),eq(_type, '[|]'(_s1, '[|]'('[|]'(_a,[]),_b))))))))).
types_string_to_type(Env0,_s,_type) :- env_call(Env0,"_string_to_type",[Env0,_s,0,_,_type]).
types_get_type(Env0,_env,_x,_s) :- eq(_s,"Relation").
types_parse_type(Env0,_s,_t) :- obj_call2(Env0,"string","split",[_s," ",_t]).
types_has_type(Env0,_env,_x,_s) :- env_call(Env0,"get_type",[Env0,_env,_x,_type1]),env_call(Env0,"parse_type",[Env0,_s,_type2]),env_call(Env0,"compare_types",[Env0,_type1,_type2]).
types_main(Env0,_x) :- env_call(Env0,"string_to_type",[Env0,"Relation (Functor Any)",T22]),obj_call2(Env0,"io","writeln",[T22]),env_call(Env0,"string_to_type",[Env0,"Rel (Rel Num Str) Str Num",T23]),obj_call2(Env0,"io","writeln",[T23]),env_call(Env0,"string_to_type",[Env0,"Rel Rel Num Str Num",T24]),obj_call2(Env0,"io","writeln",[T24]),env_call(Env0,"string_to_type",[Env0,"Rel (Rel Num (Rel Str) Num) Str Num",T25]),obj_call2(Env0,"io","writeln",[T25]).
types_env(X) :- new(X0),set(X0,"main",types_main,X1),set(X1,"has_type",types_has_type,X2),set(X2,"parse_type",types_parse_type,X3),set(X3,"get_type",types_get_type,X4),set(X4,"string_to_type",types_string_to_type,X5),set(X5,"_string_to_type",types__string_to_type,X6),set(X6,"match_until",types_match_until,X7),set(X7,"strictest_type",types_strictest_type,X8),set(X8,"strict_type",types_strict_type,X9),set(X9,"strict_type2",types_strict_type2,X10),set(X10,"strict_type",types_strict_type,X11),set(X11,"strict_type_atomic",types_strict_type_atomic,X12),set(X12,"compare_types",types_compare_types,X13),set(X13,"compare_types2",types_compare_types2,X14),set(X14,"compare_types",types_compare_types,X15),set(X15,"compare_types_atomic",types_compare_types_atomic,X16),set(X16,"type_to_string",types_type_to_string,X17),set(X17,"type_to_string2",types_type_to_string2,X18),set(X18,"type_to_string3",types_type_to_string3,X19),set(X19,"type_to_string2",types_type_to_string2,X20),io_env(Y20),set(X20,"io",Y20,X21),math_env(Y21),set(X21,"math",Y21,X22),string_env(Y22),set(X22,"string",Y22,X23),set(X23,"Cons",types_Cons,X24),table_env(Y24),set(X24,"table",Y24,X25),list_env(Y25),set(X25,"list",Y25,X26),string_env(Y26),set(X26,"string",Y26,X27),math_env(Y27),set(X27,"math",Y27,X28),io_env(Y28),set(X28,"io",Y28,X29),logic_env(Y29),set(X29,"logic",Y29,X30),set(X30,"Some",types_Some,X31),set(X31,"None",types_None,X32),set(X32,"Left",types_Left,X33),set(X33,"Right",types_Right,X34),X=X34.