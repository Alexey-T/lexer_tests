%main Relation Any;run Relation Any Any;ws Relation Any Any Any Any;push_semicolon Relation Any Any;after_nl Relation Any Any;remove_cur_inds Relation Any Any Any;remove_prev_inds Relation Any Any Any;remove_from_start Relation Any Any Any;find_last_char Relation Any Any Any;find_last_char2 Relation Any Any Any Any;Token FunctorObject;Cons FunctorObject
:- style_check([-singleton,-no_effect]), ensure_loaded("core.pl").
:- ensure_loaded("lexer.pl").
whitespacer_find_last_char2(Env0,_s,_c,_i,_pos) :- fd_neq(_i,-1),(((obj_call2(Env0,"string","at",[_s,_i,_ci])),eq(_ci,_c),eq(_pos,_i));(fd_sub(_i,1,T1),env_call(Env0,"find_last_char2",[Env0,_s,_c,T1,_pos]))).
whitespacer_find_last_char(Env0,_s,_c,_pos) :- neq(_s,""),obj_call2(Env0,"string","size",[_s,T3]),fd_sub(T3,1,T2),env_call(Env0,"find_last_char2",[Env0,_s,_c,T2,_pos]).
whitespacer_remove_from_start(Env0,_s1,_s2,_s3) :- once(obj_call2(Env0,"string","find",[_s1,_s2,_pos])),obj_call2(Env0,"string","size",[_s1,T6]),obj_call2(Env0,"string","size",[_s2,T5]),fd_add(T5,_pos,T4),obj_call2(Env0,"string","slice",[_s1,T4,T6,_s3]).
whitespacer_remove_prev_inds(Env0,_s1,_ind,_s2) :- env_get(Env0,"remove_from_start",T7),obj_call2(Env0,"list","fold",[_ind,closure(T7,Env0),_s1,_s2]).
whitespacer_remove_cur_inds(Env0,_ind,_sgoal,_n) :- obj_get(Env0,"string","concat",T8),obj_call2(Env0,"list","fold",[_ind,closure(T8,Env0),"",_s]),eq(_s,_sgoal),eq(_n,0);eq(_ind, '[|]'(_h,_tail)),env_call(Env0,"remove_cur_inds",[Env0,_tail,_sgoal,_i]),fd_add(_i,1,T9),eq(_n,T9).
whitespacer_after_nl(Env0,_a,_a2) :- obj_call2(Env0,"string","size",[_a,T12]),env_call(Env0,"find_last_char",[Env0,_a,"\n",T11]),fd_add(T11,1,T10),obj_call2(Env0,"string","slice",[_a,T10,T12,_a2]).
whitespacer_push_semicolon(Env0,_l,_l2) :- eq(_l2, '[|]'(fcToken(";",";",_),_l)).
whitespacer_ws(Env0,_tks,_ind,_tk_prev,_tks2) :- eq(_tks, '[|]'(fcToken(_,"EOF",_),[])),(((neq(_ind,[])),eq(_tks2, '[|]'(fcToken(";",";",_),_tks)));(eq(_tks2,_tks))),true;eq(_tks, '[|]'(_h1,_t1)),eq(_h1,fcToken(_a,_tk_type,_)),neq(_tk_type,"whitespace"),env_call(Env0,"ws",[Env0,_t1,_ind,_h1,_t2]),eq(_tks2, '[|]'(_h1,_t2));eq(_tks, '[|]'(_,_t1)),eq(_t1, '[|]'(_h2,_t2)),eq(_h2,fcToken(_,"whitespace",_)),env_call(Env0,"ws",[Env0,_t1,_ind,_tk_prev,_t3]),eq(_tks2,_t3);eq(_tks, '[|]'(_h1,_t1)),eq(_h1,fcToken(_a,"whitespace",_)),once(env_call(Env0,"after_nl",[Env0,_a,_a2])),eq(_tks, '[|]'(_, '[|]'(fcToken(_next,_type_next,_),_))),(((eq(_type_next,"EOF")),obj_call2(Env0,"list","size",[_ind,T13]),eq(_n,T13),eq(_t2,_t1),env_get(Env0,"push_semicolon",T14),obj_call2(Env0,"logic","iterate",[closure(T14,Env0),_n,_t2,_tks2]));((env_call(Env0,"remove_prev_inds",[Env0,_a2,_ind,_snew])),(((eq(_snew,"")),eq(_ind2,_ind),eq(_tk_prev,fcToken(_,_type_prev,_)),neq(_type_next,";"),neq(_type_next,"connective"),neq(_type_next,"else"),neq(_type_next,"elseif"),neq(_type_prev,";"),neq(_type_prev,"connective"),neq(_type_prev,"else"),neq(_type_prev,"elseif"),env_call(Env0,"ws",[Env0,_t1,_ind2,_h1,_t2]),eq(_tks2, '[|]'(fcToken("and","connective",_),_t2)));(neq(_snew,""),eq(_ind2, '[|]'(_snew,_ind)),env_call(Env0,"ws",[Env0,_t1,_ind2,_h1,_t2]),eq(_tks2,_t2))));(env_call(Env0,"remove_cur_inds",[Env0,_ind,_a2,_n]),obj_get(Env0,"list","rest",T15),obj_call2(Env0,"logic","iterate",[closure(T15,Env0),_n,_ind,_ind2]),eq(_tk_prev,fcToken(_,_type_prev,_)),neq(_type_next,";"),neq(_type_next,"connective"),neq(_type_prev,"connective"),neq(_type_prev,"else"),neq(_type_prev,"elseif"),(((neq(_type_prev,";")),neq(_type_next,"else"),neq(_type_next,"elseif"),env_get(Env0,"push_semicolon",T16),obj_call2(Env0,"logic","iterate",[closure(T16,Env0),_n, '[|]'(fcToken("and","connective",_),_t2),_tks2]),env_call(Env0,"ws",[Env0,_t1,_ind2,_h1,_t2]));((eq(_type_prev,";")),eq(_tks2, '[|]'(fcToken("and","connective",_),_t2)),env_call(Env0,"ws",[Env0,_t1,_ind2,_h1,_t2]));(obj_call2(Env0,"math","sub",[_n,1,_n2]),env_get(Env0,"push_semicolon",T17),obj_call2(Env0,"logic","iterate",[closure(T17,Env0),_n2,_t2,_tks2]),env_call(Env0,"ws",[Env0,_t1,_ind2,_h1,_t2]))))),true;eq(_tks, '[|]'(_h1,_t1)),env_call(Env0,"ws",[Env0,_t1,_ind,_h1,_t2]),eq(_tks2,_t2).
whitespacer_run(Env0,_tks1,_tks2) :- (((eq(_tks1, '[|]'(fcToken(_,"whitespace",_),_tks_tail))),env_call(Env0,"ws",[Env0,_tks_tail,[],fcToken("","SOF",_),_tks2]));(env_call(Env0,"ws",[Env0,_tks1,[],fcToken("","SOF",_),_tks2]))).
whitespacer_main(Env0,_x) :- env_call(Env0,"remove_prev_inds",[Env0,"\t  \t", '[|]'("\t", '[|]'("  ",[])),_snew]),env_call(Env0,"remove_cur_inds",[Env0,[],"",_n]).
whitespacer_env(X) :- new(X0),set(X0,"main",whitespacer_main,X1),set(X1,"run",whitespacer_run,X2),set(X2,"ws",whitespacer_ws,X3),set(X3,"push_semicolon",whitespacer_push_semicolon,X4),set(X4,"after_nl",whitespacer_after_nl,X5),set(X5,"remove_cur_inds",whitespacer_remove_cur_inds,X6),set(X6,"remove_prev_inds",whitespacer_remove_prev_inds,X7),set(X7,"remove_from_start",whitespacer_remove_from_start,X8),set(X8,"find_last_char",whitespacer_find_last_char,X9),set(X9,"find_last_char2",whitespacer_find_last_char2,X10),lexer_env(Y10),set(X10,"lexer",Y10,X11),set(X11,"Token",whitespacer_Token,X12),set(X12,"Cons",whitespacer_Cons,X13),table_env(Y13),set(X13,"table",Y13,X14),list_env(Y14),set(X14,"list",Y14,X15),string_env(Y15),set(X15,"string",Y15,X16),math_env(Y16),set(X16,"math",Y16,X17),io_env(Y17),set(X17,"io",Y17,X18),logic_env(Y18),set(X18,"logic",Y18,X19),set(X19,"Some",whitespacer_Some,X20),set(X20,"None",whitespacer_None,X21),set(X21,"Left",whitespacer_Left,X22),set(X22,"Right",whitespacer_Right,X23),X=X23.