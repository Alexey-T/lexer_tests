%parse_world Relation Any Any Any;parse_def Relation Any Any Any;parse_definition Relation Any Any Any;parse_fact Relation Any Any Any;parse_body Relation Any Any Any;parse_call Relation Any Any Any;parse_definition Relation;parse_if Relation Any Any Any;parse_elseifs Relation Any Any Any;parse_false Relation Any Any Any;parse_true Relation Any Any Any;parse_declaration Relation Any Any Any;parse_host Relation Any Any Any;parse_obj_pred Relation Any Any Any;parse_pred Relation Any Any Any;parse_inequality Relation Any Any Any;parse_neq Relation Any Any Any;parse_eq Relation Any Any Any;parse_exp Relation Any Any Any;parse_math0 Relation Any Any Any;parse_math1 Relation Any Any Any;parse_math2 Relation Any Any Any Any;parse_math0 Relation;parse_exp2 Relation Any Any Any;exp_to_functor Relation Any Any Any;parse_table Relation Any Any Any;parse_list Relation Any Any Any;parse_exp_call Relation Any Any Any;parse_obj_get Relation Any Any Any;parse_exp_obj_call Relation Any Any Any;parse_lambda Relation Any Any Any;parse_body Relation;parse_name Relation Any Any Any Any;name_list_to_type Relation Any Any;name_list_to_type2 Relation Any Any;parse_name2 Relation Any Any Any Any;parse_args Relation Any Any Any;parse_exp Relation;custom_throw Relation String Functor;get_info Relation Any Any;parse_string Relation Any Any Any;parse_type Relation Any Any Any;None FunctorObject;Error FunctorObject;TTable FunctorObject;TList FunctorObject;Func FunctorObject;ObjGet FunctorObject;Id FunctorObject;Str FunctorObject;Num FunctorObject;Fact FunctorObject;Rel FunctorObject;Declaration FunctorObject;Once FunctorObject;Host FunctorObject;RelOp FunctorObject;Op FunctorObject;SoftCut FunctorObject;Cond FunctorObject;If FunctorObject;ObjPred FunctorObject;Bracket FunctorObject;Or FunctorObject;And FunctorObject;Pred FunctorObject;False FunctorObject;True FunctorObject;Inequality FunctorObject;Neq FunctorObject;Eq FunctorObject;Info FunctorObject;Token FunctorObject;Cons FunctorObject
:- style_check([-singleton,-no_effect]), ensure_loaded("core.pl").
:- ensure_loaded("lexer.pl").
:- ensure_loaded("whitespacer.pl").
parser_parse_type(Env0,_l,_tail,_type) :- eq(_l, '[|]'(fcToken(_,_type,_),_tail)).
parser_parse_string(Env0,_l,_tail,_str) :- eq(_l, '[|]'(fcToken(_str,_,_),_tail)).
parser_get_info(Env0,_l,_info) :- eq(_l, '[|]'(fcToken(_,_,_info),_)).
parser_custom_throw(Env0,_msg,_info) :- eq(_info,fcInfo(_line,_col)),obj_call2(Env0,"math","integerToString",[_line,T6]),string_concat("(line ",T6,T5),dynamic_add(T5,", col ",T4),obj_call2(Env0,"math","integerToString",[_col,T7]),dynamic_add(T4,T7,T3),dynamic_add(T3,") ",T2),dynamic_add(T2,_msg,T1),obj_call2(Env0,"logic","throw",[T1]).
parser_parse_args(Env0,_l,_tail,_f) :- env_call(Env0,"parse_exp",[Env0,_l,_l1,_f1]),env_call(Env0,"parse_type",[Env0,_l1,_l2,","]),env_call(Env0,"parse_args",[Env0,_l2,_tail,_f2]),eq(_f, '[|]'(_f1,_f2));env_call(Env0,"parse_exp",[Env0,_l,_tail,_f1]),eq(_f, '[|]'(_f1,[]));eq(_f,[]),eq(_tail,_l).
parser_parse_name2(Env0,_l,_tail,_type,_name) :- eq(_l, '[|]'(fcToken(_a,"id",_),_l2)),env_call(Env0,"parse_name2",[Env0,_l2,_tail,_type2,_name]),eq(_type, '[|]'(_a,_type2));eq(_l, '[|]'(fcToken(_a,"id",_),_tail)),eq(_type,[]),eq(_name,_a).
parser_name_list_to_type2(Env0,_l,_l2) :- (((eq(_l,'[|]'(_head,[]))),eq(_l2,'[|]'('[|]'(_head,[]),[])));(eq(_l, '[|]'(_head,_tail)),env_call(Env0,"name_list_to_type2",[Env0,_tail,_tail2]),eq(_l2, '[|]'('[|]'(_head,[]),_tail2)))).
parser_name_list_to_type(Env0,_l,_l2) :- (((eq(_l,[])),eq(_l2,_l));((eq(_l,'[|]'(_a,[]))),eq(_l2,_l));(eq(_l, '[|]'(_a,_tail)),env_call(Env0,"name_list_to_type2",[Env0,_tail,_tail2]),eq(_l2, '[|]'(_a,_tail2)))).
parser_parse_name(Env0,_l,_tail,_type,_name) :- once(env_call(Env0,"parse_name2",[Env0,_l,_tail,_name_list,_name])),env_call(Env0,"name_list_to_type",[Env0,_name_list,_type]).
parser_parse_lambda(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_,"rel",_), '[|]'(fcToken(_,"(",_),_l2))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_args]),eq(_l3, '[|]'(fcToken(_,")",_),_l4)),env_call(Env0,"parse_body",[Env0,_l4,_l5,_body]),eq(_l5, '[|]'(fcToken(_,";",_),_tail)),eq(_f,fcRel(_args,_body)).
parser_parse_exp_obj_call(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_obj,"id",_), '[|]'(fcToken(_,".",_), '[|]'(fcToken(_name,"id",_), '[|]'(fcToken(_,"(",_),_l2))))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_args]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),env_call(Env0,"get_info",[Env0,_l,T8]),eq(_f,fcFunc(_obj,_name,_args,T8)).
parser_parse_obj_get(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_a,"id",_), '[|]'(fcToken(_,".",_), '[|]'(fcToken(_b,"id",_),_tail)))),eq(_f,fcObjGet(_a,_b)).
parser_parse_exp_call(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_name,"id",_), '[|]'(fcToken(_,"(",_),_l2))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_args]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),env_call(Env0,"get_info",[Env0,_l,T9]),eq(_f,fcFunc(_name,_args,T9)).
parser_parse_list(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_,"[",_),_l2)),env_call(Env0,"parse_args",[Env0,_l2,_l3,_args]),eq(_l3, '[|]'(fcToken(_,"]",_),_tail)),eq(_f,fcTList(_args)).
parser_parse_table(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_,"{",_),_l2)),eq(_l2,_l3),eq(_l3, '[|]'(fcToken(_,"}",_),_tail)),eq(_f,fcTTable(_args)).
parser_exp_to_functor(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_a,"string",_),_tail)),eq(_f,fcStr(_a));eq(_l, '[|]'(fcToken(_,"-",_), '[|]'(fcToken(_a,"number",_),_tail))),string_concat("-",_a,T10),eq(_f,fcNum(T10));eq(_l, '[|]'(fcToken(_a,"number",_),_tail)),eq(_f,fcNum(_a)).
parser_parse_exp2(Env0,_l,_tail,_f) :- env_call(Env0,"parse_exp_obj_call",[Env0,_l,_tail,_f]);env_call(Env0,"parse_obj_get",[Env0,_l,_tail,_f]);env_call(Env0,"parse_exp_call",[Env0,_l,_tail,_f]);env_call(Env0,"parse_list",[Env0,_l,_tail,_f]);env_call(Env0,"parse_table",[Env0,_l,_tail,_f]);env_call(Env0,"parse_name",[Env0,_l,_tail,_type,_name]),eq(_f,fcId(_name,_type));env_call(Env0,"parse_lambda",[Env0,_l,_tail,_f]);env_call(Env0,"exp_to_functor",[Env0,_l,_tail,_f]).
parser_parse_math2(Env0,_l,_tail,_prev,_f) :- env_call(Env0,"parse_string",[Env0,_l,_l2,_op]),(((eq(_op,"+");eq(_op,"-");eq(_op,"*");eq(_op,"/")),(((env_call(Env0,"parse_string",[Env0,_l2,_l3,"("])),env_call(Env0,"parse_math0",[Env0,_l3,_l4,_b]),env_call(Env0,"parse_string",[Env0,_l4,_tail,")"]),env_call(Env0,"get_info",[Env0,_l,T11]),eq(_f,fcOp(_prev,_b,_op,T11)));(env_call(Env0,"parse_exp2",[Env0,_l2,_l4,_b]),env_call(Env0,"get_info",[Env0,_l,T12]),eq(_fcur,fcOp(_prev,_b,_op,T12)),env_call(Env0,"parse_math2",[Env0,_l4,_tail,_fcur,_fnext]),(((eq(_fnext,fcNone)),eq(_f,_fcur));(eq(_f,_fnext))))));(eq(_f,fcNone),eq(_tail,_l))).
parser_parse_math1(Env0,_l,_tail,_f) :- env_call(Env0,"parse_exp2",[Env0,_l,_l2,_a]),env_call(Env0,"parse_math2",[Env0,_l2,_tail,_a,_f2]),(((eq(_f2,fcNone)),eq(_f,_a));(eq(_f,_f2))).
parser_parse_math0(Env0,_l,_tail,_f) :- env_call(Env0,"parse_string",[Env0,_l,_l2,_s]),(((eq(_s,"(")),env_call(Env0,"parse_math0",[Env0,_l2,_l3,_f1]),env_call(Env0,"parse_string",[Env0,_l3,_l4,")"]),env_call(Env0,"parse_math2",[Env0,_l4,_tail,_f1,_f2]),(((eq(_f2,fcNone)),eq(_f,_f1));(eq(_f,_f2))));(env_call(Env0,"parse_math1",[Env0,_l,_tail,_f]))).
parser_parse_exp(Env0,_l,_tail,_f) :- once(env_call(Env0,"parse_math0",[Env0,_l,_tail,_f])).
parser_parse_eq(Env0,_l,_tail,_f) :- env_call(Env0,"parse_exp",[Env0,_l,_l2,_a]),env_call(Env0,"parse_type",[Env0,_l2,_l3,"="]),env_call(Env0,"parse_exp",[Env0,_l3,_tail,_b]),env_call(Env0,"get_info",[Env0,_l,T13]),eq(_f,fcEq(_a,_b,T13)).
parser_parse_neq(Env0,_l,_tail,_f) :- env_call(Env0,"parse_exp",[Env0,_l,_l2,_a]),env_call(Env0,"parse_type",[Env0,_l2,_l3,"!="]),env_call(Env0,"parse_exp",[Env0,_l3,_tail,_b]),eq(_f,fcNeq(_a,_b)).
parser_parse_inequality(Env0,_l,_tail,_f) :- env_call(Env0,"parse_exp",[Env0,_l,_l2,_a]),env_call(Env0,"parse_type",[Env0,_l2,_l3,_op]),(((eq(_op,"<=");eq(_op,">=");eq(_op,">");eq(_op,"<");eq(_op,"!=")),env_call(Env0,"parse_exp",[Env0,_l3,_tail,_b]),env_call(Env0,"get_info",[Env0,_l,T14]),eq(_f,fcInequality(_a,_b,_op,T14)));(false)).
parser_parse_pred(Env0,_l,_tail,_code) :- eq(_l, '[|]'(fcToken(_a,"id",_), '[|]'(fcToken(_,"(",_),_l2))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_code_args]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),env_call(Env0,"get_info",[Env0,_l,T15]),eq(_code,fcPred(_a,_code_args,T15)).
parser_parse_obj_pred(Env0,_l,_tail,_code) :- eq(_l, '[|]'(fcToken(_obj,"id",_), '[|]'(fcToken(_,".",_), '[|]'(fcToken(_a,"id",_), '[|]'(fcToken(_,"(",_),_l2))))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_code_args]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),env_call(Env0,"get_info",[Env0,_l,T16]),eq(_code,fcObjPred(_obj,_a,_code_args,T16)).
parser_parse_host(Env0,_l,_tail,_code) :- eq(_l, '[|]'(fcToken(_obj,"id",_), '[|]'(fcToken(_,"::",_), '[|]'(fcToken(_a,"id",_), '[|]'(fcToken(_,"(",_),_l2))))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_code_args]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),eq(_code,fcHost(_obj,_a,_code_args));eq(_l, '[|]'(fcToken(_obj,"id",_), '[|]'(fcToken(_,"::",_),_l2))),eq(_l2, '[|]'(fcToken(_str,"string",_),_tail)),eq(_code,fcHost(_obj,_str)).
parser_parse_declaration(Env0,_l,_tail,_code) :- env_call(Env0,"parse_name",[Env0,_l,_tail,_type,_name]),eq(_code,fcDeclaration(_name,_type)).
parser_parse_true(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_a,"true",_),_tail)),eq(_f,fcTrue).
parser_parse_false(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_a,"false",_),_tail)),eq(_f,fcFalse).
parser_parse_elseifs(Env0,_l,_tail,_cond) :- eq(_l, '[|]'(fcToken(_,"elseif",_), '[|]'(fcToken(_,"(",_),_l1))),env_call(Env0,"parse_body",[Env0,_l1,_l2,_f1]),eq(_l2, '[|]'(fcToken(_,")",_),_l3)),env_call(Env0,"parse_body",[Env0,_l3,_l4,_f2]),env_call(Env0,"parse_elseifs",[Env0,_l4,_tail,_cond2]),eq(_cond, '[|]'(_f1, '[|]'(_f2,_cond2)));eq(_l, '[|]'(fcToken(_,"else",_),_l10)),env_call(Env0,"parse_body",[Env0,_l10,_tail,_f1]),eq(_cond,'[|]'(_f1,[]));eq(_cond,[]),eq(_tail,_l).
parser_parse_if(Env0,_l,_tail,_f) :- (((eq(_l, '[|]'(fcToken(_,"if",_),_l0))),eq(_f,fcCond(_fbody1,_fbody2,_cond)));(eq(_l, '[|]'(fcToken(_,"choose",_),_l0)),eq(_f,fcSoftCut(_fbody1,_fbody2,_cond)))),eq(_l0, '[|]'(fcToken(_,"(",_),_l2)),env_call(Env0,"parse_body",[Env0,_l2,_l3,_fbody1]),eq(_l3, '[|]'(fcToken(_,")",_),_l4)),env_call(Env0,"parse_body",[Env0,_l4,_l5,_fbody2]),env_call(Env0,"parse_elseifs",[Env0,_l5,_l11,_cond]),eq(_l11, '[|]'(fcToken(_,";",_),_tail)).
parser_parse_call(Env0,_l,_tail,_code) :- env_call(Env0,"parse_true",[Env0,_l,_tail,_code]);env_call(Env0,"parse_false",[Env0,_l,_tail,_code]);env_call(Env0,"parse_if",[Env0,_l,_tail,_code]);env_call(Env0,"parse_pred",[Env0,_l,_tail,_code]);env_call(Env0,"parse_eq",[Env0,_l,_tail,_code]);env_call(Env0,"parse_inequality",[Env0,_l,_tail,_code]);env_call(Env0,"parse_obj_pred",[Env0,_l,_tail,_code]);env_call(Env0,"parse_definition",[Env0,_l,_tail,_code]);env_call(Env0,"parse_host",[Env0,_l,_tail,_code]);env_call(Env0,"parse_declaration",[Env0,_l,_tail,_code]);eq(_l, '[|]'(fcToken(_,"once",_),_l2)),env_call(Env0,"parse_call",[Env0,_l2,_tail,_s1]),eq(_code,fcOnce(_s1)).
parser_parse_body(Env0,_l,_tail,_code) :- env_call(Env0,"parse_call",[Env0,_l,_l2,_s1]),(((eq(_l2, '[|]'(fcToken(_conn,"connective",_),_l3))),(((eq(_conn,"and")),eq(_code,fcAnd(_s1,_s2)));((eq(_conn,"or")),eq(_code,fcOr(_s1,_s2)))),env_call(Env0,"parse_body",[Env0,_l3,_tail,_s2]));(eq(_l2,_tail),eq(_s1,_code))),true;eq(_l, '[|]'(fcToken(_,"(",_),_l2)),env_call(Env0,"parse_body",[Env0,_l2,_l3,_f1]),eq(_l3, '[|]'(fcToken(_,")",_),_l4)),eq(_l4, '[|]'(fcToken(_conn,"connective",_),_l5)),env_call(Env0,"parse_body",[Env0,_l5,_tail,_f2]),(((eq(_conn,"and")),eq(_code,fcAnd(fcBracket(_f1),_f2)));(eq(_conn,"or"),eq(_code,fcOr(fcBracket(_f1),_f2)))),true;eq(_l, '[|]'(fcToken(_,"(",_),_l2)),env_call(Env0,"parse_body",[Env0,_l2,_l3,_f]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),eq(_code,fcBracket(_f)).
parser_parse_fact(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_name,"id",_), '[|]'(fcToken(_,"(",_),_l2))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_args]),eq(_l3, '[|]'(fcToken(_,")",_),_tail)),env_call(Env0,"get_info",[Env0,_l,T17]),eq(_f,fcFact(_name,_args,T17)).
parser_parse_definition(Env0,_l,_tail,_f) :- eq(_l, '[|]'(fcToken(_,"rel",_), '[|]'(fcToken(_name,"id",_), '[|]'(fcToken(_,"(",_),_l2)))),env_call(Env0,"parse_args",[Env0,_l2,_l3,_args]),eq(_l3, '[|]'(fcToken(_,")",_),_l4)),env_call(Env0,"parse_body",[Env0,_l4,_l5,_body]),eq(_l5, '[|]'(fcToken(_,";",_),_tail)),eq(_f,fcRel(_name,_args,_body)).
parser_parse_def(Env0,_l,_tail,_f) :- env_call(Env0,"parse_eq",[Env0,_l,_tail,_f]);env_call(Env0,"parse_definition",[Env0,_l,_tail,_f]);env_call(Env0,"parse_fact",[Env0,_l,_tail,_f]);env_call(Env0,"parse_declaration",[Env0,_l,_tail,_f]).
parser_parse_world(Env0,_l,_tail,_f) :- (((env_call(Env0,"parse_def",[Env0,_l,_l2,_a])),(((eq(_l2, '[|]'(fcToken(_conn,"connective",_),_l3))),env_call(Env0,"parse_world",[Env0,_l3,_tail,_b]),eq(_f,fcAnd(_a,_b)));(eq(_l2,_tail),eq(_f,_a))));(env_call(Env0,"get_info",[Env0,_l,T18]),env_call(Env0,"custom_throw",[Env0,"cannot parse definition from this point",T18]))).
parser_env(X) :- new(X0),set(X0,"parse_world",parser_parse_world,X1),set(X1,"parse_def",parser_parse_def,X2),set(X2,"parse_definition",parser_parse_definition,X3),set(X3,"parse_fact",parser_parse_fact,X4),set(X4,"parse_body",parser_parse_body,X5),set(X5,"parse_call",parser_parse_call,X6),set(X6,"parse_definition",parser_parse_definition,X7),set(X7,"parse_if",parser_parse_if,X8),set(X8,"parse_elseifs",parser_parse_elseifs,X9),set(X9,"parse_false",parser_parse_false,X10),set(X10,"parse_true",parser_parse_true,X11),set(X11,"parse_declaration",parser_parse_declaration,X12),set(X12,"parse_host",parser_parse_host,X13),set(X13,"parse_obj_pred",parser_parse_obj_pred,X14),set(X14,"parse_pred",parser_parse_pred,X15),set(X15,"parse_inequality",parser_parse_inequality,X16),set(X16,"parse_neq",parser_parse_neq,X17),set(X17,"parse_eq",parser_parse_eq,X18),set(X18,"parse_exp",parser_parse_exp,X19),set(X19,"parse_math0",parser_parse_math0,X20),set(X20,"parse_math1",parser_parse_math1,X21),set(X21,"parse_math2",parser_parse_math2,X22),set(X22,"parse_math0",parser_parse_math0,X23),set(X23,"parse_exp2",parser_parse_exp2,X24),set(X24,"exp_to_functor",parser_exp_to_functor,X25),set(X25,"parse_table",parser_parse_table,X26),set(X26,"parse_list",parser_parse_list,X27),set(X27,"parse_exp_call",parser_parse_exp_call,X28),set(X28,"parse_obj_get",parser_parse_obj_get,X29),set(X29,"parse_exp_obj_call",parser_parse_exp_obj_call,X30),set(X30,"parse_lambda",parser_parse_lambda,X31),set(X31,"parse_body",parser_parse_body,X32),set(X32,"parse_name",parser_parse_name,X33),set(X33,"name_list_to_type",parser_name_list_to_type,X34),set(X34,"name_list_to_type2",parser_name_list_to_type2,X35),set(X35,"parse_name2",parser_parse_name2,X36),set(X36,"parse_args",parser_parse_args,X37),set(X37,"parse_exp",parser_parse_exp,X38),set(X38,"custom_throw",parser_custom_throw,X39),set(X39,"get_info",parser_get_info,X40),set(X40,"parse_string",parser_parse_string,X41),set(X41,"parse_type",parser_parse_type,X42),whitespacer_env(Y42),set(X42,"whitespacer",Y42,X43),lexer_env(Y43),set(X43,"lexer",Y43,X44),set(X44,"None",parser_None,X45),set(X45,"Error",parser_Error,X46),set(X46,"TTable",parser_TTable,X47),set(X47,"TList",parser_TList,X48),set(X48,"Func",parser_Func,X49),set(X49,"ObjGet",parser_ObjGet,X50),set(X50,"Id",parser_Id,X51),set(X51,"Str",parser_Str,X52),set(X52,"Num",parser_Num,X53),set(X53,"Fact",parser_Fact,X54),set(X54,"Rel",parser_Rel,X55),set(X55,"Declaration",parser_Declaration,X56),set(X56,"Once",parser_Once,X57),set(X57,"Host",parser_Host,X58),set(X58,"RelOp",parser_RelOp,X59),set(X59,"Op",parser_Op,X60),set(X60,"SoftCut",parser_SoftCut,X61),set(X61,"Cond",parser_Cond,X62),set(X62,"If",parser_If,X63),set(X63,"ObjPred",parser_ObjPred,X64),set(X64,"Bracket",parser_Bracket,X65),set(X65,"Or",parser_Or,X66),set(X66,"And",parser_And,X67),set(X67,"Pred",parser_Pred,X68),set(X68,"False",parser_False,X69),set(X69,"True",parser_True,X70),set(X70,"Inequality",parser_Inequality,X71),set(X71,"Neq",parser_Neq,X72),set(X72,"Eq",parser_Eq,X73),set(X73,"Info",parser_Info,X74),set(X74,"Token",parser_Token,X75),set(X75,"Cons",parser_Cons,X76),table_env(Y76),set(X76,"table",Y76,X77),list_env(Y77),set(X77,"list",Y77,X78),string_env(Y78),set(X78,"string",Y78,X79),math_env(Y79),set(X79,"math",Y79,X80),io_env(Y80),set(X80,"io",Y80,X81),logic_env(Y81),set(X81,"logic",Y81,X82),set(X82,"Some",parser_Some,X83),set(X83,"None",parser_None,X84),set(X84,"Left",parser_Left,X85),set(X85,"Right",parser_Right,X86),X=X86.